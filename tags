!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
#	cache-plug/vim-polyglot/indent/dictconf.vim	/^inoremap <buffer> # X#$/;"	m
#	cache-plug/vim-polyglot/indent/dictdconf.vim	/^inoremap <buffer> # X#$/;"	m
#	cache-plug/vim-polyglot/indent/ps1.vim	/^inoremap <buffer> # X#$/;"	m
$FZF_DEFAULT_COMMAND	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^    let $FZF_DEFAULT_COMMAND = a:grep_command$/;"	v
$FZF_DEFAULT_COMMAND	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^    let $FZF_DEFAULT_COMMAND = prev_default_command$/;"	v
$NODE_CLIENT_LOG_FILE	cache-plug/coc.nvim/autoload/coc/client.vim	/^    let $NODE_CLIENT_LOG_FILE = s:logfile$/;"	v
$NODE_CLIENT_LOG_LEVEL	cache-plug/coc.nvim/autoload/coc/client.vim	/^  let $NODE_CLIENT_LOG_LEVEL = 'debug'$/;"	v
$PYTHONWARNINGS	cache-plug/vim-polyglot/compiler/python.vim	/^  let $PYTHONWARNINGS="ignore"$/;"	v
$TF_CLI_ARGS_fmt	cache-plug/vim-polyglot/autoload/terraform.vim	/^let $TF_CLI_ARGS_fmt=''$/;"	v
&Edit.&Find\.\.\.		y:promptfind	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu <silent>	 &Edit.&Find\\.\\.\\.		y:promptfind <C-R>=<SID>FixFText()<CR><CR>$/;"	m
&Edit.&Paste<Tab>"+gP		<C-R>+	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu	 &Edit.&Paste<Tab>"+gP		<C-R>+$/;"	m
&Edit.Find\	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu	 &Edit.Find\\ and\\ Rep&lace<Tab>:s	:s\/$/;"	m
&Edit.Find\	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu <silent>	 &Edit.Find\\ and\\ Rep&lace\\.\\.\\. y:promptrepl <C-R>=<SID>FixFText()<CR><CR>$/;"	m
&Edit.Put\	cache-plug/vim-polyglot/extras/menu.vim	/^inoremenu	 &Edit.Put\\ &After<Tab>]p	<C-O>]p$/;"	m
&Edit.Put\	cache-plug/vim-polyglot/extras/menu.vim	/^inoremenu	 &Edit.Put\\ &Before<Tab>[p	<C-O>[p$/;"	m
&File.&Print			:hardcopy<CR>	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu &File.&Print			:hardcopy<CR>$/;"	m
&File.&Print			:w	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu &File.&Print			:w !lpr<CR>$/;"	m
&Tools.&Diff.&Get\	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu &Tools.&Diff.&Get\\ Block		:diffget<CR>$/;"	m
&Tools.&Diff.&Put\	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu &Tools.&Diff.&Put\\ Block		:diffput<CR>$/;"	m
&Tools.&Jump\	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu &Tools.&Jump\\ to\\ This\\ Tag<Tab>g^]	g<C-]>$/;"	m
1.100	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu <script> <silent> 1.100 PopUp.Select\\ &All	<C-U>call <SID>SelectAll()<CR>$/;"	m
1.100	cache-plug/vim-polyglot/extras/menu.vim	/^inoremenu <script> <silent> 1.100 PopUp.Select\\ &All	<C-O>:call <SID>SelectAll()<CR>$/;"	m
1.100	cache-plug/vim-polyglot/extras/menu.vim	/^noremenu  <script> <silent> 1.100 PopUp.Select\\ &All	:<C-U>call <SID>SelectAll()<CR>$/;"	m
1.20	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 1.20 PopUp.Cu&t		"+x$/;"	m
1.30	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu 1.30 PopUp.&Copy		<C-Y>$/;"	m
1.30	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 1.30 PopUp.&Copy		"+y$/;"	m
1.40	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu 1.40 PopUp.&Paste		<C-R>+$/;"	m
1.40	cache-plug/vim-polyglot/extras/menu.vim	/^nnoremenu 1.40 PopUp.&Paste		"+gP$/;"	m
1.50	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 1.50 PopUp.&Delete		x$/;"	m
1.60	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 1.60 PopUp.Select\\ Blockwise	<C-V>$/;"	m
1.70	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu 1.70 ToolBar.Cut		"+x$/;"	m
1.70	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu 1.70 PopUp.Select\\ &Word	<C-C>vaw$/;"	m
1.70	cache-plug/vim-polyglot/extras/menu.vim	/^inoremenu 1.70 PopUp.Select\\ &Word	<C-O>vaw$/;"	m
1.70	cache-plug/vim-polyglot/extras/menu.vim	/^nnoremenu 1.70 PopUp.Select\\ &Word	vaw$/;"	m
1.70	cache-plug/vim-polyglot/extras/menu.vim	/^onoremenu 1.70 PopUp.Select\\ &Word	aw$/;"	m
1.70	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 1.70 PopUp.Select\\ &Word	<C-C>vaw$/;"	m
1.73	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu 1.73 PopUp.Select\\ &Sentence	<C-C>vas$/;"	m
1.73	cache-plug/vim-polyglot/extras/menu.vim	/^inoremenu 1.73 PopUp.Select\\ &Sentence	<C-O>vas$/;"	m
1.73	cache-plug/vim-polyglot/extras/menu.vim	/^nnoremenu 1.73 PopUp.Select\\ &Sentence	vas$/;"	m
1.73	cache-plug/vim-polyglot/extras/menu.vim	/^onoremenu 1.73 PopUp.Select\\ &Sentence	as$/;"	m
1.73	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 1.73 PopUp.Select\\ &Sentence	<C-C>vas$/;"	m
1.77	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-C>vap$/;"	m
1.77	cache-plug/vim-polyglot/extras/menu.vim	/^inoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-O>vap$/;"	m
1.77	cache-plug/vim-polyglot/extras/menu.vim	/^nnoremenu 1.77 PopUp.Select\\ Pa&ragraph	vap$/;"	m
1.77	cache-plug/vim-polyglot/extras/menu.vim	/^onoremenu 1.77 PopUp.Select\\ Pa&ragraph	ap$/;"	m
1.77	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-C>vap$/;"	m
1.80	cache-plug/vim-polyglot/extras/menu.vim	/^  cnoremenu 1.80 ToolBar.Copy		<C-Y>$/;"	m
1.80	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu 1.80 ToolBar.Copy		"+y$/;"	m
1.80	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.80	cache-plug/vim-polyglot/extras/menu.vim	/^inoremenu 1.80 PopUp.Select\\ &Line	<C-O>V$/;"	m
1.80	cache-plug/vim-polyglot/extras/menu.vim	/^nnoremenu 1.80 PopUp.Select\\ &Line	V$/;"	m
1.80	cache-plug/vim-polyglot/extras/menu.vim	/^onoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.80	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.90	cache-plug/vim-polyglot/extras/menu.vim	/^  nnoremenu 1.90 ToolBar.Paste		"+gP$/;"	m
1.90	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
1.90	cache-plug/vim-polyglot/extras/menu.vim	/^inoremenu 1.90 PopUp.Select\\ &Block	<C-O><C-V>$/;"	m
1.90	cache-plug/vim-polyglot/extras/menu.vim	/^nnoremenu 1.90 PopUp.Select\\ &Block	<C-V>$/;"	m
1.90	cache-plug/vim-polyglot/extras/menu.vim	/^onoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
1.90	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
20.340	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 20.340 &Edit.Cu&t<Tab>"+x		"+x$/;"	m
20.350	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu 20.350 &Edit.&Copy<Tab>"+y		<C-Y>$/;"	m
20.350	cache-plug/vim-polyglot/extras/menu.vim	/^vnoremenu 20.350 &Edit.&Copy<Tab>"+y		"+y$/;"	m
20.360	cache-plug/vim-polyglot/extras/menu.vim	/^nnoremenu 20.360 &Edit.&Paste<Tab>"+gP		"+gP$/;"	m
20.370	cache-plug/vim-polyglot/extras/menu.vim	/^nnoremenu 20.370 &Edit.Put\\ &Before<Tab>[p	[p$/;"	m
20.380	cache-plug/vim-polyglot/extras/menu.vim	/^nnoremenu 20.380 &Edit.Put\\ &After<Tab>]p	]p$/;"	m
20.390	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu 20.390 &Edit.&Delete<Tab>x		x$/;"	m
20.400	cache-plug/vim-polyglot/extras/menu.vim	/^cnoremenu <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	<C-U>call <SID>SelectAll()<CR>$/;"	m
20.400	cache-plug/vim-polyglot/extras/menu.vim	/^inoremenu <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	<C-O>:call <SID>SelectAll()<CR>$/;"	m
20.400	cache-plug/vim-polyglot/extras/menu.vim	/^noremenu  <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	:<C-U>call <SID>SelectAll()<CR>$/;"	m
40.340.120	cache-plug/vim-polyglot/extras/menu.vim	/^  inoremenu 40.340.120 &Tools.&Folding.Vie&w\\ Cursor\\ Line\\ Only<Tab>zMzx  <C-O>zM<C-O>zx$/;"	m
40.340.220	cache-plug/vim-polyglot/extras/menu.vim	/^  vnoremenu 40.340.220 &Tools.&Folding.Create\\ &Fold<Tab>zf	zf$/;"	m
<	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^        nnoremap <silent> <buffer> < :set opfunc=<SID>DecreaseFunc<CR>g@$/;"	m
<	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    vnoremap <silent> <buffer> < :call CobolIndentBlock(-v:count1)<CR>$/;"	m
<<	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    nnoremap <silent> <buffer> << :call CobolIndentBlock(-1)<CR>$/;"	m
<C-A>	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^nnoremap <buffer> <silent> <C-A> :<C-U><C-R>=v:count1<CR>Cycle<CR>$/;"	m
<C-D>	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    inoremap <silent> <buffer> <C-D> <C-R>=<SID>DecreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<C-N>	cache-plug/vim-polyglot/ftplugin/ada.vim	/^      inoremap <unique> <buffer> <C-N> <C-R>=ada#Completion("\\<lt>C-N>")<cr>$/;"	m
<C-P>	cache-plug/vim-polyglot/ftplugin/ada.vim	/^      inoremap <unique> <buffer> <C-P> <C-R>=ada#Completion("\\<lt>C-P>")<cr>$/;"	m
<C-T>	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    inoremap <silent> <buffer> <C-T> <C-R>=<SID>IncreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<C-T>	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^nnoremap <silent><buffer> <C-T> :if len(b:pdf_tagstack) > 0 <Bar> call setpos('.',remove(b:pdf_tagstack, -1)) <Bar> else <Bar> exe "norm! \\<Lt>C-T>" <Bar> endif<CR>$/;"	m
<C-U>	cache-plug/vim-polyglot/plugin/polyglot.vim	/^    inoremap <C-U> <C-G>u<C-U>$/;"	m
<C-W>	cache-plug/vim-polyglot/plugin/polyglot.vim	/^    inoremap <C-W> <C-G>u<C-W>$/;"	m
<C-W><C-D>	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> <C-W><C-D>  :<C-U>exe <SID>jump('split',v:count)<SID>foldopen<CR>$/;"	m
<C-W>d	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> <C-W>d      :<C-U>exe <SID>jump('split',v:count)<SID>foldopen<CR>$/;"	m
<C-X>	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^nnoremap <buffer> <silent> <C-X> :<C-U><C-R>=v:count1<CR>Cycle!<CR>$/;"	m
<C-X><C-]>	cache-plug/vim-polyglot/ftplugin/ada.vim	/^      inoremap <unique> <buffer> <C-X><C-]> <C-R>=<SID>ada#Completion("\\<lt>C-X>\\<lt>C-]>")<cr>$/;"	m
<C-]>	cache-plug/vim-polyglot/ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#Jump_Tag ('', 'tjump')<cr>$/;"	m
<C-]>	cache-plug/vim-polyglot/ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#List_Tag ()<cr>$/;"	m
<C-]>	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^nnoremap <silent><buffer> <C-]> :call <SID>Tag()<CR>$/;"	m
<C-c>	plugin/fzf.vim	/^nmap <C-c> :call fzf#vim#tags(expand('<cword>'))<CR>$/;"	m
<C-c>	plugin/scala.vim	/^nnoremap <silent> <C-c> :<C-u>call QualifiedTagJump()<CR>$/;"	m
<C-e>	init.vim	/^  nmap <C-e> :Explore<CR>$/;"	m
<C-k>	plugin/haskell.vim	/^    nmap <C-k> :call TrimWhiteSpace()<CR>$/;"	m
<C-n>	plugin/buftabline.vim	/^nnoremap <C-n> :bnext<CR>$/;"	m
<C-p>	plugin/fzf.vim	/^nmap <C-p> :GFiles<CR>$/;"	m
<C-r>	plugin/buftabline.vim	/^nnoremap <C-r> :bprev<CR>$/;"	m
<C-s>	plugin/fzf.vim	/^nmap <C-s> :Tags<CR>$/;"	m
<F10>	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F10> :emenu <C-Z>$/;"	m
<F12>	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F12> :g!\/%.*\/normal 0i%<Return>$/;"	m
<F4>	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F4> :w<Return>:se makeprg=lilypond\\ \\"%<\\"<Return>:make<Return>:!timidity "%<.midi"<Return>$/;"	m
<F5>	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F5> :w<Return>:se makeprg=lilypond\\ \\"%<\\"<Return>:make<Return>$/;"	m
<F6>	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F6> :!gv --watch "%<.ps" &<Return>$/;"	m
<F7>	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F7> :cp<Return>$/;"	m
<F8>	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F8> :cn<Return>$/;"	m
<F9>	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <F9> :w<Return>:se makeprg=make\\ -k<Return>:make<Return>$/;"	m
<Leader>fr	cache-plug/vim-polyglot/ftplugin/scala.vim	/^      nnoremap <buffer> <silent> <Leader>fr :FufFile <c-r>=scala#GetRootDirForFuzzyFinder('%:p:h')<cr><cr>$/;"	m
<Leader>fs	cache-plug/vim-polyglot/ftplugin/scala.vim	/^      nnoremap <buffer> <silent> <Leader>fs :FufFile <c-r>=scala#GetMainDirForFuzzyFinder('%:p:h')<cr><cr>$/;"	m
<Leader>ft	cache-plug/vim-polyglot/ftplugin/scala.vim	/^      nnoremap <buffer> <silent> <Leader>ft :FufFile <c-r>=scala#GetTestDirForFuzzyFinder('%:p:h')<cr><cr>$/;"	m
<Leader>p	cache-plug/vim-prettier/plugin/prettier.vim	/^  nmap <unique> <Leader>p <Plug>(Prettier)$/;"	m
<Leader>rf	cache-plug/vim-polyglot/ftplugin/textile.vim	/^noremap <buffer> <Leader>rf :TextileRenderFile<CR>$/;"	m
<Leader>rp	cache-plug/vim-polyglot/ftplugin/textile.vim	/^noremap <buffer> <Leader>rp :TextilePreview<CR>$/;"	m
<Leader>rt	cache-plug/vim-polyglot/ftplugin/textile.vim	/^noremap <buffer> <Leader>rt :TextileRenderTab<CR>$/;"	m
<Leader>ws	plugin/scala.vim	/^nmap <Leader>ws <Plug>(coc-metals-expand-decoration)$/;"	m
<LocalLeader><LocalLeader>	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^noremap <silent><buffer> <LocalLeader><LocalLeader> $/;"	m
<LocalLeader>C	cache-plug/vim-polyglot/ftplugin/lprolog.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>C	cache-plug/vim-polyglot/ftplugin/lprolog.vim	/^    vmap <buffer> <LocalLeader>C <Plug>BUncomOff$/;"	m
<LocalLeader>C	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>S	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  nmap <buffer> <LocalLeader>S <Plug>OCamlSwitchNewWin$/;"	m
<LocalLeader>a	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>a 0:call search(":")<ENTER>b:call IdrisAddClause(0)<ENTER>w$/;"	m
<LocalLeader>b	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>b 0:call IdrisAddClause(0)<ENTER>$/;"	m
<LocalLeader>b	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>b 0:call IdrisAddClause(0)<ENTER>$/;"	m
<LocalLeader>c	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>c :call IdrisCaseSplit()<ENTER>$/;"	m
<LocalLeader>c	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>c :call IdrisCaseSplit()<ENTER>$/;"	m
<LocalLeader>c	cache-plug/vim-polyglot/ftplugin/lprolog.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	cache-plug/vim-polyglot/ftplugin/lprolog.vim	/^    vmap <buffer> <LocalLeader>c <Plug>BUncomOn$/;"	m
<LocalLeader>c	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	cache-plug/vim-polyglot/ftplugin/spec.vim	/^		map <buffer> <LocalLeader>c <Plug>SpecChangelog$/;"	m
<LocalLeader>d	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>d 0:call search(":")<ENTER>b:call IdrisAddClause(0)<ENTER>w$/;"	m
<LocalLeader>d	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>d 0:call search(":")<ENTER>b:call IdrisAddClause(0)<ENTER>w$/;"	m
<LocalLeader>e	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>e :call IdrisEval()<ENTER>$/;"	m
<LocalLeader>e	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>e :call IdrisEval()<ENTER>$/;"	m
<LocalLeader>f	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>f :call IdrisRefine()<ENTER>$/;"	m
<LocalLeader>f	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>f :call IdrisRefine()<ENTER>$/;"	m
<LocalLeader>g	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>g :call IdrisGenerateDef()<ENTER>$/;"	m
<LocalLeader>h	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>h :call IdrisShowDoc()<ENTER>$/;"	m
<LocalLeader>h	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>h :call IdrisShowDoc()<ENTER>$/;"	m
<LocalLeader>i	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>i 0:call IdrisResponseWin()<ENTER>$/;"	m
<LocalLeader>i	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>i 0:call IdrisResponseWin()<ENTER>$/;"	m
<LocalLeader>l	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>l :call IdrisMakeLemma()<ENTER>$/;"	m
<LocalLeader>l	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>l :call IdrisMakeLemma()<ENTER>$/;"	m
<LocalLeader>m	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>m :call IdrisAddMissing()<ENTER>$/;"	m
<LocalLeader>m	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>m :call IdrisAddMissing()<ENTER>$/;"	m
<LocalLeader>mc	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>mc :call IdrisMakeCase()<ENTER>$/;"	m
<LocalLeader>mc	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>mc :call IdrisMakeCase()<ENTER>$/;"	m
<LocalLeader>md	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>md 0:call search(":")<ENTER>b:call IdrisAddClause(1)<ENTER>w$/;"	m
<LocalLeader>md	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>md 0:call search(":")<ENTER>b:call IdrisAddClause(1)<ENTER>w$/;"	m
<LocalLeader>o	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>o :call IdrisProofSearch(0)<ENTER>$/;"	m
<LocalLeader>o	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>o :call IdrisProofSearch(0)<ENTER>$/;"	m
<LocalLeader>p	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>p :call IdrisProofSearch(1)<ENTER>$/;"	m
<LocalLeader>p	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>p :call IdrisProofSearch(1)<ENTER>$/;"	m
<LocalLeader>q	cache-plug/vim-polyglot/ftplugin/mail.vim	/^    nmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>q	cache-plug/vim-polyglot/ftplugin/mail.vim	/^    vmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>r	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>r :call IdrisReload(0)<ENTER>$/;"	m
<LocalLeader>r	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>r :call IdrisReload(0)<ENTER>$/;"	m
<LocalLeader>s	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>s :call IdrisProofSearch(0)<ENTER>$/;"	m
<LocalLeader>s	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  nmap <buffer> <LocalLeader>s <Plug>OCamlSwitchEdit$/;"	m
<LocalLeader>t	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>t :call IdrisShowType()<ENTER>$/;"	m
<LocalLeader>t	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>t :call IdrisShowType()<ENTER>$/;"	m
<LocalLeader>t	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  nmap <buffer> <LocalLeader>t <Plug>OCamlPrintType$/;"	m
<LocalLeader>w	cache-plug/vim-polyglot/ftplugin/idris.vim	/^nnoremap <buffer> <silent> <LocalLeader>w 0:call IdrisMakeWith()<ENTER>$/;"	m
<LocalLeader>w	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^nnoremap <buffer> <silent> <LocalLeader>w 0:call IdrisMakeWith()<ENTER>$/;"	m
<Plug>(-fzf-complete-trigger)	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(GitGutterNextHunk)	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\\<C-U>execute v:count1 . 'GitGutterNextHunk'\\<CR>"$/;"	m
<Plug>(GitGutterPrevHunk)	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\\<C-U>execute v:count1 . 'GitGutterPrevHunk'\\<CR>"$/;"	m
<Plug>(GitGutterPreviewHunk)	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>$/;"	m
<Plug>(GitGutterStageHunk)	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>$/;"	m
<Plug>(GitGutterTextObjectInnerPending)	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>$/;"	m
<Plug>(GitGutterTextObjectOuterPending)	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>$/;"	m
<Plug>(GitGutterUndoHunk)	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>$/;"	m
<Plug>(JuliaDocPrompt)	cache-plug/vim-polyglot/ftplugin/julia.vim	/^nnoremap <silent><buffer> <Plug>(JuliaDocPrompt) :<C-u>call julia#doc#prompt()<CR>$/;"	m
<Plug>(JuliaDocPrompt)	cache-plug/vim-polyglot/ftplugin/juliadoc.vim	/^nnoremap <silent><buffer> <Plug>(JuliaDocPrompt) :<C-u>call julia#doc#prompt()<CR>$/;"	m
<Plug>(Prettier)	cache-plug/vim-prettier/plugin/prettier.vim	/^nnoremap <silent> <Plug>(Prettier) :Prettier<CR>$/;"	m
<Plug>(PrettierAsync)	cache-plug/vim-prettier/plugin/prettier.vim	/^nnoremap <silent> <Plug>(PrettierAsync) :PrettierAsync<CR>$/;"	m
<Plug>(PrettierCli)	cache-plug/vim-prettier/plugin/prettier.vim	/^nnoremap <silent> <Plug>(PrettierCli) :PrettierCli<CR>$/;"	m
<Plug>(PrettierCliPath)	cache-plug/vim-prettier/plugin/prettier.vim	/^nnoremap <silent> <Plug>(PrettierCliPath) :PrettierCliPath<CR>$/;"	m
<Plug>(PrettierCliVersion)	cache-plug/vim-prettier/plugin/prettier.vim	/^nnoremap <silent> <Plug>(PrettierCliVersion) :PrettierCliVersion<CR>$/;"	m
<Plug>(PrettierFragment)	cache-plug/vim-prettier/plugin/prettier.vim	/^nnoremap <silent> <Plug>(PrettierFragment) :PrettierFragment<CR>$/;"	m
<Plug>(PrettierPartial)	cache-plug/vim-prettier/plugin/prettier.vim	/^nnoremap <silent> <Plug>(PrettierPartial) :PrettierPartial<CR>$/;"	m
<Plug>(PrettierVersion)	cache-plug/vim-prettier/plugin/prettier.vim	/^nnoremap <silent> <Plug>(PrettierVersion) :PrettierVersion<CR>$/;"	m
<Plug>(coc-classobj-a)	cache-plug/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-classobj-a)       :<C-U>call coc#rpc#request('selectSymbolRange', [v:false, '', ['Interface', 'Struct', 'Class']])<CR>$/;"	m
<Plug>(coc-classobj-a)	cache-plug/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-classobj-a)       :<C-U>call coc#rpc#request('selectSymbolRange', [v:false, visualmode(), ['Interface', 'Struct', 'Class']])<CR>$/;"	m
<Plug>(coc-classobj-i)	cache-plug/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-classobj-i)       :<C-U>call coc#rpc#request('selectSymbolRange', [v:true, '', ['Interface', 'Struct', 'Class']])<CR>$/;"	m
<Plug>(coc-classobj-i)	cache-plug/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-classobj-i)       :<C-U>call coc#rpc#request('selectSymbolRange', [v:true, visualmode(), ['Interface', 'Struct', 'Class']])<CR>$/;"	m
<Plug>(coc-codeaction)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction)            :<C-u>call       CocActionAsync('codeAction',         '')<CR>$/;"	m
<Plug>(coc-codeaction-line)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-line)       :<C-u>call       CocActionAsync('codeAction',         'n')<CR>$/;"	m
<Plug>(coc-codeaction-selected)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-selected)   :<C-u>set        operatorfunc=<SID>CodeActionFromSelected<CR>g@$/;"	m
<Plug>(coc-codeaction-selected)	cache-plug/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-codeaction-selected)   :<C-u>call       CocActionAsync('codeAction',         visualmode())<CR>$/;"	m
<Plug>(coc-codelens-action)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codelens-action)       :<C-u>call       CocActionAsync('codeLensAction')<CR>$/;"	m
<Plug>(coc-command-repeat)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-command-repeat)        :<C-u>call       CocAction('repeatCommand')<CR>$/;"	m
<Plug>(coc-cursors-operator)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-operator) :<C-u>set operatorfunc=<SID>CursorRangeFromSelected<CR>g@$/;"	m
<Plug>(coc-cursors-position)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-position) :<C-u>call coc#rpc#request('cursorsSelect', [bufnr('%'), 'position', 'n'])<CR>$/;"	m
<Plug>(coc-cursors-range)	cache-plug/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-cursors-range)    :<C-u>call coc#rpc#request('cursorsSelect', [bufnr('%'), 'range', visualmode()])<CR>$/;"	m
<Plug>(coc-cursors-word)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-word)     :<C-u>call coc#rpc#request('cursorsSelect', [bufnr('%'), 'word', 'n'])<CR>$/;"	m
<Plug>(coc-declaration)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-declaration)           :<C-u>call       CocActionAsync('jumpDeclaration')<CR>$/;"	m
<Plug>(coc-definition)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-definition)            :<C-u>call       CocActionAsync('jumpDefinition')<CR>$/;"	m
<Plug>(coc-diagnostic-info)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-info)       :<C-u>call       CocActionAsync('diagnosticInfo')<CR>$/;"	m
<Plug>(coc-diagnostic-next)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-next)       :<C-u>call       CocActionAsync('diagnosticNext')<CR>$/;"	m
<Plug>(coc-diagnostic-next-error)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-next-error) :<C-u>call       CocActionAsync('diagnosticNext',     'error')<CR>$/;"	m
<Plug>(coc-diagnostic-prev)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-prev)       :<C-u>call       CocActionAsync('diagnosticPrevious')<CR>$/;"	m
<Plug>(coc-diagnostic-prev-error)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-prev-error) :<C-u>call       CocActionAsync('diagnosticPrevious', 'error')<CR>$/;"	m
<Plug>(coc-fix-current)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-fix-current)           :<C-u>call       CocActionAsync('doQuickfix')<CR>$/;"	m
<Plug>(coc-float-hide)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-float-hide)            :<C-u>call       coc#float#close_all()<CR>$/;"	m
<Plug>(coc-float-jump)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-float-jump)            :<c-u>call       coc#float#jump()<cr>$/;"	m
<Plug>(coc-format)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-format)                :<C-u>call       CocActionAsync('format')<CR>$/;"	m
<Plug>(coc-format-selected)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-format-selected)       :<C-u>set        operatorfunc=<SID>FormatFromSelected<CR>g@$/;"	m
<Plug>(coc-format-selected)	cache-plug/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-format-selected)       :<C-u>call       CocActionAsync('formatSelected',     visualmode())<CR>$/;"	m
<Plug>(coc-funcobj-a)	cache-plug/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call coc#rpc#request('selectSymbolRange', [v:false, '', ['Method', 'Function']])<CR>$/;"	m
<Plug>(coc-funcobj-a)	cache-plug/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call coc#rpc#request('selectSymbolRange', [v:false, visualmode(), ['Method', 'Function']])<CR>$/;"	m
<Plug>(coc-funcobj-i)	cache-plug/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call coc#rpc#request('selectSymbolRange', [v:true, '', ['Method', 'Function']])<CR>$/;"	m
<Plug>(coc-funcobj-i)	cache-plug/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call coc#rpc#request('selectSymbolRange', [v:true, visualmode(), ['Method', 'Function']])<CR>$/;"	m
<Plug>(coc-implementation)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-implementation)        :<C-u>call       CocActionAsync('jumpImplementation')<CR>$/;"	m
<Plug>(coc-openlink)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-openlink)              :<C-u>call       CocActionAsync('openLink')<CR>$/;"	m
<Plug>(coc-range-select)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-range-select)          :<C-u>call       CocActionAsync('rangeSelect',     '', v:true)<CR>$/;"	m
<Plug>(coc-range-select)	cache-plug/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-range-select)          :<C-u>call       CocActionAsync('rangeSelect',     visualmode(), v:true)<CR>$/;"	m
<Plug>(coc-range-select-backward)	cache-plug/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-range-select-backward) :<C-u>call       CocActionAsync('rangeSelect',     visualmode(), v:false)<CR>$/;"	m
<Plug>(coc-refactor)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-refactor)              :<C-u>call       CocActionAsync('refactor')<CR>$/;"	m
<Plug>(coc-references)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-references)            :<C-u>call       CocActionAsync('jumpReferences')<CR>$/;"	m
<Plug>(coc-references-used)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-references-used)       :<C-u>call       CocActionAsync('jumpUsed')<CR>$/;"	m
<Plug>(coc-rename)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-rename)                :<C-u>call       CocActionAsync('rename')<CR>$/;"	m
<Plug>(coc-type-definition)	cache-plug/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-type-definition)       :<C-u>call       CocActionAsync('jumpTypeDefinition')<CR>$/;"	m
<Plug>(crystal-format)	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-format)             :<C-u>CrystalFormat<CR>$/;"	m
<Plug>(crystal-jump-to-definition)	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-jump-to-definition) :<C-u>CrystalDef<CR>$/;"	m
<Plug>(crystal-show-context)	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-show-context)       :<C-u>CrystalContext<CR>$/;"	m
<Plug>(crystal-spec-run-all)	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-spec-run-all)       :<C-u>CrystalSpecRunAll<CR>$/;"	m
<Plug>(crystal-spec-run-current)	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-spec-run-current)   :<C-u>CrystalSpecRunCurrent<CR>$/;"	m
<Plug>(crystal-spec-switch)	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^nnoremap <buffer><Plug>(crystal-spec-switch)        :<C-u>CrystalSpecSwitch<CR>$/;"	m
<Plug>(llvm-goto-definition)	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-goto-definition) :<C-u>call <SID>goto_definition()<CR>$/;"	m
<Plug>(llvm-move-block-next)	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-move-block-next) :<C-u>call <SID>move_to_following_block()<CR>$/;"	m
<Plug>(llvm-move-block-prev)	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-move-block-prev) :<C-u>call <SID>move_to_pred_block()<CR>$/;"	m
<Plug>(llvm-next-section-begin)	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-next-section-begin) :<C-u>call <SID>next_section(1)<CR>$/;"	m
<Plug>(llvm-next-section-end)	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-next-section-end) :<C-u>call <SID>next_section(0)<CR>$/;"	m
<Plug>(llvm-prev-section-begin)	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-prev-section-begin) :<C-u>call <SID>prev_section(1)<CR>$/;"	m
<Plug>(llvm-prev-section-end)	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^nnoremap <buffer><Plug>(llvm-prev-section-end) :<C-u>call <SID>prev_section(0)<CR>$/;"	m
<Plug><cfile>	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><cfile> substitute(RubyCursorFile(),'^$',"\\022\\006",'')$/;"	m
<Plug><ctag>	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><ctag> substitute(RubyCursorTag(),'^$',"\\022\\027",'')$/;"	m
<Plug>BUncomOff	cache-plug/vim-polyglot/ftplugin/lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOff <ESC>:'<,'><CR>`<dd`>dd`<$/;"	m
<Plug>BUncomOn	cache-plug/vim-polyglot/ftplugin/lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOn <ESC>:'<,'><CR>`<O<ESC>0i\/*<ESC>`>o<ESC>0i*\/<ESC>`<$/;"	m
<Plug>CocRefresh	cache-plug/coc.nvim/plugin/coc.vim	/^inoremap <silent>                          <Plug>CocRefresh <C-r>=coc#_complete()<CR>$/;"	m
<Plug>Comment	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>Comment          :call <SID>Comment('c')<CR>$/;"	m
<Plug>DeComment	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>DeComment        :call <SID>Comment('u')<CR>$/;"	m
<Plug>GitGutterNextHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\\<C-U>call gitgutter#utility#warn('please change your map \\<lt>Plug>GitGutterNextHunk to \\<lt>Plug>(GitGutterNextHunk)')\\<CR>"$/;"	m
<Plug>GitGutterPrevHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\\<C-U>call gitgutter#utility#warn('please change your map \\<lt>Plug>GitGutterPrevHunk to \\<lt>Plug>(GitGutterPrevHunk)')\\<CR>"$/;"	m
<Plug>GitGutterPreviewHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>$/;"	m
<Plug>GitGutterStageHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>$/;"	m
<Plug>GitGutterUndoHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>$/;"	m
<Plug>LUncomOff	cache-plug/vim-polyglot/ftplugin/lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOff <ESC>:s\/^\\\/\\* \\(.*\\) \\*\\\/\/\\1\/<CR>$/;"	m
<Plug>LUncomOff	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOff :s\/^(\\* \\(.*\\) \\*)\/\\1\/<CR>:noh<CR>$/;"	m
<Plug>LUncomOn	cache-plug/vim-polyglot/ftplugin/lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOn mz0i\/* <ESC>$A *\/<ESC>`z$/;"	m
<Plug>LUncomOn	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOn gI(* <End> *)<ESC>$/;"	m
<Plug>MailQuote	cache-plug/vim-polyglot/ftplugin/mail.vim	/^  nnoremap <buffer> <Plug>MailQuote :.,$s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>MailQuote	cache-plug/vim-polyglot/ftplugin/mail.vim	/^  vnoremap <buffer> <Plug>MailQuote :s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>Markdown_EditUrlUnderCursor	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^nnoremap <Plug>Markdown_EditUrlUnderCursor :call <sid>EditUrlUnderCursor()<cr>$/;"	m
<Plug>Markdown_OpenUrlUnderCursor	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^nnoremap <Plug>Markdown_OpenUrlUnderCursor :call <sid>OpenUrlUnderCursor()<cr>$/;"	m
<Plug>OCamlPrintType	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <silent> <Plug>OCamlPrintType :<C-U>call Ocaml_print_type("normal")<CR>$/;"	m
<Plug>OCamlSwitchEdit	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <Plug>OCamlSwitchEdit :<C-u>call OCaml_switch(0)<CR>$/;"	m
<Plug>OCamlSwitchNewWin	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  nnoremap <Plug>OCamlSwitchNewWin :<C-u>call OCaml_switch(1)<CR>$/;"	m
<Plug>RacketDoc	cache-plug/vim-polyglot/ftplugin/racket.vim	/^nnoremap <buffer> <Plug>RacketDoc :silent !raco docs <cword><cr>:redraw!<cr>$/;"	m
<Plug>RacketDoc	cache-plug/vim-polyglot/ftplugin/racket.vim	/^vnoremap <buffer> <Plug>RacketDoc :call <SID>Racket_visual_doc()<cr>$/;"	m
<Plug>SpecChangelog	cache-plug/vim-polyglot/ftplugin/spec.vim	/^       noremap <buffer> <unique> <script> <Plug>SpecChangelog :call <SID>SpecChangelog("")<CR>$/;"	m
<Plug>Traditional	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>Traditional      :call <SID>Comment('t')<CR>$/;"	m
<Plug>VisualComment	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualComment     :'<,'>call <SID>Comment('c')<CR>$/;"	m
<Plug>VisualDeComment	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualDeComment   :'<,'>call <SID>Comment('u')<CR>$/;"	m
<Plug>VisualTraditional	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualTraditional :'<,'>call <SID>Comment('t')<CR>$/;"	m
<S-F12>	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^map <buffer> <S-F12> :g\/%.*\/normal 0x<Return>$/;"	m
<S-TAB>	plugin/coc.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<S-TAB>	plugin/scala.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<SID>:	cache-plug/vim-fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>:	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>:  :<C-U>$/;"	m
<SID>c:	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>c: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>foldopen	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^  cnoremap <SID>foldopen <Bar>if &foldopen =~# 'tag'<Bar>exe 'norm! zv'<Bar>endif$/;"	m
<SID>tagzv	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  cmap <buffer><script><expr> <SID>tagzv &foldopen =~# 'tag' ? '<Bar>norm! zv' : ''$/;"	m
<TAB>	plugin/coc.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<TAB>	plugin/coc.vim	/^nmap <silent> <TAB> <Plug>(coc-range-select)$/;"	m
<TAB>	plugin/scala.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<Tab>	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^        inoremap <silent> <buffer> <Tab> <C-R>=<SID>Tab()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<bs>	cache-plug/vim-polyglot/ftplugin/ada.vim	/^      inoremap <silent> <unique> <buffer> <bs> <C-R>=ada#Insert_Backspace ()<cr>$/;"	m
<c-space>	plugin/coc.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<c-space>	plugin/scala.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	plugin/coc.vim	/^  imap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	plugin/coc.vim	/^  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	plugin/scala.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	plugin/scala.vim	/^inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()$/;"	m
<leader>a	plugin/coc.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	plugin/scala.vim	/^nmap <leader>a  <Plug>(coc-codeaction-line)$/;"	m
<leader>ac	plugin/coc.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>cl	plugin/scala.vim	/^nnoremap <leader>cl :<C-u>call CocActionAsync('codeLensAction')<CR>$/;"	m
<leader>f	plugin/coc.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>qf	plugin/coc.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>qf	plugin/scala.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	plugin/coc.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>rn	plugin/scala.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>y	plugin/scala.vim	/^nmap <leader>y  <Plug>(coc-format-selected)$/;"	m
<localleader>R	cache-plug/vim-polyglot/ftplugin/smt2.vim	/^nnoremap <silent> <buffer> <localleader>R :call smt2#RunSolverAndShowResult()<cr>$/;"	m
<localleader>r	cache-plug/vim-polyglot/ftplugin/smt2.vim	/^nnoremap <silent> <buffer> <localleader>r :call smt2#RunSolver()<cr>$/;"	m
<localleader>v	cache-plug/vim-polyglot/ftplugin/smt2.vim	/^nnoremap <silent> <buffer> <localleader>v :call smt2#PrintSolverVersion()<cr>$/;"	m
<plug>(-fzf-/)	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	cache-plug/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	cache-plug/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -type f -print -o -type l -print \\| sed 's:^..::'")$/;"	m
<plug>(fzf-complete-file)	cache-plug/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	cache-plug/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	cache-plug/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	cache-plug/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -print \\| sed '1d;s:^..::'")$/;"	m
<plug>(fzf-complete-path)	cache-plug/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	cache-plug/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	cache-plug/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	cache-plug/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	cache-plug/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<space>a	plugin/coc.vim	/^nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>a	plugin/scala.vim	/^nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	plugin/coc.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>c	plugin/scala.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	plugin/coc.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>e	plugin/scala.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>j	plugin/coc.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>j	plugin/scala.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	plugin/coc.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>k	plugin/scala.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	plugin/coc.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>o	plugin/scala.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	plugin/coc.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>p	plugin/scala.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>s	plugin/coc.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
<space>s	plugin/scala.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
<space>t	plugin/scala.vim	/^nnoremap <silent> <space>t :<C-u>CocCommand metals.tvp<CR>$/;"	m
<space>tb	plugin/scala.vim	/^nnoremap <silent> <space>tb :<C-u>CocCommand metals.tvp metalsBuild<CR>$/;"	m
<space>tc	plugin/scala.vim	/^nnoremap <silent> <space>tc :<C-u>CocCommand metals.tvp metalsCompile<CR>$/;"	m
<space>tf	plugin/scala.vim	/^nnoremap <silent> <space>tf :<C-u>CocCommand metals.revealInTreeView metalsPackages<CR>$/;"	m
<space>tp	plugin/scala.vim	/^nnoremap <silent> <space>tp :<C-u>CocCommand metals.tvp metalsPackages<CR>$/;"	m
=	cache-plug/vim-polyglot/compiler/cryptol.vim	/^   command = -nargs =* CompilerSet setlocal <args>$/;"	c
=	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^  inoremap <buffer> <silent> = =<Esc>:call terraform#align()<CR>a$/;"	m
=>	cache-plug/vim-polyglot/after/ftplugin/puppet.vim	/^    inoremap <buffer> <silent> => =><Esc>:call puppet#align#AlignHashrockets()<CR>$a$/;"	m
>	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^        nnoremap <silent> <buffer> > :set opfunc=<SID>IncreaseFunc<CR>g@$/;"	m
>	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    vnoremap <silent> <buffer> > :call CobolIndentBlock(v:count1)<CR>$/;"	m
>>	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    nnoremap <silent> <buffer> >> :call CobolIndentBlock(1)<CR>$/;"	m
Abaqus_ToggleComment	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^function! <SID>Abaqus_ToggleComment() range$/;"	f
Accents	cache-plug/vim-polyglot/syntax/tex.vim	/^   fun! s:Accents(chr,...)$/;"	f
AccessModifier	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:AccessModifier(cline_info) abort$/;"	f
Add	cache-plug/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f
Add	cache-plug/vim-polyglot/syntax/cucumber.vim	/^function! s:Add(name)$/;"	f
AddAnsiGroups	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:AddAnsiGroups() abort$/;"	f
AddBlockTag	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
AddBlockTag	cache-plug/vim-polyglot/indent/html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
AddEntry	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function AddEntry()$/;"	f
AddHeader	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:AddHeader(key, value) abort$/;"	f
AddITags	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
AddITags	cache-plug/vim-polyglot/indent/html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
AddIndentByInd	cache-plug/vim-polyglot/indent/autohotkey.vim	/^function! AddIndentByInd(indent)$/;"	f
AddSection	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:AddSection(label, lines, ...) abort$/;"	f
AfterAccessModifier	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:AfterAccessModifier(pline_info) abort$/;"	f
AfterBlockOpening	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:AfterBlockOpening(pline_info) abort$/;"	f
AfterEndKeyword	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:AfterEndKeyword(pline_info) abort$/;"	f
AfterHangingSplat	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:AfterHangingSplat(pline_info) abort$/;"	f
AfterIndentKeyword	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:AfterIndentKeyword(pline_info) abort$/;"	f
AfterLeadingOperator	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:AfterLeadingOperator(pline_info) abort$/;"	f
AfterUnbalancedBracket	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:AfterUnbalancedBracket(pline_info) abort$/;"	f
Algo	cache-plug/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int)$/;"	t
Aliases	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Aliases(dir) abort$/;"	f
Alien2	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:Alien2()$/;"	f
Alien2	cache-plug/vim-polyglot/indent/html.vim	/^func! s:Alien2()$/;"	f
Alien3	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:Alien3()$/;"	f
Alien3	cache-plug/vim-polyglot/indent/html.vim	/^func! s:Alien3()$/;"	f
Alien4	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:Alien4()$/;"	f
Alien4	cache-plug/vim-polyglot/indent/html.vim	/^func! s:Alien4()$/;"	f
Alien5	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:Alien5()$/;"	f
Alien5	cache-plug/vim-polyglot/indent/html.vim	/^func! s:Alien5()$/;"	f
Alien6	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:Alien6()$/;"	f
Alien6	cache-plug/vim-polyglot/indent/html.vim	/^func! s:Alien6()$/;"	f
Align	cache-plug/vim-gitgutter/test/runner.vim	/^function Align(left, right)$/;"	f
Alt0	cache-plug/fzf/src/tui/tui.go	/^	Alt0$/;"	c
AltA	cache-plug/fzf/src/tui/tui.go	/^	AltA = Alt0 + 'a' - '0' + iota$/;"	c
AltB	cache-plug/fzf/src/tui/tui.go	/^	AltB$/;"	c
AltBS	cache-plug/fzf/src/tui/tui.go	/^	AltBS$/;"	c
AltC	cache-plug/fzf/src/tui/tui.go	/^	AltC$/;"	c
AltD	cache-plug/fzf/src/tui/tui.go	/^	AltD$/;"	c
AltDown	cache-plug/fzf/src/tui/tui.go	/^	AltDown$/;"	c
AltE	cache-plug/fzf/src/tui/tui.go	/^	AltE$/;"	c
AltF	cache-plug/fzf/src/tui/tui.go	/^	AltF$/;"	c
AltLeft	cache-plug/fzf/src/tui/tui.go	/^	AltLeft$/;"	c
AltRight	cache-plug/fzf/src/tui/tui.go	/^	AltRight$/;"	c
AltSDown	cache-plug/fzf/src/tui/tui.go	/^	AltSDown$/;"	c
AltSLeft	cache-plug/fzf/src/tui/tui.go	/^	AltSLeft$/;"	c
AltSRight	cache-plug/fzf/src/tui/tui.go	/^	AltSRight$/;"	c
AltSUp	cache-plug/fzf/src/tui/tui.go	/^	AltSUp$/;"	c
AltSlash	cache-plug/fzf/src/tui/tui.go	/^	AltSlash$/;"	c
AltSpace	cache-plug/fzf/src/tui/tui.go	/^	AltSpace$/;"	c
AltUp	cache-plug/fzf/src/tui/tui.go	/^	AltUp$/;"	c
AltZ	cache-plug/fzf/src/tui/tui.go	/^	AltZ     = AltA + 'z' - 'a'$/;"	c
AlternatePair	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:AlternatePair()$/;"	f
AntSyntaxScript	cache-plug/vim-polyglot/syntax/ant.vim	/^    fun AntSyntaxScript(tagname, synfilename)$/;"	f
AsString	cache-plug/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f
AsString	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f
AsUint16	cache-plug/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f
AskPassArgs	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
AsyncRequest	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:AsyncRequest(name, args) abort$/;"	f
AtomicBool	cache-plug/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	t
Attr	cache-plug/fzf/src/tui/dummy.go	/^type Attr int32$/;"	t
Attr	cache-plug/fzf/src/tui/tcell.go	/^type Attr tcell.Style$/;"	t
Attr	cache-plug/fzf/src/tui/tui.go	/^func (p ColorPair) Attr() Attr {$/;"	f
AttrClear	cache-plug/fzf/src/tui/dummy.go	/^	AttrClear     = Attr(1 << 8)$/;"	c
AttrClear	cache-plug/fzf/src/tui/tcell.go	/^	AttrClear     = Attr(1 << 8)$/;"	c
AttrRegular	cache-plug/fzf/src/tui/dummy.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c
AttrRegular	cache-plug/fzf/src/tui/tcell.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c
AttrUndefined	cache-plug/fzf/src/tui/dummy.go	/^	AttrUndefined = Attr(0)$/;"	c
AttrUndefined	cache-plug/fzf/src/tui/tcell.go	/^	AttrUndefined = Attr(0)$/;"	c
AutoClose	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:AutoClose() "{{{$/;"	f
AutoHighlightToggle	plugin/autohighlight.vim	/^function! AutoHighlightToggle()$/;"	f
Autocmd	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:Autocmd(...) abort$/;"	f
BINARY	cache-plug/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	cache-plug/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	cache-plug/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	cache-plug/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY	cache-plug/fzf/Makefile	/^	BINARY := $(BINARYARM8)$/;"	m
BINARY	cache-plug/fzf/Makefile	/^	BINARY := $(BINARYPPC64LE)$/;"	m
BINARY64	cache-plug/fzf/Makefile	/^BINARY64       := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	cache-plug/fzf/Makefile	/^BINARYARM5     := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	cache-plug/fzf/Makefile	/^BINARYARM6     := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	cache-plug/fzf/Makefile	/^BINARYARM7     := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	cache-plug/fzf/Makefile	/^BINARYARM8     := fzf-$(GOOS)_arm8$/;"	m
BINARYPPC64LE	cache-plug/fzf/Makefile	/^BINARYPPC64LE  := fzf-$(GOOS)_ppc64le$/;"	m
BMAdd	cache-plug/vim-polyglot/extras/menu.vim	/^func s:BMAdd()$/;"	f
BMCanAdd	cache-plug/vim-polyglot/extras/menu.vim	/^func s:BMCanAdd(name, num)$/;"	f
BMFilename	cache-plug/vim-polyglot/extras/menu.vim	/^func s:BMFilename(name, num)$/;"	f
BMHash	cache-plug/vim-polyglot/extras/menu.vim	/^func s:BMHash(name)$/;"	f
BMHash2	cache-plug/vim-polyglot/extras/menu.vim	/^func s:BMHash2(name)$/;"	f
BMMunge	cache-plug/vim-polyglot/extras/menu.vim	/^func s:BMMunge(fname, bnum)$/;"	f
BMRemove	cache-plug/vim-polyglot/extras/menu.vim	/^func s:BMRemove()$/;"	f
BMShow	cache-plug/vim-polyglot/extras/menu.vim	/^func s:BMShow(...)$/;"	f
BMTruncName	cache-plug/vim-polyglot/extras/menu.vim	/^func s:BMTruncName(fname)$/;"	f
BOnly	cache-plug/vim-bufonly/plugin/bufonly.vim	/^command! -nargs=? -complete=buffer -bang BOnly$/;"	c
BSpace	cache-plug/fzf/src/tui/tui.go	/^	BSpace$/;"	c
BTab	cache-plug/fzf/src/tui/tui.go	/^	BTab$/;"	c
BUILD_FLAGS	cache-plug/fzf/Makefile	/^BUILD_FLAGS    := -a -ldflags "-s -w -X main.version=$(VERSION) -X main.revision=$(REVISION)" -tags "$(TAGS)"$/;"	m
BUILD_INVERTED_INDEX	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
BackwardEOF	cache-plug/fzf/src/tui/tui.go	/^	BackwardEOF$/;"	c
Balanced	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
BeginElementFound	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:BeginElementFound(stack, token, curr_vcol, stored_vcol, end_token, sw)$/;"	f
BeginElementFoundIfEmpty	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:BeginElementFoundIfEmpty(stack, token, curr_vcol, stored_vcol, sw)$/;"	f
BeginningOfClauseFound	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:BeginningOfClauseFound(stack, token, stored_vcol, lnum, i)$/;"	f
Bg	cache-plug/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f
BlameBufnr	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
BlameCommit	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
BlameCommitFileLnum	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
BlameFileType	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameFileType() abort$/;"	f
BlameJump	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
BlameLeave	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
BlameQuit	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
BlameRehighlight	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
BlameSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort$/;"	f
Blink	cache-plug/fzf/src/tui/dummy.go	/^	Blink     = Attr(1 << 4)$/;"	c
Blink	cache-plug/fzf/src/tui/tcell.go	/^	Blink          = Attr(tcell.AttrBlink)$/;"	c
Blink2	cache-plug/fzf/src/tui/dummy.go	/^	Blink2    = Attr(1 << 5)$/;"	c
BlobTemp	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
BlockComment	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:BlockComment(cline_info) abort$/;"	f
Block_pattern	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Block_pattern(lin1,lin2,col1,col2)$/;"	f
BlurStatus	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
Bold	cache-plug/fzf/src/tui/dummy.go	/^	Bold      = Attr(1)$/;"	c
Bold	cache-plug/fzf/src/tui/tcell.go	/^	Bold      Attr = Attr(tcell.AttrBold)$/;"	c
Bonly	cache-plug/vim-bufonly/plugin/bufonly.vim	/^command! -nargs=? -complete=buffer -bang Bonly$/;"	c
BorderBottom	cache-plug/fzf/src/tui/tui.go	/^	BorderBottom$/;"	c
BorderCharacter	cache-plug/fzf/src/tui/tui.go	/^type BorderCharacter int$/;"	t
BorderHorizontal	cache-plug/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c
BorderLeft	cache-plug/fzf/src/tui/tui.go	/^	BorderLeft$/;"	c
BorderNone	cache-plug/fzf/src/tui/tui.go	/^	BorderNone BorderShape = iota$/;"	c
BorderRight	cache-plug/fzf/src/tui/tui.go	/^	BorderRight$/;"	c
BorderRounded	cache-plug/fzf/src/tui/tui.go	/^	BorderRounded$/;"	c
BorderShape	cache-plug/fzf/src/tui/tui.go	/^type BorderShape int$/;"	t
BorderSharp	cache-plug/fzf/src/tui/tui.go	/^	BorderSharp$/;"	c
BorderStyle	cache-plug/fzf/src/tui/tui.go	/^type BorderStyle struct {$/;"	t
BorderTop	cache-plug/fzf/src/tui/tui.go	/^	BorderTop$/;"	c
BorderVertical	cache-plug/fzf/src/tui/tui.go	/^	BorderVertical$/;"	c
BufName	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
BufOnly	cache-plug/vim-bufonly/plugin/bufonly.vim	/^command! -nargs=? -complete=buffer -bang BufOnly$/;"	c
BufOnly	cache-plug/vim-bufonly/plugin/bufonly.vim	/^function! BufOnly(buffer, bang)$/;"	f
BufTabLine	cache-plug/vim-buftabline/plugin/buftabline.vim	/^augroup BufTabLine$/;"	a
Bufonly	cache-plug/vim-bufonly/plugin/bufonly.vim	/^command! -nargs=? -complete=buffer -bang Bufonly$/;"	c
BuildEnvPrefix	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildEnvPrefix(env) abort$/;"	f
BuildPattern	cache-plug/fzf/src/pattern.go	/^func BuildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool, forward bool,$/;"	f
BuildShell	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, args) abort$/;"	f
BuildStructures	cache-plug/vim-polyglot/indent/twig.vim	/^fun! s:BuildStructures()$/;"	f
Builtin	cache-plug/vim-polyglot/syntax/8th.vim	/^com! -nargs=+ Builtin syn keyword eighthBuiltin <args>$/;"	c
Builtin	cache-plug/vim-polyglot/syntax/reva.vim	/^com! -nargs=+ Builtin syn keyword revaBuiltin <args>$/;"	c
ByOrder	cache-plug/fzf/src/result.go	/^type ByOrder []Offset$/;"	t
ByRelevance	cache-plug/fzf/src/result.go	/^type ByRelevance []Result$/;"	t
ByRelevanceTac	cache-plug/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t
Bytes	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f
BzlFoldText	cache-plug/vim-polyglot/ftplugin/bzl.vim	/^function BzlFoldText() abort$/;"	f
C	plugin/bepo.vim	/^noremap C H$/;"	m
CCode	cache-plug/vim-polyglot/ftplugin/vala.vim	/^command! -buffer -bar CCode call CCode()$/;"	c
CCode	cache-plug/vim-polyglot/ftplugin/vala.vim	/^function! CCode() abort$/;"	f
CFill	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f
CFill	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f
CMakeGetIndent	cache-plug/vim-polyglot/indent/cmake.vim	/^fun! CMakeGetIndent(lnum)$/;"	f
CPrint	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, text string) {$/;"	f
CPrint	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, text string) {$/;"	f
CSCOPE_ARGS	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CSSIndent	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:CSSIndent()$/;"	f
CSSIndent	cache-plug/vim-polyglot/indent/html.vim	/^func! s:CSSIndent()$/;"	f
CSVCol	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSVCol(...) "{{{3$/;"	f
CSVCount	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSVCount(col, fmt, first, last, ...) "{{{3$/;"	f
CSVField	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSVField(x, y, ...) "{{{3$/;"	f
CSVMax	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSVMax(col, fmt, first, last) "{{{3$/;"	f
CSVMin	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSVMin(col, fmt, first, last) "{{{3$/;"	f
CSVPat	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSVPat(colnr, ...) "{{{3$/;"	f
CSVSum	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSVSum(col, fmt, first, last) "{{{3$/;"	f
CSVWidth	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSVWidth(...) "{{{3$/;"	f
CSV_CloseBuffer	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSV_CloseBuffer(buffer) "{{{3$/;"	f
CSV_SetSplitOptions	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSV_SetSplitOptions(window) "{{{3$/;"	f
CSV_WCol	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! CSV_WCol(...) "{{{3$/;"	f
CTAGS_ARGS	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CacheKey	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f
CacheRstFold	cache-plug/vim-polyglot/autoload/RstFold.vim	/^function s:CacheRstFold()$/;"	f
CalcVCol	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:CalcVCol(line, first_index, last_index, vcol, tabstop)$/;"	f
Call	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! s:Call(method, args)$/;"	f
CallBaseIndent	cache-plug/vim-polyglot/indent/twig.vim	/^function! s:CallBaseIndent()$/;"	f
Case	cache-plug/fzf/src/options.go	/^type Case int$/;"	t
CaseIgnore	cache-plug/fzf/src/options.go	/^	CaseIgnore$/;"	c
CaseRespect	cache-plug/fzf/src/options.go	/^	CaseRespect$/;"	c
CaseSmart	cache-plug/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c
CdlAsignment	cache-plug/vim-polyglot/indent/cdl.vim	/^fun! CdlAsignment(lnum, line)$/;"	f
CdlGetIndent	cache-plug/vim-polyglot/indent/cdl.vim	/^fun! CdlGetIndent(lnum)$/;"	f
CeilingDirectories	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! s:CeilingDirectories() abort$/;"	f
Change	cache-plug/fzf/src/tui/tui.go	/^	Change$/;"	c
ChannelSet	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! s:ChannelSet(dict, key, val)$/;"	f
CharAtCursor	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:CharAtCursor(...)$/;"	f
Chars	cache-plug/fzf/src/util/chars.go	/^type Chars struct {$/;"	t
CheckBlockTag	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
CheckBlockTag	cache-plug/vim-polyglot/indent/html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
CheckCustomTag	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
CheckCustomTag	cache-plug/vim-polyglot/indent/html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
CheckForFunctions	cache-plug/vim-polyglot/syntax/octave.vim	/^function! s:CheckForFunctions()$/;"	f
CheckItems	cache-plug/vim-polyglot/tests/native.vim	/^func CheckItems(checks)$/;"	f
CheckPairedIsLastCharacter	cache-plug/vim-polyglot/indent/tex.vim	/^function! s:CheckPairedIsLastCharacter(lnum, col) "{{{$/;"	f
CheckSaneSearchPattern	cache-plug/vim-polyglot/syntax/csv.vim	/^fu! <sid>CheckSaneSearchPattern() "{{{3$/;"	f
CheckTag	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:CheckTag(itag)$/;"	f
CheckTag	cache-plug/vim-polyglot/indent/html.vim	/^func! s:CheckTag(itag)$/;"	f
CheckToIgnoreRightParen	cache-plug/vim-polyglot/indent/pgsql.vim	/^function! s:CheckToIgnoreRightParen( prev_lnum, num_levels )$/;"	f
ChompDefault	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
ChompError	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompError(...) abort$/;"	f
Chunk	cache-plug/fzf/src/chunklist.go	/^type Chunk struct {$/;"	t
ChunkCache	cache-plug/fzf/src/cache.go	/^type ChunkCache struct {$/;"	t
ChunkList	cache-plug/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	t
CleanUp	cache-plug/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
Clear	cache-plug/fzf/src/chunklist.go	/^func (cl *ChunkList) Clear() {$/;"	f
Clear	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()            {}$/;"	f
Clear	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f
Clear	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f
Clear	cache-plug/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f
ClearTokenCacheIfNeeded	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:ClearTokenCacheIfNeeded()$/;"	f
Close	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()            {}$/;"	f
Close	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f
Close	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Close() {$/;"	f
Close	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f
Close	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Close() {$/;"	f
CloseBug	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function CloseBug()$/;"	f
ClosingBracketOnEmptyLine	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
ClosingHeredocDelimiter	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:ClosingHeredocDelimiter(cline_info) abort$/;"	f
CobolIndentBlock	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! CobolIndentBlock(shift)$/;"	f
CocAction	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocAction :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, <f-args>])$/;"	c
CocAction	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocAction(name, ...) abort$/;"	f
CocActionAsync	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocActionAsync(name, ...) abort$/;"	f
CocCommand	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,s:CommandList -range CocCommand :call coc#rpc#notify('runCommand', [<f-args>])$/;"	c
CocConfig	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocConfig       :call s:OpenConfig()$/;"	c
CocDiagnostics	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=? CocDiagnostics  :call s:OpenDiagnostics(<f-args>)$/;"	c
CocDisable	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocDisable      :call s:Disable()$/;"	c
CocEnable	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocEnable       :call s:Enable(0)$/;"	c
CocFirst	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocFirst        :call coc#rpc#notify('listFirst', [<f-args>])$/;"	c
CocFix	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocFix    :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, 'quickfix'])$/;"	c
CocHasProvider	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocHasProvider(name) abort$/;"	f
CocInfo	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocInfo         :call s:ShowInfo()$/;"	c
CocInstall	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=* -bar -complete=custom,s:InstallOptions CocInstall   :call coc#util#install_extension([<f-args>])$/;"	c
CocLast	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocLast         :call coc#rpc#notify('listLast', [<f-args>])$/;"	c
CocList	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,coc#list#options CocList      :call coc#rpc#notify('openList',  [<f-args>])$/;"	c
CocListCancel	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 -complete=custom,coc#list#names CocListCancel   :call coc#rpc#notify('listCancel', [])$/;"	c
CocListResume	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocListResume   :call coc#rpc#notify('listResume', [<f-args>])$/;"	c
CocLocalConfig	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocLocalConfig  :call coc#rpc#notify('openLocalConfig', [])$/;"	c
CocLocations	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocLocations(id, method, ...) abort$/;"	f
CocLocationsAsync	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocLocationsAsync(id, method, ...) abort$/;"	f
CocNext	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocNext         :call coc#rpc#notify('listNext', [<f-args>])$/;"	c
CocNotify	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocNotify(...) abort$/;"	f
CocOpenLog	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocOpenLog      :call coc#rpc#notify('openLog',  [])$/;"	c
CocPopupCallback	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocPopupCallback(bufnr, arglist) abort$/;"	f
CocPrev	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocPrev         :call coc#rpc#notify('listPrev', [<f-args>])$/;"	c
CocRebuild	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRebuild      :call coc#util#rebuild()$/;"	c
CocRegistNotification	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocRegistNotification(id, method, cb) abort$/;"	f
CocRequest	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocRequest(...) abort$/;"	f
CocRequestAsync	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocRequestAsync(...)$/;"	f
CocRestart	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRestart      :call coc#rpc#restart()$/;"	c
CocSearch	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:SearchOptions  CocSearch    :call coc#rpc#notify('search', [<f-args>])$/;"	c
CocStart	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocStart        :call coc#rpc#start_server()$/;"	c
CocTagFunc	cache-plug/coc.nvim/plugin/coc.vim	/^function! CocTagFunc(pattern, flags, info) abort$/;"	f
CocUninstall	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:ExtensionList  CocUninstall :call CocActionAsync('uninstallExtension', <f-args>)$/;"	c
CocUpdate	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocUpdate       :call coc#util#update_extensions(1)$/;"	c
CocUpdateSync	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=0 -bar CocUpdateSync   :call coc#util#update_extensions()$/;"	c
CocWatch	cache-plug/coc.nvim/plugin/coc.vim	/^command! -nargs=1 -complete=custom,s:LoadedExtensions  CocWatch    :call coc#rpc#notify('watchExtension', [<f-args>])$/;"	c
CodeActionFromSelected	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:CodeActionFromSelected(type)$/;"	f
CoffeeBufNew	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^augroup CoffeeBufNew | augroup END$/;"	a
CoffeeBufUpdate	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^augroup CoffeeBufUpdate | augroup END$/;"	a
CoffeeCompile	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^\\        CoffeeCompile call s:CoffeeCompile(<line1>, <line2>, <q-args>)$/;"	c
CoffeeCompile	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompile(startline, endline, args)$/;"	f
CoffeeCompileClose	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompileClose()$/;"	f
CoffeeCompileResetVars	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompileResetVars()$/;"	f
CoffeeCompileToBuf	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeCompileToBuf(buf, startline, endline)$/;"	f
CoffeeComplete	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeComplete(cmd, cmdline, cursor)$/;"	f
CoffeeLint	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^command! -buffer -range=% -bang -bar -nargs=* CoffeeLint$/;"	c
CoffeeLint	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeLint(startline, endline, bang, args)$/;"	f
CoffeeMake	cache-plug/vim-polyglot/compiler/coffee.vim	/^command! -bang -bar -nargs=* CoffeeMake$/;"	c
CoffeeMakeDeprecated	cache-plug/vim-polyglot/compiler/coffee.vim	/^function! s:CoffeeMakeDeprecated(bang, args)$/;"	f
CoffeeRun	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^command! -buffer -range=% -bar -nargs=* CoffeeRun$/;"	c
CoffeeRun	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeRun(startline, endline, args)$/;"	f
CoffeeRunClose	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeRunClose()$/;"	f
CoffeeRunResetVars	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeRunResetVars()$/;"	f
CoffeeUpdateMakePrg	cache-plug/vim-polyglot/compiler/coffee.vim	/^augroup CoffeeUpdateMakePrg$/;"	a
CoffeeWatch	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^\\        CoffeeWatch call s:CoffeeWatch(<q-args>)$/;"	c
CoffeeWatch	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatch(args)$/;"	f
CoffeeWatchClose	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatchClose()$/;"	f
CoffeeWatchResetVars	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatchResetVars()$/;"	f
CoffeeWatchUpdate	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:CoffeeWatchUpdate()$/;"	f
ColBorder	cache-plug/fzf/src/tui/tui.go	/^	ColBorder               ColorPair$/;"	v
ColCurrent	cache-plug/fzf/src/tui/tui.go	/^	ColCurrent              ColorPair$/;"	v
ColCurrentCursor	cache-plug/fzf/src/tui/tui.go	/^	ColCurrentCursor        ColorPair$/;"	v
ColCurrentCursorEmpty	cache-plug/fzf/src/tui/tui.go	/^	ColCurrentCursorEmpty   ColorPair$/;"	v
ColCurrentMatch	cache-plug/fzf/src/tui/tui.go	/^	ColCurrentMatch         ColorPair$/;"	v
ColCurrentSelected	cache-plug/fzf/src/tui/tui.go	/^	ColCurrentSelected      ColorPair$/;"	v
ColCurrentSelectedEmpty	cache-plug/fzf/src/tui/tui.go	/^	ColCurrentSelectedEmpty ColorPair$/;"	v
ColCursor	cache-plug/fzf/src/tui/tui.go	/^	ColCursor               ColorPair$/;"	v
ColCursorEmpty	cache-plug/fzf/src/tui/tui.go	/^	ColCursorEmpty          ColorPair$/;"	v
ColHeader	cache-plug/fzf/src/tui/tui.go	/^	ColHeader               ColorPair$/;"	v
ColInfo	cache-plug/fzf/src/tui/tui.go	/^	ColInfo                 ColorPair$/;"	v
ColInput	cache-plug/fzf/src/tui/tui.go	/^	ColInput                ColorPair$/;"	v
ColMatch	cache-plug/fzf/src/tui/tui.go	/^	ColMatch                ColorPair$/;"	v
ColNormal	cache-plug/fzf/src/tui/tui.go	/^	ColNormal               ColorPair$/;"	v
ColPreview	cache-plug/fzf/src/tui/tui.go	/^	ColPreview              ColorPair$/;"	v
ColPreviewBorder	cache-plug/fzf/src/tui/tui.go	/^	ColPreviewBorder        ColorPair$/;"	v
ColPrompt	cache-plug/fzf/src/tui/tui.go	/^	ColPrompt               ColorPair$/;"	v
ColSelected	cache-plug/fzf/src/tui/tui.go	/^	ColSelected             ColorPair$/;"	v
ColSpinner	cache-plug/fzf/src/tui/tui.go	/^	ColSpinner              ColorPair$/;"	v
Color	cache-plug/fzf/src/tui/tui.go	/^type Color int32$/;"	t
ColorAttr	cache-plug/fzf/src/tui/tui.go	/^type ColorAttr struct {$/;"	t
ColorPair	cache-plug/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	t
ColorTheme	cache-plug/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	t
Colors	cache-plug/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f
CommandList	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:CommandList(...) abort$/;"	f
Comment	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:Comment(arg)$/;"	f
CommentKeywordMatch	cache-plug/vim-polyglot/syntax/swift.vim	/^function! s:CommentKeywordMatch(keyword)$/;"	f
CommentOrString	cache-plug/vim-polyglot/indent/mp.vim	/^function! s:CommentOrString(line, pos)$/;"	f
CommitInteractive	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort$/;"	f
CommitSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
CompareAge	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:CompareAge(mine, theirs) abort$/;"	f
CompilerSet	cache-plug/vim-polyglot/compiler/ant.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/cargo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/credo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/cs.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/cucumber.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/dot.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/exunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/go.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/gradle.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/gradlew.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/haml.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/ledger.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/mix.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/nim.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/nix-build.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/powershell.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/python.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/rake.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/rustc.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/sass.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/sbt.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/swift.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/tcl.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/tex.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	cache-plug/vim-polyglot/compiler/tidy.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompleteHeads	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
CompleteRemote	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P, ...) abort$/;"	f
CompleteRevision	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
CompleteSub	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
CompletionTest	cache-plug/fzf/test/test_go.rb	/^module CompletionTest$/;"	m
ConfigTimestamps	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
Constrain	cache-plug/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f
Constrain32	cache-plug/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f
ContainedGroup	cache-plug/vim-polyglot/syntax/scala.vim	/^function! s:ContainedGroup()$/;"	f
ContainingCommit	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
ContinuedHangingOperator	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:ContinuedHangingOperator(msl_info) abort$/;"	f
ContinuedLine	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:ContinuedLine(pline_info) abort$/;"	f
Continues	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:Continues()$/;"	f
CopyRunes	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune) {$/;"	f
CountITags	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:CountITags(text)$/;"	f
CountITags	cache-plug/vim-polyglot/indent/html.vim	/^func! s:CountITags(text)$/;"	f
CountItems	cache-plug/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f
CountTagsAndState	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:CountTagsAndState(text)$/;"	f
CountTagsAndState	cache-plug/vim-polyglot/indent/html.vim	/^func! s:CountTagsAndState(text)$/;"	f
CountUnbalancedParen	cache-plug/vim-polyglot/indent/pgsql.vim	/^function! s:CountUnbalancedParen( line, paren_to_check )$/;"	f
CountWrapper	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^function! <SID>CountWrapper(cmd)$/;"	f
CreateOrExpression	cache-plug/vim-polyglot/ftplugin/scala.vim	/^function! s:CreateOrExpression(keywords)$/;"	f
CrystalContext	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalContext        echo crystal_lang#context(expand('%'), getpos('.'), <q-args>).output$/;"	c
CrystalDef	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=0 CrystalDef            call crystal_lang#jump_to_definition(expand('%'), getpos('.'))$/;"	c
CrystalExpand	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalExpand         echo crystal_lang#expand(expand('%'), getpos('.'), <q-args>).output$/;"	c
CrystalFormat	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* -bar CrystalFormat    call crystal_lang#format(<q-args>, 0)$/;"	c
CrystalHierarchy	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalHierarchy      echo crystal_lang#type_hierarchy(expand('%'), <q-args>)$/;"	c
CrystalImpl	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=* CrystalImpl           echo crystal_lang#impl(expand('%'), getpos('.'), <q-args>).output$/;"	c
CrystalSpecRunAll	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=? CrystalSpecRunAll     call crystal_lang#run_all_spec(<f-args>)$/;"	c
CrystalSpecRunCurrent	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=? CrystalSpecRunCurrent call crystal_lang#run_current_spec(<f-args>)$/;"	c
CrystalSpecSwitch	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^command! -buffer -nargs=? CrystalSpecSwitch     call crystal_lang#switch_spec_file(<f-args>)$/;"	c
CssFirstUnfinished	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
CssFirstUnfinished	cache-plug/vim-polyglot/indent/html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
CssPrevNonComment	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
CssPrevNonComment	cache-plug/vim-polyglot/indent/html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
CssUnfinished	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:CssUnfinished(text)$/;"	f
CssUnfinished	cache-plug/vim-polyglot/indent/html.vim	/^func! s:CssUnfinished(text)$/;"	f
CtrlA	cache-plug/fzf/src/tui/tui.go	/^	CtrlA$/;"	c
CtrlAltA	cache-plug/fzf/src/tui/tui.go	/^	CtrlAltA = AltZ + 1$/;"	c
CtrlAltM	cache-plug/fzf/src/tui/tui.go	/^	CtrlAltM = CtrlAltA + 'm' - 'a'$/;"	c
CtrlB	cache-plug/fzf/src/tui/tui.go	/^	CtrlB$/;"	c
CtrlBackSlash	cache-plug/fzf/src/tui/tui.go	/^	CtrlBackSlash$/;"	c
CtrlC	cache-plug/fzf/src/tui/tui.go	/^	CtrlC$/;"	c
CtrlCaret	cache-plug/fzf/src/tui/tui.go	/^	CtrlCaret$/;"	c
CtrlD	cache-plug/fzf/src/tui/tui.go	/^	CtrlD$/;"	c
CtrlE	cache-plug/fzf/src/tui/tui.go	/^	CtrlE$/;"	c
CtrlF	cache-plug/fzf/src/tui/tui.go	/^	CtrlF$/;"	c
CtrlG	cache-plug/fzf/src/tui/tui.go	/^	CtrlG$/;"	c
CtrlH	cache-plug/fzf/src/tui/tui.go	/^	CtrlH$/;"	c
CtrlJ	cache-plug/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c
CtrlK	cache-plug/fzf/src/tui/tui.go	/^	CtrlK$/;"	c
CtrlL	cache-plug/fzf/src/tui/tui.go	/^	CtrlL$/;"	c
CtrlM	cache-plug/fzf/src/tui/tui.go	/^	CtrlM$/;"	c
CtrlN	cache-plug/fzf/src/tui/tui.go	/^	CtrlN$/;"	c
CtrlO	cache-plug/fzf/src/tui/tui.go	/^	CtrlO$/;"	c
CtrlP	cache-plug/fzf/src/tui/tui.go	/^	CtrlP$/;"	c
CtrlQ	cache-plug/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c
CtrlR	cache-plug/fzf/src/tui/tui.go	/^	CtrlR$/;"	c
CtrlRightBracket	cache-plug/fzf/src/tui/tui.go	/^	CtrlRightBracket$/;"	c
CtrlS	cache-plug/fzf/src/tui/tui.go	/^	CtrlS$/;"	c
CtrlSlash	cache-plug/fzf/src/tui/tui.go	/^	CtrlSlash$/;"	c
CtrlSpace	cache-plug/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c
CtrlT	cache-plug/fzf/src/tui/tui.go	/^	CtrlT$/;"	c
CtrlU	cache-plug/fzf/src/tui/tui.go	/^	CtrlU$/;"	c
CtrlV	cache-plug/fzf/src/tui/tui.go	/^	CtrlV$/;"	c
CtrlW	cache-plug/fzf/src/tui/tui.go	/^	CtrlW$/;"	c
CtrlX	cache-plug/fzf/src/tui/tui.go	/^	CtrlX$/;"	c
CtrlY	cache-plug/fzf/src/tui/tui.go	/^	CtrlY$/;"	c
CtrlZ	cache-plug/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c
CucumberComplete	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^function! CucumberComplete(findstart,base) abort$/;"	f
CurrentNimFile	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! s:CurrentNimFile() abort$/;"	f
CursorRangeFromSelected	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:CursorRangeFromSelected(type, ...) abort$/;"	f
Custom2	cache-plug/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	cache-plug/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
Cycle	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -count=1 -bar -bang Cycle call s:cycle(<bang>0 ? -<count> : <count>)$/;"	c
DB_FILE	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	cache-plug/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v
DESTDIR	cache-plug/delimitMate/Makefile	/^DESTDIR  =  $(HOME)\/.vim$/;"	m
DOC	cache-plug/delimitMate/Makefile	/^DOC      =  $(wildcard doc\/*.txt)$/;"	m
Dark256	cache-plug/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v
DartIndent	cache-plug/vim-polyglot/indent/dart.vim	/^function! DartIndent()$/;"	f
Date	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>Date()$/;"	f
DebChangelogFoldText	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function! DebChangelogFoldText()$/;"	f
DebCompleteBugs	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^fun! DebCompleteBugs(findstart, base)$/;"	f
DebControlFold	cache-plug/vim-polyglot/ftplugin/debcontrol.vim	/^function! DebControlFold(l)$/;"	f
DebControlFoldText	cache-plug/vim-polyglot/ftplugin/debcontrol.vim	/^function! DebControlFoldText()$/;"	f
DebGetChangelogFold	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function! DebGetChangelogFold(lnum)$/;"	f
DebGetPkgSrcName	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function! DebGetPkgSrcName(lineno)$/;"	f
DecreaseFunc	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:DecreaseFunc(type)$/;"	f
DecreaseIndent	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:DecreaseIndent()$/;"	f
DecreaseIndentOnClosingTag	cache-plug/vim-polyglot/indent/mp.vim	/^function! s:DecreaseIndentOnClosingTag(curr_indent)$/;"	f
DefRuby	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
Default16	cache-plug/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v
DefineInlineMarkup	cache-plug/vim-polyglot/syntax/rst.vim	/^function! s:DefineInlineMarkup(name, start, middle, end)$/;"	f
DefineOneInlineMarkup	cache-plug/vim-polyglot/syntax/rst.vim	/^function! s:DefineOneInlineMarkup(name, start, middle, end, char_left, char_right)$/;"	f
DeindentingKeyword	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:DeindentingKeyword(cline_info) abort$/;"	f
Del	cache-plug/fzf/src/tui/tui.go	/^	Del$/;"	c
DeleteLines	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! s:DeleteLines(start, end) abort$/;"	f
DelimitMateOff	cache-plug/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateOff call s:setup(0)$/;"	c
DelimitMateOn	cache-plug/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateOn call s:setup(1)$/;"	c
DelimitMateReload	cache-plug/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateReload call s:setup(1)$/;"	c
DelimitMateSwitch	cache-plug/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateSwitch call s:setup(2)$/;"	c
DelimitMateTest	cache-plug/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateTest call s:test()$/;"	c
Delimiter	cache-plug/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	t
DhallFormat	cache-plug/vim-polyglot/ftplugin/dhall.vim	/^function! DhallFormat()$/;"	f
DiffGitCached	cache-plug/vim-polyglot/ftplugin/gitcommit.vim	/^command! -bang -bar -buffer -complete=custom,s:diffcomplete -nargs=* DiffGitCached :call s:gitdiffcached(<bang>0,b:git_dir,<f-args>)$/;"	c
DifftoolSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Dim	cache-plug/fzf/src/tui/dummy.go	/^	Dim       = Attr(1 << 1)$/;"	c
Dim	cache-plug/fzf/src/tui/tcell.go	/^	Dim            = Attr(tcell.AttrDim)$/;"	c
Dir	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
DirCheck	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
DirCommitFile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
DirRev	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
Disable	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:Disable() abort$/;"	f
DisableOrmolu	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^function! DisableOrmolu()$/;"	f
Dispatch	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Dispatch(bang, options) abort$/;"	f
Distribution	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function Distribution(dist)$/;"	f
Do	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
DoAutocmd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(cmd) abort$/;"	f
DoAutocmdChanged	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
DoHighlight	cache-plug/vim-polyglot/syntax/csv.vim	/^fu! <sid>DoHighlight() "{{{3$/;"	f
DoStagePushHeader	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStagePushHeader(value) abort$/;"	f
DoStageUnpushed	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
DoStageUnpushedHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
DoStageUnstaged	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
DoStageUnstagedHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
DoStageUntracked	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
DoStageUntrackedHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
DoSyntaxDefinitions	cache-plug/vim-polyglot/syntax/csv.vim	/^fu! <sid>DoSyntaxDefinitions() "{{{3$/;"	f
DoToggleHeadHeader	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
DoToggleHelpHeader	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHelpHeader(value) abort$/;"	f
DoTogglePushHeader	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoTogglePushHeader(value) abort$/;"	f
DoToggleStaged	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
DoToggleStagedHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
DoToggleUnpulled	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
DoToggleUnpulledHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
DoToggleUnpushed	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
DoToggleUnpushedHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
DoToggleUnstaged	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
DoToggleUnstagedHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
DoToggleUntracked	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
DoToggleUntrackedHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
DoUnstageStaged	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
DoUnstageStagedHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
DoUnstageUnpulled	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
DoUnstageUnpulledHeading	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
DoUnstageUnpushed	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
DoUnstageUnstaged	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
DoWhile	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:DoWhile()$/;"	f
DocumentationForSymbolRequest	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:DocumentationForSymbolRequest(xmlSig, assembly)$/;"	f
DoneParseArgs	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
DotPackagesFile	cache-plug/vim-polyglot/autoload/dart.vim	/^function! s:DotPackagesFile() abort$/;"	f
DotRelative	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
DoubleClick	cache-plug/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c
Down	cache-plug/fzf/src/tui/tui.go	/^	Down$/;"	c
Drop	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Drop   :<line1>,<line2>call s:choose('drop')$/;"	c
DurWithin	cache-plug/fzf/src/util/util.go	/^func DurWithin($/;"	f
DylanGetIndent	cache-plug/vim-polyglot/indent/dylan.vim	/^function DylanGetIndent()$/;"	f
E2v	cache-plug/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -range E2v :<line1>,<line2>call <SID>ExtendedRegex2VimRegexLineWise(<q-args>)$/;"	c
E2v	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! E2v(extendedregex, ...)$/;"	f
ECRDedent	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! s:ECRDedent(...) abort$/;"	f
ECRIndent	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! s:ECRIndent(...) abort$/;"	f
ESC	cache-plug/fzf/src/tui/tui.go	/^	ESC$/;"	c
Echo	cache-plug/vim-polyglot/autoload/rust/debugging.vim	/^function! s:Echo(message) abort$/;"	f
EchoExec	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:EchoExec(...) abort$/;"	f
EchoGlobalVariables	cache-plug/vim-polyglot/autoload/rust/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
Edit	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Edit   :<line1>,<line2>call s:choose('edit')$/;"	c
EditUrlUnderCursor	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^    function s:EditUrlUnderCursor()$/;"	f
EditVimrc	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:EditVimrc()$/;"	f
Eglobal	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:Eglobal(bang, ...) range$/;"	f
Email	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>Email()$/;"	f
Ematch	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:Ematch(...)$/;"	f
Emit	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:Emit(dict, type, args)$/;"	f
EmptyInsideString	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:EmptyInsideString(pline_info) abort$/;"	f
EmptyMerger	cache-plug/fzf/src/merger.go	/^var EmptyMerger = NewMerger(nil, [][]Result{}, false, false)$/;"	v
EmptyTheme	cache-plug/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f
Enable	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:Enable(initialize)$/;"	f
EnableByDefault	cache-plug/vim-polyglot/syntax/python.vim	/^function! s:EnableByDefault(name)$/;"	f
EnableOrmolu	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^function! EnableOrmolu()$/;"	f
Enabled	cache-plug/vim-polyglot/syntax/python.vim	/^function! s:Enabled(name)$/;"	f
Enclose	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f
Enclose	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f
End	cache-plug/fzf/src/tui/tui.go	/^	End$/;"	c
EndBlockIndent	cache-plug/vim-polyglot/indent/ada.vim	/^function s:EndBlockIndent( prev_indent, prev_lnum, blockstart, blockend )$/;"	f
EndStructure	cache-plug/vim-polyglot/indent/twig.vim	/^function! s:EndStructure(name)$/;"	f
Enter_annotation_buffer	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Enter_annotation_buffer(annot_file_path)$/;"	f
EqualMatch	cache-plug/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
Erase	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f
Erase	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f
ErlangCalcIndent	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:ErlangCalcIndent(lnum, stack)$/;"	f
ErlangCalcIndent2	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:ErlangCalcIndent2(lnum, stack)$/;"	f
ErlangFoldText	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^function ErlangFoldText()$/;"	f
ErlangIndent	cache-plug/vim-polyglot/indent/erlang.vim	/^function! ErlangIndent()$/;"	f
ErlangShowTokensInCurrentLine	cache-plug/vim-polyglot/indent/erlang.vim	/^function! ErlangShowTokensInCurrentLine()$/;"	f
ErlangShowTokensInLine	cache-plug/vim-polyglot/indent/erlang.vim	/^function! ErlangShowTokensInLine(line)$/;"	f
ErrMsg	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
ErubyAtCursor	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^function! ErubyAtCursor() abort$/;"	f
Esc	cache-plug/vim-polyglot/syntax/csv.vim	/^fu! <sid>Esc(val, char) "{{{3 $/;"	f
EscapeAndUnescape	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:EscapeAndUnescape(vimregex, delim)$/;"	f
Esubstitute	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:Esubstitute(...) range$/;"	f
Event	cache-plug/fzf/src/tui/tui.go	/^type Event struct {$/;"	t
EventBox	cache-plug/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	t
EventType	cache-plug/fzf/src/util/eventbox.go	/^type EventType int$/;"	t
Events	cache-plug/fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t
Evglobal	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:Evglobal(...) range$/;"	f
EvtClose	cache-plug/fzf/src/util/eventbox_test.go	/^	EvtClose$/;"	c
EvtHeader	cache-plug/fzf/src/constants.go	/^	EvtHeader$/;"	c
EvtReadFin	cache-plug/fzf/src/constants.go	/^	EvtReadFin$/;"	c
EvtReadFin	cache-plug/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c
EvtReadNew	cache-plug/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c
EvtReadNew	cache-plug/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c
EvtReady	cache-plug/fzf/src/constants.go	/^	EvtReady$/;"	c
EvtSearchFin	cache-plug/fzf/src/constants.go	/^	EvtSearchFin$/;"	c
EvtSearchFin	cache-plug/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c
EvtSearchNew	cache-plug/fzf/src/constants.go	/^	EvtSearchNew$/;"	c
EvtSearchNew	cache-plug/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c
EvtSearchProgress	cache-plug/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c
EvtSearchProgress	cache-plug/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c
ExactMatchNaive	cache-plug/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
Exception	cache-plug/vim-gitgutter/test/runner.vim	/^function Exception()$/;"	f
ExchangeReplaceSpecials	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:ExchangeReplaceSpecials(replacement, sort)$/;"	f
ExecCommand	cache-plug/fzf/src/util/util_unix.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f
ExecCommand	cache-plug/fzf/src/util/util_windows.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f
ExecCommandWith	cache-plug/fzf/src/util/util_unix.go	/^func ExecCommandWith(shell string, command string, setpgid bool) *exec.Cmd {$/;"	f
ExecCommandWith	cache-plug/fzf/src/util/util_windows.go	/^func ExecCommandWith(_shell string, command string, setpgid bool) *exec.Cmd {$/;"	f
ExecPath	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
Exit_annotation_buffer	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Exit_annotation_buffer()$/;"	f
ExitingOneLineScope	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:ExitingOneLineScope(lnum)$/;"	f
ExitingOneLineScope	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:ExitingOneLineScope(lnum)$/;"	f
Expand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
Expand	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:Expand(dict, pretty, args)$/;"	f
ExpandAtomsInBrackets	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:ExpandAtomsInBrackets(bracket)$/;"	f
ExpandSplit	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandSplit(string, ...) abort$/;"	f
ExpandVar	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
ExpandVarLegacy	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVarLegacy(str) abort$/;"	f
ExpireStatus	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
ExprCol	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:ExprCol()$/;"	f
ExtendedRegex2VimRegex	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! ExtendedRegex2VimRegex(data)$/;"	f
ExtendedRegex2VimRegex	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:ExtendedRegex2VimRegex(extendedregex, ...)$/;"	f
ExtendedRegex2VimRegexLineWise	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:ExtendedRegex2VimRegexLineWise(...) range$/;"	f
ExtensionList	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:ExtensionList(...) abort$/;"	f
ExtraBrackets	cache-plug/vim-polyglot/indent/falcon.vim	/^function s:ExtraBrackets(lnum)$/;"	f
ExtraBrackets	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:ExtraBrackets(lnum) abort$/;"	f
ExtraMappings	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:ExtraMappings() "{{{$/;"	f
Extract_type_data	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Extract_type_data(block_pattern, annot_file_name)$/;"	f
F1	cache-plug/fzf/src/tui/tui.go	/^	F1$/;"	c
F10	cache-plug/fzf/src/tui/tui.go	/^	F10$/;"	c
F11	cache-plug/fzf/src/tui/tui.go	/^	F11$/;"	c
F12	cache-plug/fzf/src/tui/tui.go	/^	F12$/;"	c
F2	cache-plug/fzf/src/tui/tui.go	/^	F2$/;"	c
F3	cache-plug/fzf/src/tui/tui.go	/^	F3$/;"	c
F4	cache-plug/fzf/src/tui/tui.go	/^	F4$/;"	c
F5	cache-plug/fzf/src/tui/tui.go	/^	F5$/;"	c
F6	cache-plug/fzf/src/tui/tui.go	/^	F6$/;"	c
F7	cache-plug/fzf/src/tui/tui.go	/^	F7$/;"	c
F8	cache-plug/fzf/src/tui/tui.go	/^	F8$/;"	c
F9	cache-plug/fzf/src/tui/tui.go	/^	F9$/;"	c
FILENAME	cache-plug/delimitMate/Makefile	/^FILENAME =  $(NAME)-$(VERSION)$/;"	m
FILESIZE	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FZF	cache-plug/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FalconGetIndent	cache-plug/vim-polyglot/indent/falcon.vim	/^function FalconGetIndent(...)$/;"	f
FermHiLink	cache-plug/vim-polyglot/syntax/ferm.vim	/^  command! -nargs=+ FermHiLink highlight default link <args>$/;"	c
FermHiLink	cache-plug/vim-polyglot/syntax/ferm.vim	/^  command! -nargs=+ FermHiLink highlight link <args>$/;"	c
FetchSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:FetchSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Fg	cache-plug/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f
FileFormat	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:FileFormat()$/;"	f
FileIgnoreCase	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:FileIgnoreCase(for_completion) abort$/;"	f
Filetype	cache-plug/vim-polyglot/autoload/polyglot/shebang.vim	/^func! s:Filetype()$/;"	f
Fill	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f
Fill	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f
FillContinue	cache-plug/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c
FillNextLine	cache-plug/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c
FillReturn	cache-plug/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t
FillSuspend	cache-plug/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c
FilterEscape	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
Finalise	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function Finalise()$/;"	f
FinaliseMenu	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>FinaliseMenu()$/;"	f
Finalised	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>Finalised()$/;"	f
FindComment	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:FindComment(linenum)$/;"	f
FindContainingClass	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:FindContainingClass() abort$/;"	f
FindCornerOfSyntax	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindCornerOfSyntax(lnum, col, step)$/;"	f
FindCornersOfSyntax	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindCornersOfSyntax(lnum, col)$/;"	f
FindDartFmt	cache-plug/vim-polyglot/autoload/dart.vim	/^function! s:FindDartFmt() abort$/;"	f
FindECRControl	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! s:FindECRControl(...) abort$/;"	f
FindIndToken	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:FindIndToken(lnum, dir)$/;"	f
FindLeftOfSyntax	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindLeftOfSyntax(lnum, col)$/;"	f
FindLet	cache-plug/vim-polyglot/indent/fsharp.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
FindLet	cache-plug/vim-polyglot/indent/ocaml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
FindLet	cache-plug/vim-polyglot/indent/sml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
FindNextSyntax	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindNextSyntax(lnum, col, name)$/;"	f
FindOpenBrace	cache-plug/vim-polyglot/indent/llvm.vim	/^function! FindOpenBrace(lnum)$/;"	f
FindPair	cache-plug/vim-polyglot/indent/elm.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindPair	cache-plug/vim-polyglot/indent/fsharp.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindPair	cache-plug/vim-polyglot/indent/ocaml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindPair	cache-plug/vim-polyglot/indent/sml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindPrevECRControl	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! s:FindPrevECRControl(...) abort$/;"	f
FindPrevLEIndentedLineMatchingRegex	cache-plug/vim-polyglot/indent/yaml.vim	/^function s:FindPrevLEIndentedLineMatchingRegex(lnum, regex)$/;"	f
FindPrevLessIndentedLine	cache-plug/vim-polyglot/indent/yaml.vim	/^function s:FindPrevLessIndentedLine(lnum, ...)$/;"	f
FindPreviousNonCompilerDirectiveLine	cache-plug/vim-polyglot/indent/cs.vim	/^function! s:FindPreviousNonCompilerDirectiveLine(start_lnum)$/;"	f
FindPreviousOpenStructure	cache-plug/vim-polyglot/indent/twig.vim	/^function! s:FindPreviousOpenStructure(lineNumber)$/;"	f
FindReferences_nim	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! FindReferences_nim() abort$/;"	f
FindRightOfSyntax	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:FindRightOfSyntax(lnum, col)$/;"	f
FindStartLine	cache-plug/vim-polyglot/indent/nim.vim	/^function! s:FindStartLine(fromln, pattern)$/;"	f
Find_common_path	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  function! s:Find_common_path (p1,p2)$/;"	f
FinishFill	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f
FinishFill	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f
First_word_len	cache-plug/vim-polyglot/indent/awk.vim	/^function! s:First_word_len( line )$/;"	f
FixBeginfigs	cache-plug/vim-polyglot/ftplugin/mp.vim	/^  command -nargs=0 FixBeginfigs call s:fix_beginfigs()$/;"	c
FixFText	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:FixFText()$/;"	f
Fix_netrw_maps_for_bepo	plugin/netrw.vim	/^function! Fix_netrw_maps_for_bepo()$/;"	f
Fixedgq	cache-plug/vim-polyglot/ftplugin/typescript.vim	/^function! Fixedgq(lnum, count)$/;"	f
Fixup	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Fixup  :<line1>,<line2>call s:choose('fixup')$/;"	c
Flag_parser	cache-plug/vim-prettier/autoload/prettier/resolver/config.vim	/^function! s:Flag_parser(config) abort$/;"	f
Flag_print_width	cache-plug/vim-prettier/autoload/prettier/resolver/config.vim	/^function! s:Flag_print_width(config) abort$/;"	f
Flag_range_delimiter	cache-plug/vim-prettier/autoload/prettier/resolver/config.vim	/^function! s:Flag_range_delimiter(config, partialFormatEnabled, start, end) abort$/;"	f
Flag_tab_width	cache-plug/vim-prettier/autoload/prettier/resolver/config.vim	/^function! s:Flag_tab_width(config) abort$/;"	f
Flag_use_tabs	cache-plug/vim-prettier/autoload/prettier/resolver/config.vim	/^function! s:Flag_use_tabs(config) abort$/;"	f
FnameEscape	cache-plug/vim-polyglot/extras/menu.vim	/^func s:FnameEscape(fname)$/;"	f
Fnameescape	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  function! s:Fnameescape(s)$/;"	f
Fold	plugin/coc.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Fold	plugin/scala.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
FoldableRegion	cache-plug/vim-polyglot/syntax/lua.vim	/^function! s:FoldableRegion(tag, name, expr)$/;"	f
Format	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
Format	plugin/coc.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
Format	plugin/scala.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
FormatFile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
FormatFromSelected	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:FormatFromSelected(type)$/;"	f
FormatLog	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
FormatRebase	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
FormatRmd	cache-plug/vim-polyglot/ftplugin/rmd.vim	/^function! FormatRmd()$/;"	f
FormatRrst	cache-plug/vim-polyglot/ftplugin/rrst.vim	/^function! FormatRrst()$/;"	f
FortranGetFixedIndent	cache-plug/vim-polyglot/indent/fortran.vim	/^function FortranGetFixedIndent()$/;"	f
FortranGetFreeIndent	cache-plug/vim-polyglot/indent/fortran.vim	/^function FortranGetFreeIndent()$/;"	f
FortranGetIndent	cache-plug/vim-polyglot/indent/fortran.vim	/^function FortranGetIndent(lnum)$/;"	f
FreshState	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:FreshState(lnum)$/;"	f
FreshState	cache-plug/vim-polyglot/indent/html.vim	/^func! s:FreshState(lnum)$/;"	f
FriendlyName	cache-plug/vim-gitgutter/test/runner.vim	/^function FriendlyName(test_name)$/;"	f
FsdnRequest	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:FsdnRequest(query)$/;"	f
FugitiveCommonDir	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveConfigGet	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGet(name, ...) abort$/;"	f
FugitiveConfigGetAll	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetAll(name, ...) abort$/;"	f
FugitiveDetect	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(path) abort$/;"	f
FugitiveExtractGitDir	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveHead	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(path) abort$/;"	f
FugitiveParse	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitivePrepare	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePrepare(...) abort$/;"	f
FugitiveReal	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemoteUrl	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveStatusline	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
FullName	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>FullName()$/;"	f
FullscreenRenderer	cache-plug/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	t
FuzzyMatchV1	cache-plug/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
FuzzyMatchV2	cache-plug/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
G	cache-plug/vim-fugitive/plugin/fugitive.vim	/^  command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)$/;"	c
G	cache-plug/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -range=% -bang G :<line1>,<line2>call <SID>Eglobal(<q-bang>, <q-args>)$/;"	c
GCUpper	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^func! GCUpper(what)$/;"	f
GCUpperCommon	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^func! GCUpperCommon(what)$/;"	f
GCUpperDot	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^func! GCUpperDot(what)$/;"	f
GCUpperSpace	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^func! GCUpperSpace(what)$/;"	f
GF	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GO	cache-plug/fzf/Makefile	/^GO             ?= go$/;"	m
GOOS	cache-plug/fzf/Makefile	/^GOOS           ?= $(word 1, $(subst \/, " ", $(word 4, $(shell go version))))$/;"	m
Generate	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Generate(rev, ...) abort$/;"	f
Get	cache-plug/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f
Get	cache-plug/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f
Get	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f
GetAdaIndent	cache-plug/vim-polyglot/indent/ada.vim	/^function GetAdaIndent()$/;"	f
GetAnsibleIndent	cache-plug/vim-polyglot/indent/ansible.vim	/^function GetAnsibleIndent(lnum)$/;"	f
GetAppleScriptIndent	cache-plug/vim-polyglot/indent/applescript.vim	/^func! GetAppleScriptIndent()$/;"	f
GetAutoHotkeyIndent	cache-plug/vim-polyglot/indent/autohotkey.vim	/^function! GetAutoHotkeyIndent()$/;"	f
GetAwkIndent	cache-plug/vim-polyglot/indent/awk.vim	/^function! GetAwkIndent()$/;"	f
GetBladeIndent	cache-plug/vim-polyglot/indent/blade.vim	/^function! GetBladeIndent()$/;"	f
GetBstIndent	cache-plug/vim-polyglot/indent/bst.vim	/^function! GetBstIndent(lnum) abort$/;"	f
GetBufferRubyClass	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubyEntity	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
GetBufferRubyModule	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubySingletonMethods	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetBzlIndent	cache-plug/vim-polyglot/indent/bzl.vim	/^function GetBzlIndent(lnum) abort$/;"	f
GetCSIndent	cache-plug/vim-polyglot/indent/cs.vim	/^function! GetCSIndent(lnum) abort$/;"	f
GetCSSIndent	cache-plug/vim-polyglot/indent/css.vim	/^function GetCSSIndent()$/;"	f
GetCabalIndent	cache-plug/vim-polyglot/indent/cabal.vim	/^function! GetCabalIndent()$/;"	f
GetCaddyfileIndent	cache-plug/vim-polyglot/indent/caddyfile.vim	/^function! GetCaddyfileIndent(lnum)$/;"	f
GetChaiScriptIndent	cache-plug/vim-polyglot/indent/chaiscript.vim	/^function! GetChaiScriptIndent()$/;"	f
GetChar	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event { return Event{} }$/;"	f
GetChar	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f
GetChar	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f
GetClojureIndent	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! GetClojureIndent()$/;"	f
GetCobolIndent	cache-plug/vim-polyglot/indent/cobol.vim	/^function! GetCobolIndent(lnum) abort$/;"	f
GetCoffeeIndent	cache-plug/vim-polyglot/indent/coffee.vim	/^function! GetCoffeeIndent(curlnum)$/;"	f
GetConfigIndent	cache-plug/vim-polyglot/indent/config.vim	/^function GetConfigIndent()$/;"	f
GetContents	cache-plug/vim-polyglot/indent/lua.vim	/^function s:GetContents(lnum)$/;"	f
GetCrystalIndent	cache-plug/vim-polyglot/indent/crystal.vim	/^function! GetCrystalIndent(...) abort$/;"	f
GetCucumberIndent	cache-plug/vim-polyglot/indent/cucumber.vim	/^function! GetCucumberIndent()$/;"	f
GetDIndent	cache-plug/vim-polyglot/indent/d.vim	/^function GetDIndent()$/;"	f
GetDTDIndent	cache-plug/vim-polyglot/indent/dtd.vim	/^function GetDTDIndent()$/;"	f
GetDefaultPolicy	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:GetDefaultPolicy(curlnum)$/;"	f
GetDelim	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:GetDelim(str)$/;"	f
GetDosBatchIndent	cache-plug/vim-polyglot/indent/dosbatch.vim	/^function! GetDosBatchIndent(lnum)$/;"	f
GetEcrystalFold	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! GetEcrystalFold() abort$/;"	f
GetEcrystalIndent	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! GetEcrystalIndent() abort$/;"	f
GetEelixirIndent	cache-plug/vim-polyglot/indent/eelixir.vim	/^function! GetEelixirIndent(...)$/;"	f
GetElmIndent	cache-plug/vim-polyglot/indent/elm.vim	/^function! GetElmIndent()$/;"	f
GetEndIndentation	cache-plug/vim-polyglot/indent/tex.vim	/^function! s:GetEndIndentation(lnum) " {{{$/;"	f
GetErlangFold	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^function GetErlangFold(lnum)$/;"	f
GetErubyIndent	cache-plug/vim-polyglot/indent/eruby.vim	/^function! GetErubyIndent(...)$/;"	f
GetEtermIndent	cache-plug/vim-polyglot/indent/eterm.vim	/^function GetEtermIndent()$/;"	f
GetExecPath	cache-plug/vim-prettier/autoload/prettier/resolver/executable.vim	/^function! s:GetExecPath(...) abort$/;"	f
GetFennelIndent	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! GetFennelIndent()$/;"	f
GetFrameScriptIndent	cache-plug/vim-polyglot/indent/framescript.vim	/^function GetFrameScriptIndent()$/;"	f
GetFsharpIndent	cache-plug/vim-polyglot/indent/fsharp.vim	/^function! GetFsharpIndent()$/;"	f
GetGitconfigIndent	cache-plug/vim-polyglot/indent/gitconfig.vim	/^function! GetGitconfigIndent()$/;"	f
GetGitoliteIndent	cache-plug/vim-polyglot/indent/gitolite.vim	/^function! GetGitoliteIndent()$/;"	f
GetGoHTMLTmplIndent	cache-plug/vim-polyglot/indent/gohtmltmpl.vim	/^function! GetGoHTMLTmplIndent(lnum)$/;"	f
GetGraphQLIndent	cache-plug/vim-polyglot/indent/graphql.vim	/^function GetGraphQLIndent()$/;"	f
GetHamlIndent	cache-plug/vim-polyglot/indent/haml.vim	/^function! GetHamlIndent()$/;"	f
GetHandlebarsIndent	cache-plug/vim-polyglot/indent/handlebars.vim	/^function! GetHandlebarsIndent(...)$/;"	f
GetHaskellIndent	cache-plug/vim-polyglot/indent/haskell.vim	/^function! GetHaskellIndent()$/;"	f
GetHeaderLevel	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetHeaderLevel(...)$/;"	f
GetHeaderLineNum	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetHeaderLineNum(...)$/;"	f
GetHeaderList	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetHeaderList()$/;"	f
GetHelp	cache-plug/vim-polyglot/ftplugin/ps1.vim	/^    command! -buffer -nargs=1 GetHelp echo system(s:pwsh_cmd . ' -NoLogo -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -Command Get-Help -Full <args>')$/;"	c
GetHelp	cache-plug/vim-polyglot/ftplugin/ps1.vim	/^    command! -buffer -nargs=1 GetHelp silent exe '!' . s:pwsh_cmd . ' -NoLogo -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -Command Get-Help -Full "<args>" | ' . (has('unix') ? 'LESS= less' : 'less') | redraw!$/;"	c
GetHelp	cache-plug/vim-polyglot/ftplugin/ps1.vim	/^    command! -buffer -nargs=1 GetHelp silent exe 'term ' . s:pwsh_cmd . ' -NoLogo -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned -Command Get-Help -Full "<args>"' . (executable('less') ? ' | less' : '')$/;"	c
GetHogIndent	cache-plug/vim-polyglot/indent/hog.vim	/^function GetHogIndent()$/;"	f
GetIdrisIndent	cache-plug/vim-polyglot/indent/idris.vim	/^function! GetIdrisIndent()$/;"	f
GetIdrisIndent	cache-plug/vim-polyglot/indent/idris2.vim	/^function! GetIdrisIndent()$/;"	f
GetInd	cache-plug/vim-polyglot/indent/fsharp.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
GetInd	cache-plug/vim-polyglot/indent/ocaml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
GetInd	cache-plug/vim-polyglot/indent/sml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
GetIndtokenAtCol	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:GetIndtokenAtCol(indtokens, col)$/;"	f
GetJIndent	cache-plug/vim-polyglot/indent/j.vim	/^function GetJIndent() abort$/;"	f
GetJSONIndent	cache-plug/vim-polyglot/indent/json.vim	/^function GetJSONIndent()$/;"	f
GetJavaIndent	cache-plug/vim-polyglot/indent/java.vim	/^function GetJavaIndent()$/;"	f
GetJavascriptGraphQLIndent	cache-plug/vim-polyglot/after/indent/javascript-2.vim	/^function GetJavascriptGraphQLIndent()$/;"	f
GetJavascriptIndent	cache-plug/vim-polyglot/indent/javascript.vim	/^function GetJavascriptIndent()$/;"	f
GetJsIndent	cache-plug/vim-polyglot/indent/qml.vim	/^function! GetJsIndent()$/;"	f
GetJstIndent	cache-plug/vim-polyglot/indent/jst.vim	/^function! GetJstIndent(...)$/;"	f
GetJsxIndent	cache-plug/vim-polyglot/after/indent/jsx.vim	/^function! GetJsxIndent()$/;"	f
GetJsxIndent	cache-plug/vim-polyglot/after/indent/tsx.vim	/^function! GetJsxIndent()$/;"	f
GetJuliaIndent	cache-plug/vim-polyglot/indent/julia.vim	/^function GetJuliaIndent()$/;"	f
GetJuliaNestingBrackets	cache-plug/vim-polyglot/indent/julia.vim	/^function GetJuliaNestingBrackets(lnum, c)$/;"	f
GetJuliaNestingStruct	cache-plug/vim-polyglot/indent/julia.vim	/^function GetJuliaNestingStruct(lnum, ...)$/;"	f
GetKotlinIndent	cache-plug/vim-polyglot/indent/kotlin.vim	/^function! GetKotlinIndent()$/;"	f
GetLDIndent	cache-plug/vim-polyglot/indent/ld.vim	/^function GetLDIndent()$/;"	f
GetLLVMIndent	cache-plug/vim-polyglot/indent/llvm.vim	/^function! GetLLVMIndent()$/;"	f
GetLastBeginIndentation	cache-plug/vim-polyglot/indent/tex.vim	/^function! s:GetLastBeginIndentation(lnum) " {{{$/;"	f
GetLedgerIndent	cache-plug/vim-polyglot/indent/ledger.vim	/^function GetLedgerIndent(...)$/;"	f
GetLevelOfHeaderAtLine	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetLevelOfHeaderAtLine(linenum)$/;"	f
GetLilyPondIndent	cache-plug/vim-polyglot/indent/lilypond.vim	/^function GetLilyPondIndent()$/;"	f
GetLineWithoutFullComment	cache-plug/vim-polyglot/indent/fsharp.vim	/^function! s:GetLineWithoutFullComment(lnum)$/;"	f
GetLineWithoutFullComment	cache-plug/vim-polyglot/indent/ocaml.vim	/^function! s:GetLineWithoutFullComment(lnum)$/;"	f
GetLiquidIndent	cache-plug/vim-polyglot/indent/liquid.vim	/^function! GetLiquidIndent(...)$/;"	f
GetLitCoffeeIndent	cache-plug/vim-polyglot/indent/litcoffee.vim	/^function GetLitCoffeeIndent()$/;"	f
GetLiveScriptIndent	cache-plug/vim-polyglot/indent/ls.vim	/^function! GetLiveScriptIndent(curlinenum)$/;"	f
GetLiveScriptIndent	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:GetLiveScriptIndent(curlinenum)$/;"	f
GetLogtalkIndent	cache-plug/vim-polyglot/indent/logtalk.vim	/^function! GetLogtalkIndent()$/;"	f
GetLuaIndent	cache-plug/vim-polyglot/indent/lua.vim	/^function GetLuaIndent()$/;"	f
GetMSL	cache-plug/vim-polyglot/indent/falcon.vim	/^function s:GetMSL(lnum)$/;"	f
GetMSL	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:GetMSL(lnum) abort$/;"	f
GetMSL	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:GetMSL(lnum, in_one_line_scope)$/;"	f
GetMSL	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:GetMSL(lnum, in_one_line_scope)$/;"	f
GetMakeIndent	cache-plug/vim-polyglot/indent/make.vim	/^function GetMakeIndent()$/;"	f
GetMakeIndent	cache-plug/vim-polyglot/indent/omake.vim	/^function GetMakeIndent()$/;"	f
GetMakePrg	cache-plug/vim-polyglot/compiler/coffee.vim	/^function! s:GetMakePrg()$/;"	f
GetMakePrg	cache-plug/vim-polyglot/compiler/ls.vim	/^function! s:GetMakePrg()$/;"	f
GetMakoIndent	cache-plug/vim-polyglot/indent/mako.vim	/^function GetMakoIndent()$/;"	f
GetMarkdownIndent	cache-plug/vim-polyglot/indent/markdown.vim	/^function GetMarkdownIndent()$/;"	f
GetMatch	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:GetMatch(curline)$/;"	f
GetMatch	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:GetMatch(curline)$/;"	f
GetMdIndent	cache-plug/vim-polyglot/indent/rmd.vim	/^function s:GetMdIndent()$/;"	f
GetMesonIndent	cache-plug/vim-polyglot/indent/meson.vim	/^function GetMesonIndent(lnum)$/;"	f
GetMetaPostIndent	cache-plug/vim-polyglot/indent/mp.vim	/^function GetMetaPostIndent()$/;"	f
GetMetaPostIndentIntern	cache-plug/vim-polyglot/indent/mp.vim	/^function! GetMetaPostIndentIntern()$/;"	f
GetMoonIndent	cache-plug/vim-polyglot/indent/moon.vim	/^function! GetMoonIndent(curlinenum)$/;"	f
GetMoonIndent	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:GetMoonIndent(curlinenum)$/;"	f
GetNextHeaderLineNumberAtLevel	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetNextHeaderLineNumberAtLevel(level, ...)$/;"	f
GetNimIndent	cache-plug/vim-polyglot/indent/nim.vim	/^function! GetNimIndent(lnum)$/;"	f
GetNixIndent	cache-plug/vim-polyglot/indent/nix.vim	/^function! GetNixIndent()$/;"	f
GetNsisIndent	cache-plug/vim-polyglot/indent/nsis.vim	/^function! GetNsisIndent(lnum)$/;"	f
GetOCamlIndent	cache-plug/vim-polyglot/indent/ocaml.vim	/^function! GetOCamlIndent()$/;"	f
GetObjCIndentImproved	cache-plug/vim-polyglot/after/indent/objc.vim	/^function! GetObjCIndentImproved()$/;"	f
GetOccamIndent	cache-plug/vim-polyglot/indent/occam.vim	/^function GetOccamIndent()$/;"	f
GetOctaveIndent	cache-plug/vim-polyglot/indent/octave.vim	/^function! GetOctaveIndent()$/;"	f
GetOdinIndent	cache-plug/vim-polyglot/indent/odin.vim	/^function! GetOdinIndent(lnum)$/;"	f
GetOffsetOf	cache-plug/vim-polyglot/indent/config.vim	/^function s:GetOffsetOf(line, regexp)$/;"	f
GetPHPGraphQLIndent	cache-plug/vim-polyglot/after/indent/php.vim	/^function GetPHPGraphQLIndent()$/;"	f
GetPair	cache-plug/vim-polyglot/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
GetParentHeaderLineNumber	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetParentHeaderLineNumber(...)$/;"	f
GetPascalIndent	cache-plug/vim-polyglot/indent/pascal.vim	/^function! GetPascalIndent( line_num )$/;"	f
GetPerlIndent	cache-plug/vim-polyglot/indent/perl.vim	/^function! GetPerlIndent()$/;"	f
GetPlantUMLIndent	cache-plug/vim-polyglot/indent/plantuml.vim	/^function! GetPlantUMLIndent(...) abort$/;"	f
GetPoVRayIndent	cache-plug/vim-polyglot/indent/pov.vim	/^function GetPoVRayIndent()$/;"	f
GetPotionFold	cache-plug/vim-polyglot/ftplugin/cryptol/folding.vim	/^function! GetPotionFold(lnum)$/;"	f
GetPrevNonCommentLineNum	cache-plug/vim-polyglot/indent/pascal.vim	/^function! s:GetPrevNonCommentLineNum( line_num )$/;"	f
GetPrevNormalLine	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:GetPrevNormalLine(startlnum)$/;"	f
GetPrevNormalLine	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:GetPrevNormalLine(startlinenum)$/;"	f
GetPrevNormalLine	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:GetPrevNormalLine(startlinenum)$/;"	f
GetPreviousHeaderLineNumberAtLevel	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:GetPreviousHeaderLineNumberAtLevel(level, ...)$/;"	f
GetPrologIndent	cache-plug/vim-polyglot/indent/prolog.vim	/^function! GetPrologIndent()$/;"	f
GetPugIndent	cache-plug/vim-polyglot/indent/pug.vim	/^function! GetPugIndent()$/;"	f
GetPuppetIndent	cache-plug/vim-polyglot/indent/puppet.vim	/^function! GetPuppetIndent(...)$/;"	f
GetPurescriptIndent	cache-plug/vim-polyglot/indent/purescript.vim	/^function! GetPurescriptIndent()$/;"	f
GetPythonIndent	cache-plug/vim-polyglot/indent/gdscript3.vim	/^function GetPythonIndent(lnum)$/;"	f
GetPythonPEPIndent	cache-plug/vim-polyglot/indent/cython.vim	/^function! GetPythonPEPIndent(lnum)$/;"	f
GetPythonPEPIndent	cache-plug/vim-polyglot/indent/python.vim	/^function! GetPythonPEPIndent(lnum)$/;"	f
GetRSTIndent	cache-plug/vim-polyglot/indent/rst.vim	/^function GetRSTIndent()$/;"	f
GetRakuIndent	cache-plug/vim-polyglot/indent/raku.vim	/^function! GetRakuIndent()$/;"	f
GetReadlineIndent	cache-plug/vim-polyglot/indent/readline.vim	/^function GetReadlineIndent()$/;"	f
GetReasonIndent	cache-plug/vim-polyglot/indent/reason.vim	/^function GetReasonIndent(lnum)$/;"	f
GetRelVer	cache-plug/vim-polyglot/ftplugin/spec.vim	/^	function! s:GetRelVer()$/;"	f
GetRmdIndent	cache-plug/vim-polyglot/indent/rmd.vim	/^function GetRmdIndent()$/;"	f
GetRnowebIndent	cache-plug/vim-polyglot/indent/rnoweb.vim	/^function GetRnowebIndent()$/;"	f
GetRrstIndent	cache-plug/vim-polyglot/indent/rrst.vim	/^function GetRrstIndent()$/;"	f
GetRstIndent	cache-plug/vim-polyglot/indent/rrst.vim	/^function GetRstIndent()$/;"	f
GetRubyIndent	cache-plug/vim-polyglot/indent/ruby.vim	/^function! GetRubyIndent(...) abort$/;"	f
GetRubyVarType	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
GetRustIndent	cache-plug/vim-polyglot/indent/rust.vim	/^function GetRustIndent(lnum)$/;"	f
GetSASIndent	cache-plug/vim-polyglot/indent/sas.vim	/^function! GetSASIndent()$/;"	f
GetSCSSIndent	cache-plug/vim-polyglot/indent/scss.vim	/^function GetSCSSIndent()$/;"	f
GetSDLIndent	cache-plug/vim-polyglot/indent/sdl.vim	/^function! GetSDLIndent()$/;"	f
GetSMLIndent	cache-plug/vim-polyglot/indent/sml.vim	/^function! GetSMLIndent()$/;"	f
GetSQLIndent	cache-plug/vim-polyglot/indent/pgsql.vim	/^function! GetSQLIndent()$/;"	f
GetSassIndent	cache-plug/vim-polyglot/indent/sass.vim	/^function! GetSassIndent()$/;"	f
GetScalaIndent	cache-plug/vim-polyglot/indent/scala.vim	/^function! GetScalaIndent()$/;"	f
GetScriptType	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:GetScriptType(str)$/;"	f
GetScriptType	cache-plug/vim-polyglot/indent/html.vim	/^func! s:GetScriptType(str)$/;"	f
GetSlimIndent	cache-plug/vim-polyglot/indent/slim.vim	/^function! GetSlimIndent()$/;"	f
GetSlimeIndent	cache-plug/vim-polyglot/indent/slime.vim	/^function! GetSlimeIndent()$/;"	f
GetSolidityIndent	cache-plug/vim-polyglot/indent/solidity.vim	/^function GetSolidityIndent()$/;"	f
GetSshconfigIndent	cache-plug/vim-polyglot/indent/sshconfig.vim	/^function GetSshconfigIndent(lnum)$/;"	f
GetStmtStarterIndent	cache-plug/vim-polyglot/indent/pgsql.vim	/^function! s:GetStmtStarterIndent( keyword, curr_lnum )$/;"	f
GetStylusIndent	cache-plug/vim-polyglot/indent/stylus.vim	/^function! GetStylusIndent()$/;"	f
GetSvelteIndent	cache-plug/vim-polyglot/indent/svelte.vim	/^function! GetSvelteIndent()$/;"	f
GetSynStack	cache-plug/vim-polyglot/indent/purescript.vim	/^function! s:GetSynStack(lnum, col)$/;"	f
GetTFIndent	cache-plug/vim-polyglot/indent/tf.vim	/^function GetTFIndent()$/;"	f
GetTclIndent	cache-plug/vim-polyglot/indent/tcl.vim	/^function GetTclIndent()$/;"	f
GetTeXIndent	cache-plug/vim-polyglot/indent/tex.vim	/^function! GetTeXIndent() " {{{$/;"	f
GetTeraTermIndent	cache-plug/vim-polyglot/indent/teraterm.vim	/^function! GetTeraTermIndent(lnum)$/;"	f
GetTildeIndent	cache-plug/vim-polyglot/indent/tilde.vim	/^function GetTildeIndent(lnum)$/;"	f
GetTokensFromLine	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:GetTokensFromLine(line, string_continuation, atom_continuation,$/;"	f
GetTreetopIndent	cache-plug/vim-polyglot/indent/treetop.vim	/^function GetTreetopIndent()$/;"	f
GetTrimmedLine	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:GetTrimmedLine(lnum)$/;"	f
GetTrimmedLine	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:GetTrimmedLine(linenum)$/;"	f
GetTrimmedLine	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:GetTrimmedLine(linenum)$/;"	f
GetTsxIndent	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^fu! GetTsxIndent()$/;"	f
GetTwigIndent	cache-plug/vim-polyglot/indent/twig.vim	/^fun! GetTwigIndent(currentLineNumber)$/;"	f
GetTypescriptGraphQLIndent	cache-plug/vim-polyglot/after/indent/typescript.vim	/^function GetTypescriptGraphQLIndent()$/;"	f
GetTypescriptIndent	cache-plug/vim-polyglot/indent/typescript.vim	/^function GetTypescriptIndent()$/;"	f
GetVHDLindent	cache-plug/vim-polyglot/indent/vhdl.vim	/^function GetVHDLindent()$/;"	f
GetValaIndent	cache-plug/vim-polyglot/indent/vala.vim	/^function GetValaIndent(lnum)$/;"	f
GetVarIndent	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:GetVarIndent(lnum)$/;"	f
GetVarIndent	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:GetVarIndent(lnum)$/;"	f
GetVars	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:GetVars()$/;"	f
GetVerilogIndent	cache-plug/vim-polyglot/indent/verilog.vim	/^function GetVerilogIndent()$/;"	f
GetVueIndent	cache-plug/vim-polyglot/indent/vue.vim	/^function! GetVueIndent()$/;"	f
GetXF86ConfIndent	cache-plug/vim-polyglot/indent/xf86conf.vim	/^function GetXF86ConfIndent()$/;"	f
GetXinetdIndent	cache-plug/vim-polyglot/indent/xinetd.vim	/^function GetXinetdIndent()$/;"	f
GetYAMLIndent	cache-plug/vim-polyglot/indent/yaml.vim	/^function GetYAMLIndent(lnum)$/;"	f
GetYaccIndent	cache-plug/vim-polyglot/indent/yacc.vim	/^function GetYaccIndent()$/;"	f
GetYamlIndent	cache-plug/vim-polyglot/indent/rmd.vim	/^function s:GetYamlIndent()$/;"	f
GetZigIndent	cache-plug/vim-polyglot/indent/zig.vim	/^function! GetZigIndent(lnum)$/;"	f
GetZimbuIndent	cache-plug/vim-polyglot/indent/zimbu.vim	/^func GetZimbuIndent(lnum)$/;"	f
Get_brace_balance	cache-plug/vim-polyglot/indent/awk.vim	/^function! s:Get_brace_balance( line, b_open, b_close )$/;"	f
Get_prev_line	cache-plug/vim-polyglot/indent/awk.vim	/^function! s:Get_prev_line( lineno )$/;"	f
Get_type	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Get_type(mode, annot_file_name)$/;"	f
Git	cache-plug/vim-fugitive/plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)$/;"	c
GitGutter	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 1)$/;"	c
GitGutterAll	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterAll call gitgutter#all(1)$/;"	c
GitGutterBufferDisable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferDisable call gitgutter#buffer_disable()$/;"	c
GitGutterBufferEnable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferEnable  call gitgutter#buffer_enable()$/;"	c
GitGutterBufferToggle	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferToggle  call gitgutter#buffer_toggle()$/;"	c
GitGutterCursorHold	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterCursorHold(timer)$/;"	f
GitGutterDebug	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDebug call gitgutter#debug#debug()$/;"	c
GitGutterDisable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDisable call gitgutter#disable()$/;"	c
GitGutterEnable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterEnable  call gitgutter#enable()$/;"	c
GitGutterFold	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterFold call gitgutter#fold#toggle()$/;"	c
GitGutterGetHunkSummary	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunkSummary()$/;"	f
GitGutterGetHunks	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunks()$/;"	f
GitGutterLineHighlightsDisable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsDisable call gitgutter#highlight#line_disable()$/;"	c
GitGutterLineHighlightsEnable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsEnable  call gitgutter#highlight#line_enable()$/;"	c
GitGutterLineHighlightsToggle	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsToggle  call gitgutter#highlight#line_toggle()$/;"	c
GitGutterLineNrHighlightsDisable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsDisable call gitgutter#highlight#linenr_disable()$/;"	c
GitGutterLineNrHighlightsEnable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsEnable  call gitgutter#highlight#linenr_enable()$/;"	c
GitGutterLineNrHighlightsToggle	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsToggle  call gitgutter#highlight#linenr_toggle()$/;"	c
GitGutterNextHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)$/;"	c
GitGutterPrevHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)$/;"	c
GitGutterPreviewHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterPreviewHunk call gitgutter#hunk#preview()$/;"	c
GitGutterQuickFix	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterQuickFix call gitgutter#quickfix()$/;"	c
GitGutterSignsDisable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsDisable call gitgutter#sign#disable()$/;"	c
GitGutterSignsEnable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsEnable  call gitgutter#sign#enable()$/;"	c
GitGutterSignsToggle	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsToggle  call gitgutter#sign#toggle()$/;"	c
GitGutterStageHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -range=% GitGutterStageHunk call gitgutter#hunk#stage(<line1>,<line2>)$/;"	c
GitGutterToggle	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterToggle  call gitgutter#toggle()$/;"	c
GitGutterUndoHunk	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterUndoHunk    call gitgutter#hunk#undo()$/;"	c
GlobComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern) abort$/;"	f
GlobalChange	cache-plug/coc.nvim/autoload/coc.vim	/^function! s:GlobalChange(dict, key, val)$/;"	f
GoIndent	cache-plug/vim-polyglot/indent/go.vim	/^function! GoIndent(lnum) abort$/;"	f
GotoDefinition_nim	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! GotoDefinition_nim() abort$/;"	f
GotoDefinition_nim_ready	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! GotoDefinition_nim_ready(def_output) abort$/;"	f
Greek	cache-plug/vim-polyglot/syntax/tex.vim	/^  fun! s:Greek(group,pat,cchar)$/;"	f
GrepParseLine	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(prefix, name_only, dir, line) abort$/;"	f
GrepSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
GutentagsToggleEnabled	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
H	plugin/bepo.vim	/^noremap H R$/;"	m
HamGetFreeIndent	cache-plug/vim-polyglot/indent/hamster.vim	/^function HamGetFreeIndent()$/;"	f
HamGetIndent	cache-plug/vim-polyglot/indent/hamster.vim	/^function HamGetIndent(lnum)$/;"	f
HasBg	cache-plug/fzf/src/tui/tui.go	/^func (p ColorPair) HasBg() bool {$/;"	f
HasFullscreenRenderer	cache-plug/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f
HasFullscreenRenderer	cache-plug/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f
HasOpt	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
HaxeHiLink	cache-plug/vim-polyglot/syntax/haxe.vim	/^  command! -nargs=+ HaxeHiLink hi def link <args>$/;"	c
HaxeHiLink	cache-plug/vim-polyglot/syntax/haxe.vim	/^  command! -nargs=+ HaxeHiLink hi link <args>$/;"	c
HeaderDecrease	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -range=% HeaderDecrease call s:HeaderDecrease(<line1>, <line2>)$/;"	c
HeaderDecrease	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:HeaderDecrease(line1, line2, ...)$/;"	f
HeaderIncrease	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -range=% HeaderIncrease call s:HeaderDecrease(<line1>, <line2>, 1)$/;"	c
Height	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f
Height	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f
Helpfind	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:Helpfind()$/;"	f
HexToColor	cache-plug/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f
Hi	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:Hi() abort$/;"	f
Hi	cache-plug/vim-polyglot/syntax/sdl.vim	/^command -nargs=+ Hi     hi def <args>$/;"	c
Hi	cache-plug/vim-polyglot/syntax/xpm2.vim	/^command -nargs=+ Hi hi def <args>$/;"	c
HiLink	cache-plug/vim-polyglot/extras/flow.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/extras/flow.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/carp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/carp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/common.vim	/^command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/cql.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/cql.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/cryptol.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/cryptol.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/csv.vim	/^fu! <sid>HiLink(name, target) "{{{3$/;"	f
HiLink	cache-plug/vim-polyglot/syntax/fbs.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/fbs.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/fsharp.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/fsharp.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/gnuplot.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/haproxy.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/haproxy.vim	/^  command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/jinja2.vim	/^  command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/lilypond.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/lilypond.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/llvm.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/llvm.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/lua.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/lua.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/mako.vim	/^    com -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/mako.vim	/^    com -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/nim.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/nim.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/octave.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/octave.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/proto.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/proto.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/ps1.vim	/^		command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/ps1.vim	/^		command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/puppet.vim	/^command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/python.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/python.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/qml.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/qml.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/racket.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/racket.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/raku.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/raku.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/rhelp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/rhelp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/sexplib.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/sexplib.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/stylus.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/stylus.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/tablegen.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/tablegen.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/textile.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/textile.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/thrift.vim	/^    command! -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/thrift.vim	/^    command! -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/tptp.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/tptp.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/twig.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/twig.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/unison.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/unison.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/vbnet.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/vbnet.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/velocity.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	cache-plug/vim-polyglot/syntax/velocity.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
History	cache-plug/fzf/src/history.go	/^type History struct {$/;"	t
Home	cache-plug/fzf/src/tui/tui.go	/^	Home$/;"	c
HtmlHiLink	cache-plug/vim-polyglot/syntax/handlebars.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	cache-plug/vim-polyglot/syntax/handlebars.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlHiLink	cache-plug/vim-polyglot/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi def link <args>$/;"	c
HtmlHiLink	cache-plug/vim-polyglot/syntax/markdown.vim	/^  command! -nargs=+ HtmlHiLink hi link <args>$/;"	c
HtmlIndent	cache-plug/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent()$/;"	f
HtmlIndent	cache-plug/vim-polyglot/indent/html.vim	/^func! HtmlIndent()$/;"	f
HtmlIndentClose	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentClose(lnum)$/;"	f
HtmlIndentCloseAlt	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentOpen	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentOpen(lnum)$/;"	f
HtmlIndentOpenAlt	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentPush	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
HtmlIndentSum	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
HtmlIndent_CheckUserSettings	cache-plug/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
HtmlIndent_CheckUserSettings	cache-plug/vim-polyglot/indent/html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
HtmlIndent_CountBraces	cache-plug/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
HtmlIndent_CountBraces	cache-plug/vim-polyglot/indent/html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
HtmlIndent_FindStartTag	cache-plug/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindStartTag	cache-plug/vim-polyglot/indent/html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindTagEnd	cache-plug/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
HtmlIndent_FindTagEnd	cache-plug/vim-polyglot/indent/html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
HtmlIndent_FindTagStart	cache-plug/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_FindTagStart	cache-plug/vim-polyglot/indent/html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_IsOpenTag	cache-plug/vim-polyglot/after/indent/html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
HtmlIndent_IsOpenTag	cache-plug/vim-polyglot/indent/html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
INDEX_WHOLE_PROJECT	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
IWrite	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IWrite(str)$/;"	f
IWrite	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IWrite(str)$/;"	f
IcalHiLink	cache-plug/vim-polyglot/syntax/icalendar.vim	/^command! -nargs=+ IcalHiLink hi def link <args>$/;"	c
IdrisAddClause	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisAddClause(proof)$/;"	f
IdrisAddClause	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisAddClause(proof)$/;"	f
IdrisAddMissing	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisAddMissing()$/;"	f
IdrisAddMissing	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisAddMissing()$/;"	f
IdrisCaseSplit	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisCaseSplit()$/;"	f
IdrisCaseSplit	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisCaseSplit()$/;"	f
IdrisCommand	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! s:IdrisCommand(...)$/;"	f
IdrisCommand	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! s:IdrisCommand(...)$/;"	f
IdrisDocFold	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisDocFold(lineNum)$/;"	f
IdrisDocFold	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisDocFold(lineNum)$/;"	f
IdrisEval	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisEval()$/;"	f
IdrisEval	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisEval()$/;"	f
IdrisFold	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisFold(lineNum)$/;"	f
IdrisFold	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisFold(lineNum)$/;"	f
IdrisGenerateDef	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisGenerateDef()$/;"	f
IdrisHideResponseWin	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisHideResponseWin()$/;"	f
IdrisHideResponseWin	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisHideResponseWin()$/;"	f
IdrisMakeCase	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisMakeCase()$/;"	f
IdrisMakeCase	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisMakeCase()$/;"	f
IdrisMakeLemma	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisMakeLemma()$/;"	f
IdrisMakeLemma	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisMakeLemma()$/;"	f
IdrisMakeWith	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisMakeWith()$/;"	f
IdrisMakeWith	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisMakeWith()$/;"	f
IdrisProofSearch	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisProofSearch(hint)$/;"	f
IdrisProofSearch	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisProofSearch(hint)$/;"	f
IdrisRefine	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisRefine()$/;"	f
IdrisRefine	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisRefine()$/;"	f
IdrisReload	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisReload(q)$/;"	f
IdrisReload	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisReload(q)$/;"	f
IdrisReloadToLine	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisReloadToLine(cline)$/;"	f
IdrisReloadToLine	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisReloadToLine(cline)$/;"	f
IdrisResponseWin	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisResponseWin()$/;"	f
IdrisResponseWin	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisResponseWin()$/;"	f
IdrisShowDoc	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisShowDoc()$/;"	f
IdrisShowDoc	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisShowDoc()$/;"	f
IdrisShowResponseWin	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisShowResponseWin()$/;"	f
IdrisShowResponseWin	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisShowResponseWin()$/;"	f
IdrisShowType	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! IdrisShowType()$/;"	f
IdrisShowType	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! IdrisShowType()$/;"	f
InBracket	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:InBracket(...)$/;"	f
InComment	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:InComment(...)$/;"	f
InComment2	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:InComment2(...)$/;"	f
InCommentOrLiteral	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:InCommentOrLiteral(...)$/;"	f
InKeyword	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:InKeyword(...)$/;"	f
InLiteral	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:InLiteral(...)$/;"	f
InLiteral2	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:InLiteral2(...)$/;"	f
InMultiVarStatement	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:InMultiVarStatement(lnum)$/;"	f
InMultiVarStatement	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:InMultiVarStatement(lnum)$/;"	f
InOneLineScope	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:InOneLineScope(lnum)$/;"	f
InOneLineScope	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:InOneLineScope(lnum)$/;"	f
InString	cache-plug/vim-polyglot/indent/graphql.vim	/^function s:InString(lnum, col)$/;"	f
IncreaseFunc	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:IncreaseFunc(type)$/;"	f
IncreaseIndent	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:IncreaseIndent()$/;"	f
IndentError	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:IndentError(msg, token, stack)$/;"	f
IndentLevel	cache-plug/vim-polyglot/ftplugin/cryptol/folding.vim	/^function! IndentLevel(lnum)$/;"	f
IndentWithContinuation	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:IndentWithContinuation(lnum, ind, width)$/;"	f
IndentWithContinuation	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:IndentWithContinuation(lnum, ind, width)$/;"	f
IndentingKeywordInMSL	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:IndentingKeywordInMSL(msl_info) abort$/;"	f
Index	cache-plug/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f
Index	cache-plug/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f
Init	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init()             {}$/;"	f
Init	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() {$/;"	f
Init	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() {$/;"	f
InitPureScript	cache-plug/vim-polyglot/ftplugin/purescript.vim	/^fun! InitPureScript()$/;"	f
InnerPos	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:InnerPos(x, y)$/;"	f
Input	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) Input() []rune {$/;"	f
Insert	cache-plug/fzf/src/tui/tui.go	/^	Insert$/;"	c
InsertNToc	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -nargs=? InsertNToc call s:InsertToc('numbers', <args>)$/;"	c
InsertToc	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -nargs=? InsertToc call s:InsertToc('bullets', <args>)$/;"	c
InsertToc	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:InsertToc(format, ...)$/;"	f
InsideMultilineString	cache-plug/vim-polyglot/indent/puppet.vim	/^function! s:InsideMultilineString(lnum)$/;"	f
InsideTag	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
InsideTag	cache-plug/vim-polyglot/indent/html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
InstallOptions	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:InstallOptions(...)abort$/;"	f
Invalid	cache-plug/fzf/src/tui/tui.go	/^	Invalid$/;"	c
IsAssignment	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:IsAssignment(str, pos) abort$/;"	f
IsAttributeLine	cache-plug/vim-polyglot/indent/cs.vim	/^function! s:IsAttributeLine(line)$/;"	f
IsBeginBlockByStr	cache-plug/vim-polyglot/indent/autohotkey.vim	/^function! IsBeginBlockByStr(str)$/;"	f
IsBlankLine	cache-plug/vim-polyglot/indent/markdown.vim	/^function! s:IsBlankLine(line)$/;"	f
IsBlock	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:IsBlock()$/;"	f
IsBytes	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f
IsCatchStandalone	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:IsCatchStandalone(lnum, i)$/;"	f
IsColComment	cache-plug/vim-polyglot/indent/pgsql.vim	/^function! s:IsColComment(lnum, cnum)$/;"	f
IsComment	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:IsComment(lnum, col)$/;"	f
IsComment	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:IsComment(linenum, col)$/;"	f
IsComment	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:IsComment(linenum, col)$/;"	f
IsCommentLine	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:IsCommentLine(linenum)$/;"	f
IsCommentLine	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:IsCommentLine(linenum)$/;"	f
IsCommentLine	cache-plug/vim-polyglot/indent/swift.vim	/^function! s:IsCommentLine(lnum)$/;"	f
IsCommentOrString	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:IsCommentOrString(lnum, col)$/;"	f
IsCommentOrString	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:IsCommentOrString(linenum, col)$/;"	f
IsCommentOrString	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:IsCommentOrString(linenum, col)$/;"	f
IsCompilerDirective	cache-plug/vim-polyglot/indent/cs.vim	/^function! s:IsCompilerDirective(line)$/;"	f
IsConflicted	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
IsContOne	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:IsContOne(cont)$/;"	f
IsContinued	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:IsContinued(lnum)$/;"	f
IsDefault	cache-plug/fzf/src/tui/tui.go	/^func (c Color) IsDefault() bool {$/;"	f
IsDoubleCoronByStr	cache-plug/vim-polyglot/indent/autohotkey.vim	/^function! IsDoubleCoronByStr(str)$/;"	f
IsEmpty	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f
IsEndBlockByStr	cache-plug/vim-polyglot/indent/autohotkey.vim	/^function! IsEndBlockByStr(str)$/;"	f
IsExcludedFromIndent	cache-plug/vim-polyglot/indent/swift.vim	/^function! s:IsExcludedFromIndent()$/;"	f
IsExcludedFromIndentAtPosition	cache-plug/vim-polyglot/indent/swift.vim	/^function! s:IsExcludedFromIndentAtPosition(line, column)$/;"	f
IsFull	cache-plug/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f
IsFunctionArgPar	cache-plug/vim-polyglot/indent/julia.vim	/^function IsFunctionArgPar(lnum, c)$/;"	f
IsHeaderLine	cache-plug/vim-polyglot/indent/markdown.vim	/^function! s:IsHeaderLine(line)$/;"	f
IsIfStatementByStr	cache-plug/vim-polyglot/indent/autohotkey.vim	/^function! IsIfStatementByStr(str)$/;"	f
IsInBlock	cache-plug/vim-polyglot/indent/hog.vim	/^function s:IsInBlock(lnum)$/;"	f
IsInBrackets	cache-plug/vim-polyglot/indent/julia.vim	/^function IsInBrackets(lnum, c)$/;"	f
IsInClassDef	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsInComment	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsInComment(pos)$/;"	f
IsInCommentOrString	cache-plug/vim-polyglot/indent/lua.vim	/^function s:IsInCommentOrString(lnum, col)$/;"	f
IsInContinuationImportLine	cache-plug/vim-polyglot/indent/julia.vim	/^function IsInContinuationImportLine(lnum)$/;"	f
IsInDocString	cache-plug/vim-polyglot/indent/julia.vim	/^function IsInDocString(lnum)$/;"	f
IsInMultilineComment	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:IsInMultilineComment(lnum, col)$/;"	f
IsInRubyGroup	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:IsInRubyGroup(groups, lnum, col) abort$/;"	f
IsInString	cache-plug/vim-polyglot/indent/falcon.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInString	cache-plug/vim-polyglot/indent/json.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInString	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:IsInString(lnum, col) abort$/;"	f
IsInString	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInString	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInStringDelimiter	cache-plug/vim-polyglot/indent/falcon.vim	/^function s:IsInStringDelimiter(lnum, col)$/;"	f
IsInStringDelimiter	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringDelimiter(lnum, col) abort$/;"	f
IsInStringOrComment	cache-plug/vim-polyglot/indent/falcon.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrComment	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringOrComment(lnum, col) abort$/;"	f
IsInStringOrComment	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrComment	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrDocumentation	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:IsInStringOrDocumentation(lnum, col) abort$/;"	f
IsInsideOfBlockByNum	cache-plug/vim-polyglot/indent/autohotkey.vim	/^function! IsInsideOfBlockByNum(line_num)$/;"	f
IsInsidePythonBlock	cache-plug/vim-polyglot/indent/mako.vim	/^function IsInsidePythonBlock(startline)$/;"	f
IsLiStart	cache-plug/vim-polyglot/indent/markdown.vim	/^function! s:IsLiStart(line)$/;"	f
IsLightRendererSupported	cache-plug/fzf/src/tui/light_unix.go	/^func IsLightRendererSupported() bool {$/;"	f
IsLightRendererSupported	cache-plug/fzf/src/tui/light_windows.go	/^func IsLightRendererSupported() bool {$/;"	f
IsLineAtomContinuation	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:IsLineAtomContinuation(lnum)$/;"	f
IsLineComment	cache-plug/vim-polyglot/indent/pgsql.vim	/^function! s:IsLineComment(lnum)$/;"	f
IsLineComment	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:IsLineComment(lnum, col)$/;"	f
IsLineStringContinuation	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:IsLineStringContinuation(lnum)$/;"	f
IsMkdCode	cache-plug/vim-polyglot/indent/markdown.vim	/^function! s:IsMkdCode(lnum)$/;"	f
IsPosInClassDef	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
IsReturnByStr	cache-plug/vim-polyglot/indent/autohotkey.vim	/^function! IsReturnByStr(str)$/;"	f
IsStartingDelimiter	cache-plug/vim-polyglot/indent/blade.vim	/^function! s:IsStartingDelimiter(lnum)$/;"	f
IsString	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:IsString(lnum, col)$/;"	f
IsString	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:IsString(linenum, col)$/;"	f
IsString	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:IsString(linenum, col)$/;"	f
IsSwitch	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:IsSwitch()$/;"	f
IsSyntaxNameExcludedFromIndent	cache-plug/vim-polyglot/indent/swift.vim	/^function! s:IsSyntaxNameExcludedFromIndent(name)$/;"	f
IsTty	cache-plug/fzf/src/util/util.go	/^func IsTty() bool {$/;"	f
IsWindows	cache-plug/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f
IsWindows	cache-plug/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f
Italic	cache-plug/fzf/src/tui/dummy.go	/^	Italic    = Attr(1 << 2)$/;"	c
Italic	cache-plug/fzf/src/tui/tcell.go	/^	Italic         = Attr(tcell.AttrItalic)$/;"	c
Item	cache-plug/fzf/src/item.go	/^type Item struct {$/;"	t
ItemBuilder	cache-plug/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t
J	plugin/bepo.vim	/^noremap J T$/;"	m
JobOpts	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:JobOpts(cmd, env) abort$/;"	f
JsonnetFmt	cache-plug/vim-polyglot/ftplugin/jsonnet.vim	/^command! -nargs=0 JsonnetFmt call jsonnet#Format()$/;"	c
JuliaDoc	cache-plug/vim-polyglot/ftplugin/julia.vim	/^command! -nargs=1 -buffer -complete=customlist,julia#doc#complete JuliaDoc call julia#doc#open(<q-args>)$/;"	c
JuliaDoc	cache-plug/vim-polyglot/ftplugin/juliadoc.vim	/^command! -nargs=1 -buffer -complete=customlist,julia#doc#complete JuliaDoc call julia#doc#open(<q-args>)$/;"	c
JuliaDocKeywordprg	cache-plug/vim-polyglot/ftplugin/julia.vim	/^command! -nargs=1 -buffer JuliaDocKeywordprg call julia#doc#keywordprg(<q-args>)$/;"	c
JuliaDocKeywordprg	cache-plug/vim-polyglot/ftplugin/juliadoc.vim	/^command! -nargs=1 -buffer JuliaDocKeywordprg call julia#doc#keywordprg(<q-args>)$/;"	c
JuliaGetMatchWords	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  function! JuliaGetMatchWords()$/;"	f
JuliaMatch	cache-plug/vim-polyglot/indent/julia.vim	/^function JuliaMatch(lnum, str, regex, st, ...)$/;"	f
JumpToMatch	cache-plug/vim-polyglot/indent/julia.vim	/^function JumpToMatch(lnum, last_closed_bracket)$/;"	f
Jump_Back	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:Jump_Back()$/;"	f
Jump_Forward	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:Jump_Forward()$/;"	f
K	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>K <Plug>(llvm-goto-definition)$/;"	m
K	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^nnoremap <buffer> <expr> K col('.') < 7 && expand('<Lt>cword>') =~ '\\X' && getline('.') =~ '^\\w\\+\\s\\+\\x\\+\\>' ? 'wK' : 'K'$/;"	m
K	cache-plug/vim-polyglot/ftplugin/racket.vim	/^  nmap <buffer> K <Plug>RacketDoc$/;"	m
K	cache-plug/vim-polyglot/ftplugin/racket.vim	/^  vmap <buffer> K <Plug>RacketDoc$/;"	m
K	plugin/bepo.vim	/^noremap K S$/;"	m
K	plugin/coc.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
K	plugin/scala.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
Keywordprg	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
KillCommand	cache-plug/fzf/src/util/util_unix.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f
KillCommand	cache-plug/fzf/src/util/util_windows.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f
L	plugin/bepo.vim	/^noremap L C$/;"	m
L2U_ResetLastCompletionInfo	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_ResetLastCompletionInfo()$/;"	f
L2U_SetAutoSub	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetAutoSub(wait_insert_enter)$/;"	f
L2U_SetFallbackMapping	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetFallbackMapping(s, k)$/;"	f
L2U_SetKeymap	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetKeymap()$/;"	f
L2U_SetTab	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetTab(wait_insert_enter)$/;"	f
L2U_Setup	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_Setup()$/;"	f
L2U_SetupGlobal	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_SetupGlobal()$/;"	f
L2U_UnsetAutoSub	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetAutoSub()$/;"	f
L2U_UnsetKeymap	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetKeymap()$/;"	f
L2U_UnsetTab	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_UnsetTab()$/;"	f
L2U_deprecated_options	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_deprecated_options()$/;"	f
L2U_file_type_regex	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_file_type_regex(ft)$/;"	f
L2U_fix_compose_chars	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_fix_compose_chars(uni)$/;"	f
L2U_ismatch	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_ismatch()$/;"	f
L2U_longest_common_prefix	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_longest_common_prefix(partmatches)$/;"	f
L2U_partmatches_sort	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! s:L2U_partmatches_sort(p1, p2)$/;"	f
LIB	cache-plug/delimitMate/Makefile	/^LIB      =  $(wildcard autoload\/*.vim)$/;"	m
LLI	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^    command! -buffer -nargs=? -bar -complete=file LLI call <SID>run_lli(<f-args>)$/;"	c
LOG_FILE	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
LaTeXtoUnicode#AutoSub	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#AutoSub(...)$/;"	f
LaTeXtoUnicode#CmdTab	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#CmdTab(trigger)$/;"	f
LaTeXtoUnicode#Disable	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Disable(...)$/;"	f
LaTeXtoUnicode#Enable	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Enable(...)$/;"	f
LaTeXtoUnicode#FallbackCallback	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#FallbackCallback()$/;"	f
LaTeXtoUnicode#Init	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Init(...)$/;"	f
LaTeXtoUnicode#PutLiteral	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#PutLiteral(k)$/;"	f
LaTeXtoUnicode#Refresh	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Refresh()$/;"	f
LaTeXtoUnicode#Tab	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Tab()$/;"	f
LaTeXtoUnicode#Toggle	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#Toggle()$/;"	f
LaTeXtoUnicode#omnifunc	cache-plug/vim-polyglot/autoload/LaTeXtoUnicode.vim	/^function! LaTeXtoUnicode#omnifunc(findstart, base)$/;"	f
LastBlockIndent	cache-plug/vim-polyglot/indent/julia.vim	/^function LastBlockIndent(lnum)$/;"	f
LastTagIsOpen	cache-plug/vim-polyglot/indent/mp.vim	/^function! s:LastTagIsOpen(line)$/;"	f
LastValidMatchEnd	cache-plug/vim-polyglot/indent/mp.vim	/^function! s:LastValidMatchEnd(line, pat, start)$/;"	f
LeadingOperator	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:LeadingOperator(cline_info) abort$/;"	f
LeadingWhitespaces	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) LeadingWhitespaces() int {$/;"	f
Left	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f
Left	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f
Left	cache-plug/fzf/src/tui/tui.go	/^	Left$/;"	c
LeftClick	cache-plug/fzf/src/tui/tui.go	/^	LeftClick$/;"	c
Len	cache-plug/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f
Len	cache-plug/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f
Len	cache-plug/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f
Len	cache-plug/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f
Length	cache-plug/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f
Length	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f
Less	cache-plug/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f
Less	cache-plug/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f
Less	cache-plug/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f
Less	cache-plug/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f
Light256	cache-plug/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v
LightRenderer	cache-plug/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	t
LightWindow	cache-plug/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	t
LineHasOpeningBrackets	cache-plug/vim-polyglot/indent/json.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
LineHasOpeningBrackets	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
LineHasOpeningBrackets	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
LinesError	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
LiveScriptCompile	cache-plug/vim-polyglot/ftplugin/ls.vim	/^\\        LiveScriptCompile call s:LiveScriptCompile(<line1>, <line2>, <q-args>)$/;"	c
LiveScriptCompile	cache-plug/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompile(startline, endline, args)$/;"	f
LiveScriptCompileClose	cache-plug/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileClose()$/;"	f
LiveScriptCompileComplete	cache-plug/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileComplete(arg, cmdline, cursor)$/;"	f
LiveScriptCompileResetVars	cache-plug/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileResetVars()$/;"	f
LiveScriptCompileUpdate	cache-plug/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileUpdate(startline, endline)$/;"	f
LiveScriptCompileWatchUpdate	cache-plug/vim-polyglot/ftplugin/ls.vim	/^function! s:LiveScriptCompileWatchUpdate()$/;"	f
LiveScriptMake	cache-plug/vim-polyglot/compiler/ls.vim	/^command! -bang -bar -nargs=* LiveScriptMake make<bang> <args>$/;"	c
LiveScriptRun	cache-plug/vim-polyglot/ftplugin/ls.vim	/^command! -range=% -bar LiveScriptRun <line1>,<line2>:w !lsc -sp$/;"	c
LiveScriptUpdateMakePrg	cache-plug/vim-polyglot/compiler/ls.vim	/^augroup LiveScriptUpdateMakePrg$/;"	a
LoadBufferMenu	cache-plug/vim-polyglot/extras/menu.vim	/^  augroup LoadBufferMenu$/;"	a
LoadVimSesn	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:LoadVimSesn()$/;"	f
Load_annotation	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Load_annotation(annot_file_name)$/;"	f
LoadedExtensions	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:LoadedExtensions(...) abort$/;"	f
Locate_annotation	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  function! s:Locate_annotation()$/;"	f
Log	cache-plug/vim-gitgutter/test/runner.vim	/^function Log(msg)$/;"	f
Log	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:Log(s)$/;"	f
LogFlushQueue	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state, dir) abort$/;"	f
LogParse	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, line) abort$/;"	f
LookingAt	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:LookingAt()$/;"	f
Lookup	cache-plug/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f
Loop	cache-plug/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f
Loop	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) Loop() {$/;"	f
LoopParseArgs	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
M	cache-plug/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -count=1 M :let s:eregex_tmp_hlsearch = &hlsearch | let v:searchforward = <SID>Ematch(<count>, <q-args>) | if s:eregex_tmp_hlsearch == 1 | set hlsearch | endif$/;"	c
MAKEFILE	cache-plug/fzf/Makefile	/^MAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MainBlockIndent	cache-plug/vim-polyglot/indent/ada.vim	/^function s:MainBlockIndent (prev_indent, prev_lnum, blockstart, stop_at)$/;"	f
MakeBorderStyle	cache-plug/fzf/src/tui/tui.go	/^func MakeBorderStyle(shape BorderShape, unicode bool) BorderStyle {$/;"	f
MakeMenu	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>MakeMenu()$/;"	f
MakeSlab	cache-plug/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f
MakeTransparentBorder	cache-plug/fzf/src/tui/tui.go	/^func MakeTransparentBorder() BorderStyle {$/;"	f
MakoIndentClose	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentClose(lnum)$/;"	f
MakoIndentOpen	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentOpen(lnum)$/;"	f
MakoIndentPush	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>MakoIndentPush(tag)$/;"	f
Map	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:Map() "{{{$/;"	f
Map	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
Map	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
Map	cache-plug/vim-polyglot/indent/twig.vim	/^function! s:Map(Fun, list)$/;"	f
MapMotion	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
MapNormVis	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MapNormVis(rhs,lhs)$/;"	f
MapNotHasmapto	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MapNotHasmapto(lhs, rhs)$/;"	f
MarkdownClearSyntaxVariables	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MarkdownClearSyntaxVariables()$/;"	f
MarkdownHighlightSources	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MarkdownHighlightSources(force)$/;"	f
MarkdownRefreshSyntax	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MarkdownRefreshSyntax(force)$/;"	f
Markdown_GetUrlForPosition	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:Markdown_GetUrlForPosition(lnum, col)$/;"	f
Match	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f
Match	cache-plug/vim-polyglot/indent/falcon.vim	/^function s:Match(lnum, regex)$/;"	f
Match	cache-plug/vim-polyglot/indent/json.vim	/^function s:Match(lnum, regex)$/;"	f
Match	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:Match(lnum, regex) abort$/;"	f
Match	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:Match(lnum, regex)$/;"	f
Match	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:Match(lnum, regex)$/;"	f
MatchAt	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! s:MatchAt(lnum, col, pattern) abort$/;"	f
MatchCount	cache-plug/vim-polyglot/indent/mako.vim	/^fun! <SID>MatchCount(expr, pat)$/;"	f
MatchCount	cache-plug/vim-polyglot/indent/pov.vim	/^function! s:MatchCount(line, rexp)$/;"	f
MatchCursor	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! s:MatchCursor(pattern) abort$/;"	f
MatchECR	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! s:MatchECR(...) abort$/;"	f
MatchECRControl	cache-plug/vim-polyglot/indent/ecrystal.vim	/^function! s:MatchECRControl(...) abort$/;"	f
MatchItem	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]int) {$/;"	f
MatchLast	cache-plug/vim-polyglot/indent/falcon.vim	/^function s:MatchLast(lnum, regex)$/;"	f
MatchRequest	cache-plug/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	t
Match_borders	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Match_borders(mode)$/;"	f
Match_data	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    function! s:Match_data()$/;"	f
Matcher	cache-plug/fzf/src/matcher.go	/^type Matcher struct {$/;"	t
Max	cache-plug/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f
Max16	cache-plug/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f
Max32	cache-plug/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f
MaxLookback	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:MaxLookback(startlinenum)$/;"	f
MaxLookback	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:MaxLookback(startlinenum)$/;"	f
MaxX	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int      { return 0 }$/;"	f
MaxX	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f
MaxX	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f
MaxY	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int      { return 0 }$/;"	f
MaxY	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f
MaxY	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f
MenuExplOpen	cache-plug/vim-polyglot/extras/menu.vim	/^  fun MenuExplOpen()$/;"	f
Merge	cache-plug/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f
Merge	cache-plug/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f
Merge	cache-plug/fzf/src/tui/tui.go	/^func (p ColorPair) Merge(other ColorPair) ColorPair {$/;"	f
MergeAttr	cache-plug/fzf/src/tui/tui.go	/^func (p ColorPair) MergeAttr(other ColorPair) ColorPair {$/;"	f
MergeHead	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeHead(...) abort$/;"	f
MergeNonDefault	cache-plug/fzf/src/tui/tui.go	/^func (p ColorPair) MergeNonDefault(other ColorPair) ColorPair {$/;"	f
MergeSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Merger	cache-plug/fzf/src/merger.go	/^type Merger struct {$/;"	t
MergetoolSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
MessageCfile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:MessageCfile(...) abort$/;"	f
Min	cache-plug/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f
Min32	cache-plug/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f
Mkd	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^augroup Mkd$/;"	a
Modified	cache-plug/lightline.vim/test/expand.vim	/^  function! Modified()$/;"	f
Mods	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
ModuloIndent	cache-plug/vim-polyglot/indent/pgsql.vim	/^function! s:ModuloIndent(ind)$/;"	f
Mouse	cache-plug/fzf/src/tui/tui.go	/^	Mouse$/;"	c
MouseEvent	cache-plug/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	t
Move	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f
Move	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f
Move	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
MoveAndClear	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f
MoveAndClear	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f
MoveToCurHeader	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToCurHeader()$/;"	f
MoveToNextHeader	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToNextHeader()$/;"	f
MoveToNextSiblingHeader	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToNextSiblingHeader()$/;"	f
MoveToParentHeader	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToParentHeader()$/;"	f
MoveToPreviousHeader	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToPreviousHeader()$/;"	f
MoveToPreviousSiblingHeader	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:MoveToPreviousSiblingHeader()$/;"	f
MultilineStringOrLineComment	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:MultilineStringOrLineComment(cline_info) abort$/;"	f
MyGutentagsStatusLineRefresher	plugin/gutentags.vim	/^augroup MyGutentagsStatusLineRefresher$/;"	a
NAME	cache-plug/delimitMate/Makefile	/^NAME     =  delimitMate$/;"	m
NAME	cache-plug/vim-prettier/Makefile	/^NAME=vim-prettier$/;"	m
Nat	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:Nat(int)$/;"	f
NavigateUp	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
NewAtomicBool	cache-plug/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f
NewChunkCache	cache-plug/fzf/src/cache.go	/^func NewChunkCache() ChunkCache {$/;"	f
NewChunkList	cache-plug/fzf/src/chunklist.go	/^func NewChunkList(trans ItemBuilder) *ChunkList {$/;"	f
NewColorAttr	cache-plug/fzf/src/tui/tui.go	/^func NewColorAttr() ColorAttr {$/;"	f
NewColorPair	cache-plug/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color, attr Attr) ColorPair {$/;"	f
NewEventBox	cache-plug/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f
NewFullscreenRenderer	cache-plug/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f
NewHistory	cache-plug/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f
NewLightRenderer	cache-plug/fzf/src/tui/light.go	/^func NewLightRenderer(theme *ColorTheme, forceBlack bool, mouse bool, tabstop int, clearOnExit bool, fullscreen bool, maxHeightFunc func(int) int) Renderer {$/;"	f
NewMatcher	cache-plug/fzf/src/matcher.go	/^func NewMatcher(patternBuilder func([]rune) *Pattern,$/;"	f
NewMerger	cache-plug/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool) *Merger {$/;"	f
NewReader	cache-plug/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, delimNil bool, wait bool) *Reader {$/;"	f
NewTerminal	cache-plug/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox) *Terminal {$/;"	f
NewTest_filetype_detection	cache-plug/vim-polyglot/tests/native.vim	/^func NewTest_filetype_detection()$/;"	f
NewVersion	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function NewVersion()$/;"	f
NewWindow	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Window {$/;"	f
NewWindow	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Window {$/;"	f
NewWindow	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Window {$/;"	f
NextExpandedHunk	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
NextFile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
NextHunk	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
NextIndToken	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:NextIndToken(lnum, i)$/;"	f
NextItem	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
NextNonBlankLine	cache-plug/vim-polyglot/ftplugin/cryptol/folding.vim	/^function! NextNonBlankLine(lnum)$/;"	f
NextSection	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
NextSection	cache-plug/vim-polyglot/ftplugin/scala.vim	/^function! s:NextSection(backwards)$/;"	f
NextSectionEnd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
NimAsyncCmdComplete	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! NimAsyncCmdComplete(cmd, output) abort$/;"	f
NimComplete	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! NimComplete(findstart, base) abort$/;"	f
NimExec	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! NimExec(op) abort$/;"	f
NimExecAsync	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! NimExecAsync(op, Handler) abort$/;"	f
NimLog	cache-plug/vim-polyglot/autoload/nim.vim	/^command! NimLog :e log:\/\/nim$/;"	c
NimRestartService	cache-plug/vim-polyglot/autoload/nim.vim	/^command! NimRestartService$/;"	c
NimTerminateService	cache-plug/vim-polyglot/autoload/nim.vim	/^command! NimTerminateService$/;"	c
NimVim	cache-plug/vim-polyglot/autoload/nim.vim	/^augroup NimVim$/;"	a
NoAutoClose	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:NoAutoClose() "{{{$/;"	f
NoColorTheme	cache-plug/fzf/src/tui/tui.go	/^func NoColorTheme() *ColorTheme {$/;"	f
NoTeXIndent	cache-plug/vim-polyglot/indent/rnoweb.vim	/^function! s:NoTeXIndent()$/;"	f
NormalizeRunes	cache-plug/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f
NullError	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:NullError(...) abort$/;"	f
NumberOfMatches	cache-plug/vim-polyglot/indent/swift.vim	/^function! s:NumberOfMatches(char, string, index)$/;"	f
OCaml_switch	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  fun OCaml_switch(newwin)$/;"	f
OMLetFoldLevel	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^function OMLetFoldLevel(l)$/;"	f
OR	plugin/coc.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
Observe	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^func! s:Observe(fn)$/;"	f
Ocaml_get_type	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^      function Ocaml_get_type(mode)$/;"	f
Ocaml_get_type_or_not	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^      function Ocaml_get_type_or_not(mode)$/;"	f
Ocaml_print_type	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^      function Ocaml_print_type(mode)$/;"	f
OcpGrep	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^function! s:OcpGrep(bang,args) abort$/;"	f
Ocpgrep	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^command! -bar -bang -complete=file -nargs=+ Ocpgrep exe s:OcpGrep(<q-bang>, <q-args>)$/;"	c
Offset	cache-plug/fzf/src/result.go	/^type Offset [2]int32$/;"	t
Once	cache-plug/fzf/src/util/util.go	/^func Once(nextResponse bool) func() bool {$/;"	f
OneScope	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:OneScope()$/;"	f
OpenBrace	cache-plug/vim-polyglot/indent/puppet.vim	/^function! s:OpenBrace(lnum)$/;"	f
OpenConfig	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:OpenConfig()$/;"	f
OpenDiagnostics	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:OpenDiagnostics(...) abort$/;"	f
OpenExec	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenExec(cmd, mods, env, args, ...) abort$/;"	f
OpenParse	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenParse(args, wants_cmd) abort$/;"	f
OpenUrlUnderCursor	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:OpenUrlUnderCursor()$/;"	f
Options	cache-plug/fzf/src/options.go	/^type Options struct {$/;"	t
Or	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:Or(x, y)$/;"	f
OrmoluBlock	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^function! OrmoluBlock()$/;"	f
OrmoluHaskell	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^function! s:OrmoluHaskell()$/;"	f
OrmoluSave	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^function! s:OrmoluSave()$/;"	f
OuterPos	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:OuterPos(x, y)$/;"	f
OverwriteBuffer	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^function! s:OverwriteBuffer(output)$/;"	f
Owner	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
PAUSE_BEFORE_EXIT	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
PERL	cache-plug/delimitMate/Makefile	/^PERL     =  perl$/;"	m
PLUGIN	cache-plug/delimitMate/Makefile	/^PLUGIN   =  $(wildcard plugin\/*.vim)$/;"	m
POST_PROCESS_CMD	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PackageMap	cache-plug/vim-polyglot/autoload/dart.vim	/^function! s:PackageMap() abort$/;"	f
ParseArgs	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseCino	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:ParseCino(f)$/;"	f
ParseCoffeeError	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:ParseCoffeeError(output, src, startline)$/;"	f
ParseOptions	cache-plug/fzf/src/options.go	/^func ParseOptions() *Options {$/;"	f
ParseRange	cache-plug/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f
ParseRpmVars	cache-plug/vim-polyglot/ftplugin/spec.vim	/^    function s:ParseRpmVars(str, strline)$/;"	f
PartOfInclude	cache-plug/vim-polyglot/indent/puppet.vim	/^function! s:PartOfInclude(lnum)$/;"	f
PassMerger	cache-plug/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool) *Merger {$/;"	f
PatchSearchExpr	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
PathInfo	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
Pattern	cache-plug/fzf/src/pattern.go	/^type Pattern struct {$/;"	t
Pause	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)        {}$/;"	f
Pause	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f
Pause	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(clear bool) {$/;"	f
Peek	cache-plug/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f
PgDn	cache-plug/fzf/src/tui/tui.go	/^	PgDn$/;"	c
PgUp	cache-plug/fzf/src/tui/tui.go	/^	PgUp$/;"	c
Pick	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Pick   :<line1>,<line2>call s:choose('pick')$/;"	c
PlainNotification	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:PlainNotification(content)$/;"	f
PolyglotVerify	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^func! PolyglotVerify()$/;"	f
Pop	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:Pop(stack)$/;"	f
Pop	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:Pop()$/;"	f
Position	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:Position(line, character)$/;"	f
PostscrIndentGet	cache-plug/vim-polyglot/indent/postscr.vim	/^function! PostscrIndentGet(lnum)$/;"	f
PrefixMatch	cache-plug/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
PreparePathArgs	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal) abort$/;"	f
Prepend	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) Prepend(prefix string) {$/;"	f
Prettier	cache-plug/vim-prettier/ftplugin/css.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/graphql.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/html.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/javascript.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/json.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/less.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/lua.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/markdown.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/php.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/ruby.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/scss.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/typescript.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/vue.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/xml.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/ftplugin/yaml.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/plugin/prettier.vim	/^augroup Prettier$/;"	a
Prettier	cache-plug/vim-prettier/plugin/prettier.vim	/^command! -nargs=? -range=% Prettier call prettier#Prettier(g:prettier#exec_cmd_async, <line1>, <line2>, g:prettier#partial_format)$/;"	c
PrettierAsync	cache-plug/vim-prettier/plugin/prettier.vim	/^command! -nargs=? -range=% PrettierAsync call prettier#Prettier(1, <line1>, <line2>, g:prettier#partial_format)$/;"	c
PrettierCli	cache-plug/vim-prettier/plugin/prettier.vim	/^command! -nargs=? -range=% PrettierCli call prettier#PrettierCli(<q-args>)$/;"	c
PrettierCliPath	cache-plug/vim-prettier/plugin/prettier.vim	/^command! -nargs=? -range=% PrettierCliPath call prettier#PrettierCliPath()$/;"	c
PrettierCliVersion	cache-plug/vim-prettier/plugin/prettier.vim	/^command! -nargs=? -range=% PrettierCliVersion call prettier#PrettierCli('--version')$/;"	c
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/css.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/graphql.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/html.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/javascript.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/json.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/less.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/lua.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/markdown.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/php.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/ruby.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/scss.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/typescript.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/vue.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/xml.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFileDetect	cache-plug/vim-prettier/ftdetect/yaml.vim	/^augroup PrettierFileDetect$/;"	a
PrettierFragment	cache-plug/vim-prettier/plugin/prettier.vim	/^command! -nargs=? -range=% PrettierFragment call prettier#Prettier(g:prettier#exec_cmd_async, <line1>, <line2>, 0)$/;"	c
PrettierPartial	cache-plug/vim-prettier/plugin/prettier.vim	/^command! -nargs=? -range=% PrettierPartial call prettier#Prettier(g:prettier#exec_cmd_async, <line1>, <line2>, 1)$/;"	c
PrettierVersion	cache-plug/vim-prettier/plugin/prettier.vim	/^command! -nargs=? -range=% PrettierVersion echom '1.0.0-beta'$/;"	c
PrevIndToken	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:PrevIndToken(lnum, i)$/;"	f
PrevLineOfCode	cache-plug/vim-polyglot/indent/lua.vim	/^function s:PrevLineOfCode(lnum)$/;"	f
PrevMatch	cache-plug/vim-polyglot/indent/sas.vim	/^function! s:PrevMatch(lnum, regex)$/;"	f
PrevNonBlank	cache-plug/vim-polyglot/indent/markdown.vim	/^function! s:PrevNonBlank(lnum)$/;"	f
PrevNonBlankNonComment	cache-plug/vim-polyglot/indent/mp.vim	/^function! s:PrevNonBlankNonComment(lnum)$/;"	f
PrevNonBlankNonString	cache-plug/vim-polyglot/indent/falcon.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
PrevNonBlankNonString	cache-plug/vim-polyglot/indent/json.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
PrevNonBlankNonString	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:PrevNonBlankNonString(lnum) abort$/;"	f
PrevNonBlankNonString	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
PrevNonBlankNonString	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
PrevNonMultilineString	cache-plug/vim-polyglot/indent/puppet.vim	/^function! s:PrevNonMultilineString(lnum)$/;"	f
PrevNonblank	cache-plug/vim-polyglot/autoload/pony.vim	/^function! s:PrevNonblank(lnum)$/;"	f
PreviousFile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
PreviousHunk	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
PreviousItem	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
PreviousNotMSL	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:PreviousNotMSL(msl_info) abort$/;"	f
PreviousSection	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
PreviousSectionEnd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
PreviousToken	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:PreviousToken(...)$/;"	f
Print	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f
Print	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f
ProjectDrawer	init.vim	/^augroup ProjectDrawer$/;"	a
ProjectParms	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:ProjectParms(projectUri)$/;"	f
ProjectionistDetect	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
Protect	cache-plug/fzf/src/protector/protector.go	/^func Protect() {$/;"	f
Protect	cache-plug/fzf/src/protector/protector_openbsd.go	/^func Protect() {$/;"	f
Pure	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:Pure(f,...)$/;"	f
PurifyCode	cache-plug/vim-polyglot/indent/pascal.vim	/^function! s:PurifyCode( line_num )$/;"	f
Push	cache-plug/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f
Push	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:Push(stack, token)$/;"	f
Push	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:Push(fct, kind)$/;"	f
PushSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:PushSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Python2Syntax	cache-plug/vim-polyglot/syntax/python.vim	/^command! -buffer Python2Syntax let b:python_version_2 = 1 | let &syntax=&syntax$/;"	c
Python2Syntax	cache-plug/vim-polyglot/syntax/python.vim	/^function! s:Python2Syntax()$/;"	f
Python3Syntax	cache-plug/vim-polyglot/syntax/python.vim	/^command! -buffer Python3Syntax let b:python_version_2 = 0 | let &syntax=&syntax$/;"	c
QualifiedTagJump	plugin/scala.vim	/^function! QualifiedTagJump() abort$/;"	f
QueryLog	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec) abort$/;"	f
QuickfixCreate	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
QuickfixGet	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
QuickfixSet	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
QuickfixStream	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, event, title, cmd, first, callback, ...) abort$/;"	f
QuickpickFilter	cache-plug/coc.nvim/autoload/coc/util.vim	/^    function! s:QuickpickFilter(id, key) closure$/;"	f
R	plugin/bepo.vim	/^noremap R L$/;"	m
REVISION	cache-plug/fzf/Makefile	/^REVISION       := $(FZF_REVISION)$/;"	m
REVISION	cache-plug/fzf/Makefile	/^REVISION       := $(shell git log -n 1 --pretty=format:%h -- $(SOURCES) 2> \/dev\/null)$/;"	m
ROOT_DIR	cache-plug/fzf/Makefile	/^ROOT_DIR       := $(shell dirname $(MAKEFILE))$/;"	m
Racket_visual_doc	cache-plug/vim-polyglot/ftplugin/racket.vim	/^function! s:Racket_visual_doc()$/;"	f
Random	cache-plug/vim-gitgutter/test/runner.vim	/^function Random(min, max)$/;"	f
RandomID	cache-plug/vim-polyglot/ftplugin/mma.vim	/^	function! RandomID()$/;"	f
Range	cache-plug/fzf/src/tokenizer.go	/^type Range struct {$/;"	t
ReactFiletypes	init.vim	/^augroup ReactFiletypes$/;"	a
Read	cache-plug/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f
Read	cache-plug/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f
ReadExec	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ReadExec(line1, count, range, mods, env, args, options) abort$/;"	f
ReadOnPath	cache-plug/vim-polyglot/syntax/ragel.vim	/^fun! <SID>ReadOnPath(script)$/;"	f
ReadPrepare	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ReadPrepare(line1, count, range, mods) abort$/;"	f
ReadSource	cache-plug/fzf/src/reader.go	/^func (r *Reader) ReadSource() {$/;"	f
Reader	cache-plug/fzf/src/reader.go	/^type Reader struct {$/;"	t
RebaseArgument	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
RebaseSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Refresh	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()          {}$/;"	f
Refresh	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f
Refresh	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f
Refresh	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f
Refresh	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f
RefreshWindows	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f
RefreshWindows	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f
RefreshWindows	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f
Relative	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
ReloadStatus	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus(...) abort$/;"	f
ReloadStatusBuffer	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer(...) abort$/;"	f
ReloadTabStatus	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus(...) abort$/;"	f
ReloadWinStatus	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
Remote	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Remote(dir) abort$/;"	f
Remove	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
RemoveITags	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
RemoveITags	cache-plug/vim-polyglot/indent/html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
RemoveTrailingComments	cache-plug/vim-polyglot/indent/solidity.vim	/^function s:RemoveTrailingComments(content)$/;"	f
RemoveTrailingComments	cache-plug/vim-polyglot/indent/typescript.vim	/^function s:RemoveTrailingComments(content)$/;"	f
Renderer	cache-plug/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	t
ReplaceAsStr	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:ReplaceAsStr(str, search, replacement, ...)$/;"	f
ReplaceCmd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
ReplaceExtendedRegexFactorWithNumberFactor	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:ReplaceExtendedRegexFactorWithNumberFactor(extendedregex)$/;"	f
ReplaceNumberFactorWithVimRegexFactor	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:ReplaceNumberFactorWithVimRegexFactor(halfway)$/;"	f
ReplaceRemainFactorWithVimRegexFactor	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:ReplaceRemainFactorWithVimRegexFactor(halfway)$/;"	f
Reset	cache-plug/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool, clearCache bool) {$/;"	f
Resize	cache-plug/fzf/src/tui/tui.go	/^	Resize$/;"	c
Resolve	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
ResolveExecutable	cache-plug/vim-prettier/autoload/prettier/resolver/executable.vim	/^function! s:ResolveExecutable(...) abort$/;"	f
RestoreShiftwidth	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:RestoreShiftwidth()$/;"	f
Result	cache-plug/fzf/src/algo/algo.go	/^type Result struct {$/;"	t
Result	cache-plug/fzf/src/result.go	/^type Result struct {$/;"	t
Resume	cache-plug/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool, bool) {}$/;"	f
Resume	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool, sigcont bool) {$/;"	f
Resume	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(clear bool, sigcont bool) {$/;"	f
Reverse	cache-plug/fzf/src/tui/dummy.go	/^	Reverse   = Attr(1 << 6)$/;"	c
Reverse	cache-plug/fzf/src/tui/tcell.go	/^	Reverse        = Attr(tcell.AttrReverse)$/;"	c
RevertSubcommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Reword	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Reword :<line1>,<line2>call s:choose('reword')$/;"	c
Right	cache-plug/fzf/src/tui/tui.go	/^	Right$/;"	c
RightClick	cache-plug/fzf/src/tui/tui.go	/^	RightClick$/;"	c
RmDir	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:RmDir(path)$/;"	f
RplGetFreeIndent	cache-plug/vim-polyglot/indent/rpl.vim	/^function RplGetFreeIndent()$/;"	f
RplGetIndent	cache-plug/vim-polyglot/indent/rpl.vim	/^function RplGetIndent(lnum)$/;"	f
RstFold	cache-plug/vim-polyglot/ftplugin/rst.vim	/^  augroup RstFold$/;"	a
RstFold#GetRstFold	cache-plug/vim-polyglot/autoload/RstFold.vim	/^function RstFold#GetRstFold()$/;"	f
RstFold#GetRstFoldText	cache-plug/vim-polyglot/autoload/RstFold.vim	/^function RstFold#GetRstFoldText()$/;"	f
RubyBalloonexpr	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! RubyBalloonexpr() abort$/;"	f
RubyCursorFile	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! RubyCursorFile() abort$/;"	f
RubyCursorIdentifier	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! RubyCursorIdentifier() abort$/;"	f
RubyCursorTag	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! RubyCursorTag() abort$/;"	f
Run	cache-plug/fzf/src/core.go	/^func Run(opts *Options, version string, revision string) {$/;"	f
Run	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:Run(dict, rustc_args, args)$/;"	f
RunBufDelete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:RunBufDelete(bufnr) abort$/;"	f
RunEdit	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEdit(state, job) abort$/;"	f
RunJobs	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:RunJobs() abort$/;"	f
RunOrmolu	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^function! RunOrmolu()$/;"	f
RunOrmolu	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^function! s:RunOrmolu()$/;"	f
RunReceive	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:RunReceive(state, job, data, ...) abort$/;"	f
RunRustfmt	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! s:RunRustfmt(command, tmpname, from_writepre)$/;"	f
RunSend	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSend(job, str) abort$/;"	f
RunTest	cache-plug/vim-gitgutter/test/runner.vim	/^function RunTest(test)$/;"	f
RunWait	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:RunWait(state, job) abort$/;"	f
Run_script_detection	cache-plug/vim-polyglot/tests/native.vim	/^func Run_script_detection(test_dict)$/;"	f
Rune	cache-plug/fzf/src/tui/tui.go	/^	Rune = iota$/;"	c
RuneWidth	cache-plug/fzf/src/util/util.go	/^func RuneWidth(r rune, prefixWidth int, tabstop int) int {$/;"	f
RunesToChars	cache-plug/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f
RustCargoQuickFixHooks	cache-plug/vim-polyglot/compiler/cargo.vim	/^augroup RustCargoQuickFixHooks$/;"	a
RustEmitAsm	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -nargs=* -buffer RustEmitAsm call rust#Emit("asm", <q-args>)$/;"	c
RustEmitIr	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -nargs=* -buffer RustEmitIr call rust#Emit("llvm-ir", <q-args>)$/;"	c
RustExpand	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -buffer RustExpand call rust#Expand(<bang>0, <q-args>)$/;"	c
RustFmt	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -bar -buffer RustFmt call rustfmt#Format()$/;"	c
RustFmtRange	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -range -buffer RustFmtRange call rustfmt#FormatRange(<line1>, <line2>)$/;"	c
RustInfo	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -bar RustInfo call rust#debugging#Info()$/;"	c
RustInfoToClipboard	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -bar RustInfoToClipboard call rust#debugging#InfoToClipboard()$/;"	c
RustInfoToFile	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -bar -nargs=1 RustInfoToFile call rust#debugging#InfoToFile(<f-args>)$/;"	c
RustPlay	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -range=% RustPlay :call rust#Play(<count>, <line1>, <line2>, <f-args>)$/;"	c
RustRun	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -nargs=* -complete=file -bang -buffer RustRun call rust#Run(<bang>0, <q-args>)$/;"	c
RustTest	cache-plug/vim-polyglot/ftplugin/rust.vim	/^command! -buffer -nargs=* -count -bang RustTest call rust#Test(<q-mods>, <count>, <bang>0, <q-args>)$/;"	c
RustfmtCommand	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtCommand()$/;"	f
RustfmtCommandRange	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtCommandRange(filename, line1, line2)$/;"	f
RustfmtConfigOptions	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtConfigOptions()$/;"	f
RustfmtWriteMode	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! s:RustfmtWriteMode()$/;"	f
S	cache-plug/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -range S :<line1>,<line2>call <SID>Esubstitute(<q-args>) <Bar> :noh$/;"	c
S	plugin/bepo.vim	/^noremap S K$/;"	m
SDown	cache-plug/fzf/src/tui/tui.go	/^	SDown$/;"	c
SED	cache-plug/delimitMate/Makefile	/^SED      =  $(shell command -v gsed || command -v sed)$/;"	m
SID	cache-plug/vim-buftabline/plugin/buftabline.vim	/^function s:SID()$/;"	f
SLeft	cache-plug/fzf/src/tui/tui.go	/^	SLeft$/;"	c
SOURCES	cache-plug/delimitMate/Makefile	/^SOURCES  =  $(PLUGIN)$/;"	m
SOURCES	cache-plug/fzf/Makefile	/^SOURCES        := $(wildcard *.go src\/*.go src\/*\/*.go) $(MAKEFILE)$/;"	m
SQLGetType	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    command! -nargs=0 SQLGetType :call SQL_GetType()$/;"	c
SQLSetType	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    command! -nargs=* -complete=custom,SQL_GetList SQLSetType :call SQL_SetType(<q-args>)$/;"	c
SQL_GetList	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    function SQL_GetList(ArgLead, CmdLine, CursorPos)$/;"	f
SQL_GetType	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    function SQL_GetType()$/;"	f
SQL_SetType	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    function SQL_SetType(name)$/;"	f
SRight	cache-plug/fzf/src/tui/tui.go	/^	SRight$/;"	c
SUp	cache-plug/fzf/src/tui/tui.go	/^	SUp$/;"	c
Safe_indent	cache-plug/vim-polyglot/indent/awk.vim	/^function! s:Safe_indent( base, wordlen, this_line )$/;"	f
SassIncludeExpr	cache-plug/vim-polyglot/ftplugin/sass.vim	/^function! SassIncludeExpr(file) abort$/;"	f
SaveVimSesn	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:SaveVimSesn()$/;"	f
ScratchBufBuild	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:ScratchBufBuild(src, vert, size)$/;"	f
ScratchBufUpdate	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:ScratchBufUpdate(buf, text)$/;"	f
Search	cache-plug/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f
SearchCode	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:SearchCode(lnum, regex)$/;"	f
SearchEndPair	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:SearchEndPair(lnum, curr_col)$/;"	f
SearchLoop	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:SearchLoop(pat,flags,expr)$/;"	f
SearchMatchingKeyword	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:SearchMatchingKeyword(startlnum, open, close)$/;"	f
SearchOptions	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:SearchOptions(...) abort$/;"	f
SearchP	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:SearchP()$/;"	f
SearchPair	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:SearchPair(startlnum, lookback, skip, open, close)$/;"	f
SearchPair	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:SearchPair(lnum, curr_col, start, middle, end)$/;"	f
SearchPair	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:SearchPair(start, end)$/;"	f
SearchPair	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:SearchPair(start, end)$/;"	f
SearchSection	cache-plug/vim-polyglot/ftplugin/j.vim	/^function! s:SearchSection(end, backwards, visualmode) abort$/;"	f
SearchTestFunctionNameUnderCursor	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:SearchTestFunctionNameUnderCursor() abort$/;"	f
Seems_continuing	cache-plug/vim-polyglot/indent/awk.vim	/^function! s:Seems_continuing( line )$/;"	f
SelectAll	cache-plug/vim-polyglot/extras/menu.vim	/^func s:SelectAll()$/;"	f
Selection	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
Set	cache-plug/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f
Set	cache-plug/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f
SetDefault	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^function! s:SetDefault(name, value)$/;"	f
SetErlangOptions	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^function s:SetErlangOptions()$/;"	f
SetMakePrg	cache-plug/vim-polyglot/compiler/coffee.vim	/^function! s:SetMakePrg()$/;"	f
SetMakePrg	cache-plug/vim-polyglot/compiler/ls.vim	/^function! s:SetMakePrg()$/;"	f
SetModifiers	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:SetModifiers(mods)$/;"	f
SetNonblock	cache-plug/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f
SetNonblock	cache-plug/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f
SetUp	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function SetUp()$/;"	f
SetexToAtx	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer -range=% SetexToAtx call s:SetexToAtx(<line1>, <line2>)$/;"	c
SetexToAtx	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:SetexToAtx(line1, line2)$/;"	f
Setf	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^func! s:Setf(ft)$/;"	f
SetupColorSchemes	cache-plug/vim-polyglot/extras/menu.vim	/^func s:SetupColorSchemes() abort$/;"	f
SetupCompilers	cache-plug/vim-polyglot/extras/menu.vim	/^func s:SetupCompilers() abort$/;"	f
SetupKeymaps	cache-plug/vim-polyglot/extras/menu.vim	/^  func s:SetupKeymaps() abort$/;"	f
SetupLazyloadMenus	cache-plug/vim-polyglot/extras/menu.vim	/^  augroup SetupLazyloadMenus$/;"	a
SetupLazyloadMenus	cache-plug/vim-polyglot/extras/menu.vim	/^  func s:SetupLazyloadMenus()$/;"	f
Shell	cache-plug/fzf/test/test_go.rb	/^class Shell$/;"	c
ShellTokenize	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:ShellTokenize(text)$/;"	f
ShiftWidth	cache-plug/vim-polyglot/indent/coffee.vim	/^  function! s:ShiftWidth()$/;"	f
ShouldSkip	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:ShouldSkip(startlnum, lnum, col)$/;"	f
ShouldSkip	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:ShouldSkip(startlinenum, linenum, col)$/;"	f
ShouldSkip	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:ShouldSkip(startlinenum, linenum, col)$/;"	f
ShowInfo	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:ShowInfo()$/;"	f
ShowUsage	cache-plug/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	cache-plug/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Shuffle	cache-plug/vim-gitgutter/test/runner.vim	/^function Shuffle(list)$/;"	f
SimplifyAdjacentCollections	cache-plug/vim-polyglot/syntax/yaml.vim	/^function s:SimplifyAdjacentCollections(p)$/;"	f
SimplifyToAssumeAllPrintable	cache-plug/vim-polyglot/syntax/yaml.vim	/^function s:SimplifyToAssumeAllPrintable(p)$/;"	f
SkipBlanksAndComments	cache-plug/vim-polyglot/indent/d.vim	/^function! SkipBlanksAndComments(startline)$/;"	f
SkipExpr	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:SkipExpr(startlinenum)$/;"	f
SkipExpr	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:SkipExpr(startlinenum)$/;"	f
SkipFunc	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:SkipFunc()$/;"	f
SkipJavaBlanksAndComments	cache-plug/vim-polyglot/indent/java.vim	/^function! SkipJavaBlanksAndComments(startline)$/;"	f
SkipPattern	cache-plug/vim-polyglot/indent/sml.vim	/^function! s:SkipPattern(lnum, pat)$/;"	f
Slab	cache-plug/fzf/src/util/slab.go	/^type Slab struct {$/;"	t
Slash	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Slash(path) abort$/;"	f
Slash	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! s:Slash(path) abort$/;"	f
Sleuth	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  command! -bar -bang Sleuth call s:detect_indent()$/;"	c
SleuthIndicator	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  func! SleuthIndicator() abort$/;"	f
SmartSearch	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:SmartSearch(linenum, regex)$/;"	f
SmartSearch	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:SmartSearch(linenum, regex)$/;"	f
Snapshot	cache-plug/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot() ([]*Chunk, int) {$/;"	f
SpecChangelog	cache-plug/vim-polyglot/ftplugin/spec.vim	/^	function s:SpecChangelog(format)$/;"	f
SpellDel	cache-plug/vim-polyglot/extras/menu.vim	/^  func s:SpellDel()$/;"	f
SpellLang	cache-plug/vim-polyglot/extras/menu.vim	/^  func s:SpellLang()$/;"	f
SpellPopup	cache-plug/vim-polyglot/extras/menu.vim	/^  func s:SpellPopup()$/;"	f
SpellPopupMenu	cache-plug/vim-polyglot/extras/menu.vim	/^  augroup SpellPopupMenu$/;"	a
SpellReplace	cache-plug/vim-polyglot/extras/menu.vim	/^  func s:SpellReplace(n)$/;"	f
Split	cache-plug/vim-polyglot/syntax/ragel.vim	/^function! <SID>Split(path) abort " {{{1$/;"	f
SplitExpand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpand(string, ...) abort$/;"	f
SplitExpandChain	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
Squash	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^command! -buffer -bar -range Squash :<line1>,<line2>call s:choose('squash')$/;"	c
SquashArgument	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
StageApply	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
StageArgs	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
StageDelete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
StageDiff	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
StageDiffEdit	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
StageIgnore	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
StageInfo	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
StageInline	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
StageJump	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
StagePatch	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StageReveal	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
StageSeek	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
StarSetf	cache-plug/vim-polyglot/extras/filetype.vim	/^func! s:StarSetf(ft)$/;"	f
StarSetf	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^func! s:StarSetf(ft)$/;"	f
StartOfFile	cache-plug/vim-polyglot/indent/ruby.vim	/^function! s:StartOfFile(pline_info) abort$/;"	f
StartStructure	cache-plug/vim-polyglot/indent/twig.vim	/^function! s:StartStructure(name)$/;"	f
Starts_with_word	cache-plug/vim-polyglot/indent/awk.vim	/^function! s:Starts_with_word( line )$/;"	f
StatementIndent	cache-plug/vim-polyglot/indent/ada.vim	/^function s:StatementIndent( current_indent, prev_lnum )$/;"	f
StatusCfile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
StatusCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
String	cache-plug/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f
String	cache-plug/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f
String	cache-plug/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f
String	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f
StripTrailingWhitespace	cache-plug/vim-polyglot/ftplugin/dhall.vim	/^function! StripTrailingWhitespace()$/;"	f
Style	cache-plug/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f
Stylus	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^command! Stylus !clear; cat % | stylus$/;"	c
Subcommands	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Subcommands() abort$/;"	f
SuffixMatch	cache-plug/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int) {$/;"	f
SuperSub	cache-plug/vim-polyglot/syntax/tex.vim	/^  fun! s:SuperSub(group,leader,pat,cchar)$/;"	f
SvgIndentGet	cache-plug/vim-polyglot/indent/svg.vim	/^fun! SvgIndentGet(lnum, use_syntax_check)$/;"	f
SvgIndentSum	cache-plug/vim-polyglot/indent/svg.vim	/^fun! <SID>SvgIndentSum(lnum, style, add)$/;"	f
SvgIndentSynCheck	cache-plug/vim-polyglot/indent/svg.vim	/^fun! <SID>SvgIndentSynCheck(lnum)$/;"	f
SvgIndentWithPattern	cache-plug/vim-polyglot/indent/svg.vim	/^fun! <SID>SvgIndentWithPattern(line, pat)$/;"	f
Swap	cache-plug/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f
Swap	cache-plug/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f
Swap	cache-plug/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f
Swap	cache-plug/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f
SwiftIndent	cache-plug/vim-polyglot/indent/swift.vim	/^function! SwiftIndent(...)$/;"	f
SwitchWindow	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^function! s:SwitchWindow(buf)$/;"	f
SynAt	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:SynAt(l,c)$/;"	f
SynAttrXMLish	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^fu! SynAttrXMLish(synattr)$/;"	f
SynDisplay	cache-plug/vim-polyglot/syntax/inform.vim	/^command -nargs=+ SynDisplay syntax <args> display$/;"	c
SynEOL	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^fu! SynEOL(lnum)$/;"	f
SynFold	cache-plug/vim-polyglot/syntax/crystal.vim	/^com! -nargs=* SynFold call s:run_syntax_fold(<q-args>)$/;"	c
SynFold	cache-plug/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFold <args> fold$/;"	c
SynFold	cache-plug/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFold <args>$/;"	c
SynFold	cache-plug/vim-polyglot/syntax/ruby.vim	/^com! -nargs=* SynFold call s:run_syntax_fold(<q-args>)$/;"	c
SynFold	cache-plug/vim-polyglot/syntax/yacc.vim	/^ com! -nargs=+ SynFold	<args> fold$/;"	c
SynFold	cache-plug/vim-polyglot/syntax/yacc.vim	/^ com! -nargs=+ SynFold	<args>$/;"	c
SynFoldDoc	cache-plug/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFoldDoc <args> fold$/;"	c
SynFoldDoc	cache-plug/vim-polyglot/syntax/php.vim	/^  command! -nargs=+ SynFoldDoc <args>$/;"	c
SynOnOff	cache-plug/vim-polyglot/extras/menu.vim	/^    fun s:SynOnOff()$/;"	f
SynSOL	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^fu! SynSOL(lnum)$/;"	f
SynTSXBlockEnd	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^fu! SynTSXBlockEnd(syns)$/;"	f
SynTSXContinues	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^fu! SynTSXContinues(cursyn, prevsyn)$/;"	f
SynTSXDepth	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^fu! SynTSXDepth(syns)$/;"	f
SynXMLish	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^fu! SynXMLish(syns)$/;"	f
SyncAutocmd	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:SyncAutocmd(...)$/;"	f
SyntaxCheckers_nim_nim_GetLocList	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! SyntaxCheckers_nim_nim_GetLocList() abort$/;"	f
SyntaxCheckers_nim_nim_IsAvailable	cache-plug/vim-polyglot/autoload/nim.vim	/^function! SyntaxCheckers_nim_nim_IsAvailable() abort$/;"	f
SyntaxInclude	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:SyntaxInclude(filetype)$/;"	f
SyntaxName	cache-plug/vim-polyglot/indent/coffee.vim	/^function! s:SyntaxName(lnum, col)$/;"	f
SyntaxName	cache-plug/vim-polyglot/indent/ls.vim	/^function! s:SyntaxName(linenum, col)$/;"	f
SyntaxName	cache-plug/vim-polyglot/indent/moon.vim	/^function! s:SyntaxName(linenum, col)$/;"	f
SyntaxName	cache-plug/vim-polyglot/indent/swift.vim	/^function! s:SyntaxName()$/;"	f
SyntaxNameAtPosition	cache-plug/vim-polyglot/indent/swift.vim	/^function! s:SyntaxNameAtPosition(line, column)$/;"	f
SystemError	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
SystemVerilogIndent	cache-plug/vim-polyglot/indent/systemverilog.vim	/^function SystemVerilogIndent()$/;"	f
T	plugin/bepo.vim	/^noremap T J$/;"	m
TAGS_FILE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TAPTestLine_foldtext	cache-plug/vim-polyglot/syntax/tap.vim	/^function! TAPTestLine_foldtext()$/;"	f
Tab	cache-plug/fzf/src/tui/tui.go	/^	Tab$/;"	c
Tab	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:Tab()$/;"	f
TableFormat	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer TableFormat call s:TableFormat()$/;"	c
TableFormat	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:TableFormat()$/;"	f
Tag	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^function! s:Tag()$/;"	f
TagFiles	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:TagFiles()$/;"	f
TcellWindow	cache-plug/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	t
TearDown	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function TearDown()$/;"	f
TempCmd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:TempCmd(out, cmd) abort$/;"	f
TempReadPost	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
TempReadPre	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
TempScript	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:TempScript(...) abort$/;"	f
TempState	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
Terminal	cache-plug/fzf/src/terminal.go	/^type Terminal struct {$/;"	t
Terraform	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^command! -nargs=+ -complete=custom,terraform#commands -buffer Terraform$/;"	c
TerraformFmt	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^command! -nargs=0 -buffer TerraformFmt call terraform#fmt()$/;"	c
TerraformIndent	cache-plug/vim-polyglot/indent/terraform.vim	/^function! TerraformIndent(lnum)$/;"	f
Test	cache-plug/vim-polyglot/ftplugin/mma.vim	/^	function! Test()$/;"	f
TestAdditiveExpect	cache-plug/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f
TestAnsiCodeStringConversion	cache-plug/fzf/src/ansi_test.go	/^func TestAnsiCodeStringConversion(t *testing.T) {$/;"	f
TestAtomicBool	cache-plug/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f
TestBase	cache-plug/fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	cache-plug/fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c
TestBind	cache-plug/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f
TestCacheKey	cache-plug/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f
TestCacheable	cache-plug/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f
TestCaseSensitivity	cache-plug/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f
TestCharsLength	cache-plug/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f
TestCharsToString	cache-plug/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f
TestChunkCache	cache-plug/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f
TestChunkList	cache-plug/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f
TestColorOffset	cache-plug/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f
TestColorSpec	cache-plug/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f
TestContrain	cache-plug/fzf/src/util/util_test.go	/^func TestContrain(t *testing.T) {$/;"	f
TestDefaultCtrlNP	cache-plug/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f
TestDelimiterRegex	cache-plug/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f
TestDelimiterRegexRegex	cache-plug/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f
TestDelimiterRegexString	cache-plug/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f
TestEmptyMerger	cache-plug/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f
TestEmptyPattern	cache-plug/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f
TestEqual	cache-plug/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f
TestEventBox	cache-plug/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f
TestExact	cache-plug/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f
TestExactMatchNaive	cache-plug/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f
TestExactMatchNaiveBackward	cache-plug/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f
TestExtension	cache-plug/vim-polyglot/tests/extensions.vim	/^function! TestExtension(filetype, filename, content)$/;"	f
TestExtractColor	cache-plug/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f
TestFiletype	cache-plug/vim-polyglot/tests/filetypes.vim	/^func! TestFiletype(filetype)$/;"	f
TestFiletypeFuncs	cache-plug/vim-polyglot/extras/filetype.vim	/^func! TestFiletypeFuncs(testlist)$/;"	f
TestFish	cache-plug/fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c
TestFuzzyMatch	cache-plug/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f
TestFuzzyMatchBackward	cache-plug/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f
TestGoFZF	cache-plug/fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c	class:TestBase
TestHexToColor	cache-plug/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f
TestHistory	cache-plug/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f
TestIrrelevantNth	cache-plug/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f
TestLongString	cache-plug/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f
TestMax	cache-plug/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f
TestMergerSorted	cache-plug/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f
TestMergerUnsorted	cache-plug/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f
TestNormalize	cache-plug/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f
TestOffsetSort	cache-plug/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f
TestOnce	cache-plug/fzf/src/util/util_test.go	/^func TestOnce(t *testing.T) {$/;"	f
TestOrigTextAndTransformed	cache-plug/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f
TestParseKeys	cache-plug/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f
TestParseKeysWithComma	cache-plug/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f
TestParseRange	cache-plug/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f
TestParseTermsEmpty	cache-plug/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f
TestParseTermsExtended	cache-plug/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f
TestParseTermsExtendedExact	cache-plug/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f
TestPrefixMatch	cache-plug/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f
TestPreviewOpts	cache-plug/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f
TestQuoteEntryCmd	cache-plug/fzf/src/terminal_test.go	/^func TestQuoteEntryCmd(t *testing.T) {$/;"	f
TestRankComparison	cache-plug/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f
TestReadFromCommand	cache-plug/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f
TestReplacePlaceholder	cache-plug/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f
TestResultRank	cache-plug/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f
TestShell	cache-plug/fzf/test/test_go.rb	/^module TestShell$/;"	m	class:TestBase
TestSplitNth	cache-plug/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f
TestStringPtr	cache-plug/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f
TestSuffixMatch	cache-plug/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f
TestToCharsAscii	cache-plug/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f
TestToggle	cache-plug/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f
TestTokenize	cache-plug/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f
TestTransform	cache-plug/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f
TestTransformIndexOutOfBounds	cache-plug/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f
TestTrimLength	cache-plug/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f
TestValidateSign	cache-plug/fzf/src/options_test.go	/^func TestValidateSign(t *testing.T) {$/;"	f
TestZsh	cache-plug/fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c
Test_add_lines	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines()$/;"	f
Test_add_lines_fish	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines_fish()$/;"	f
Test_around_text_object	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_around_text_object()$/;"	f
Test_common_prefix	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_prefix()$/;"	f
Test_common_suffix	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_suffix()$/;"	f
Test_conf_type	cache-plug/vim-polyglot/tests/native.vim	/^func Test_conf_type()$/;"	f
Test_detection	cache-plug/vim-polyglot/tests/native.vim	/^func Test_detection()$/;"	f
Test_diff_highlight	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_diff_highlight()$/;"	f
Test_edit_file_with_same_name_as_a_branch	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_edit_file_with_same_name_as_a_branch()$/;"	f
Test_empty_file	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_empty_file()$/;"	f
Test_emptybuf_ftdetect	cache-plug/vim-polyglot/tests/native.vim	/^func Test_emptybuf_ftdetect()$/;"	f
Test_encoding	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_encoding()$/;"	f
Test_file_added_to_git	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_added_to_git()$/;"	f
Test_filename_leading_dash	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_leading_dash()$/;"	f
Test_filename_umlaut	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_umlaut()$/;"	f
Test_filename_with_equals	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_equals()$/;"	f
Test_filename_with_square_brackets	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_square_brackets()$/;"	f
Test_filetype_indent_off	cache-plug/vim-polyglot/tests/native.vim	/^func Test_filetype_indent_off()$/;"	f
Test_fix_file_references	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_fix_file_references()$/;"	f
Test_foldtext	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_foldtext()$/;"	f
Test_follow_symlink	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_follow_symlink()$/;"	f
Test_hook_file	cache-plug/vim-polyglot/tests/native.vim	/^func Test_hook_file()$/;"	f
Test_hunk_outside_noop	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_outside_noop()$/;"	f
Test_hunk_stage	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage()$/;"	f
Test_hunk_stage_nearby_hunk	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_nearby_hunk()$/;"	f
Test_hunk_stage_partial_cmd_added	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_cmd_added()$/;"	f
Test_hunk_stage_partial_preview_added	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added()$/;"	f
Test_hunk_stage_partial_preview_added_removed	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added_removed()$/;"	f
Test_hunk_stage_partial_visual_added	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_visual_added()$/;"	f
Test_hunk_stage_preview_write	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_preview_write()$/;"	f
Test_hunk_undo	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo()$/;"	f
Test_hunk_undo_dos	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo_dos()$/;"	f
Test_inner_text_object	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_inner_text_object()$/;"	f
Test_keep_alt	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_alt()$/;"	f
Test_keep_modified	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_modified()$/;"	f
Test_keep_op_marks	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_op_marks()$/;"	f
Test_lcs	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_lcs()$/;"	f
Test_modify_lines	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_modify_lines()$/;"	f
Test_no_modifications	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_no_modifications()$/;"	f
Test_orphaned_signs	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_orphaned_signs()$/;"	f
Test_other_type	cache-plug/vim-polyglot/tests/native.vim	/^func Test_other_type()$/;"	f
Test_overlapping_hunk_op	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunk_op()$/;"	f
Test_overlapping_hunks	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunks()$/;"	f
Test_preview	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview()$/;"	f
Test_preview_dos	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview_dos()$/;"	f
Test_priority	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_priority()$/;"	f
Test_quickfix	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_quickfix()$/;"	f
Test_remove_first_lines	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_first_lines()$/;"	f
Test_remove_lines	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_lines()$/;"	f
Test_script_detection	cache-plug/vim-polyglot/tests/native.vim	/^func Test_script_detection()$/;"	f
Test_setfiletype_completion	cache-plug/vim-polyglot/tests/native.vim	/^func Test_setfiletype_completion()$/;"	f
Test_split	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_split()$/;"	f
Test_undo_nearby_hunk	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_undo_nearby_hunk()$/;"	f
Test_untracked_file_outside_repo	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_outside_repo()$/;"	f
Test_untracked_file_square_brackets_within_repo	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_square_brackets_within_repo()$/;"	f
Test_untracked_file_within_repo	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_within_repo()$/;"	f
Test_user_autocmd	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_user_autocmd()$/;"	f
Test_write_option	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function Test_write_option()$/;"	f
TexFold	cache-plug/vim-polyglot/syntax/tex.vim	/^ com! -nargs=* TexFold <args> $/;"	c
TexFold	cache-plug/vim-polyglot/syntax/tex.vim	/^ com! -nargs=* TexFold <args> fold $/;"	c
TexNewMathZone	cache-plug/vim-polyglot/syntax/tex.vim	/^ fun! TexNewMathZone(sfx,mathzone,starform)$/;"	f
TextDocumentIdentifier	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:TextDocumentIdentifier(path)$/;"	f
TextDocumentPositionParams	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:TextDocumentPositionParams(documentUri, line, character)$/;"	f
TextWidth	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:TextWidth()$/;"	f
TextilePreview	cache-plug/vim-polyglot/ftplugin/textile.vim	/^command! -nargs=0 TextilePreview call TextileRenderBufferToPreview()$/;"	c
TextileRender	cache-plug/vim-polyglot/ftplugin/textile.vim	/^function! TextileRender(lines)$/;"	f
TextileRenderBufferToFile	cache-plug/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderBufferToFile()$/;"	f
TextileRenderBufferToPreview	cache-plug/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderBufferToPreview()$/;"	f
TextileRenderBufferToTab	cache-plug/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderBufferToTab()$/;"	f
TextileRenderFile	cache-plug/vim-polyglot/ftplugin/textile.vim	/^command! -nargs=0 TextileRenderFile call TextileRenderBufferToFile()$/;"	c
TextileRenderFile	cache-plug/vim-polyglot/ftplugin/textile.vim	/^function! TextileRenderFile(lines, filename)$/;"	f
TextileRenderTab	cache-plug/vim-polyglot/ftplugin/textile.vim	/^command! -nargs=0 TextileRenderTab call TextileRenderBufferToTab()$/;"	c
Tmux	cache-plug/fzf/test/test_go.rb	/^class Tmux$/;"	c
ToChars	cache-plug/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f
ToRunes	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f
ToString	cache-plug/fzf/src/ansi.go	/^func (s *ansiState) ToString() string {$/;"	f
ToString	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f
Toc	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer Toc call s:Toc()$/;"	c
Toc	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:Toc(...)$/;"	f
Toch	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer Toch call s:Toc('horizontal')$/;"	c
Toct	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer Toct call s:Toc('tab')$/;"	c
Tocv	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^command! -buffer Tocv call s:Toc('vertical')$/;"	c
ToggleGuiOption	cache-plug/vim-polyglot/extras/menu.vim	/^fun! s:ToggleGuiOption(option)$/;"	f
ToggleOrmolu	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^function! ToggleOrmolu()$/;"	f
Token	cache-plug/fzf/src/tokenizer.go	/^type Token struct {$/;"	t
Token	cache-plug/vim-polyglot/indent/javascript.vim	/^function s:Token()$/;"	f
Tokenize	cache-plug/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f
TokenizeLine	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:TokenizeLine(lnum, direction)$/;"	f
ToolBar.Paste		<C-R>+	cache-plug/vim-polyglot/extras/menu.vim	/^  cnoremenu	 ToolBar.Paste		<C-R>+$/;"	m
ToolBar.Print		:hardcopy<CR>	cache-plug/vim-polyglot/extras/menu.vim	/^    vnoremenu ToolBar.Print		:hardcopy<CR>$/;"	m
ToolBar.Print		:w	cache-plug/vim-polyglot/extras/menu.vim	/^    vnoremenu ToolBar.Print		:w !lpr<CR>$/;"	m
ToolBar.Replace		y:promptrepl	cache-plug/vim-polyglot/extras/menu.vim	/^    vnoremenu ToolBar.Replace		y:promptrepl <C-R>=<SID>FixFText()<CR><CR>$/;"	m
ToolItems	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolItems(state, from, to, offsets, text, ...) abort$/;"	f
ToolParse	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolParse(state, line) abort$/;"	f
ToolStream	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort$/;"	f
ToolToFrom	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolToFrom(str) abort$/;"	f
Top	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f
Top	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f
TrailingWhitespaces	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f
Transform	cache-plug/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f
TraverseAncestorDirSearch	cache-plug/vim-prettier/autoload/prettier/resolver/executable.vim	/^function! s:TraverseAncestorDirSearch(rootDir) abort$/;"	f
Tree	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
Tree	cache-plug/vim-fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
TreeChomp	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
TreeInfo	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
TriggerAbb	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:TriggerAbb() "{{{$/;"	f
Trim	cache-plug/vim-polyglot/indent/qml.vim	/^function! Trim(line)$/;"	f
TrimLength	cache-plug/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f
TrimLength	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f
TrimTrailingWhitespaces	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) TrimTrailingWhitespaces() {$/;"	f
TrimWhiteSpace	plugin/haskell.vim	/^function TrimWhiteSpace()$/;"	f
TsIncludeExpr	cache-plug/vim-polyglot/ftplugin/typescript.vim	/^function! TsIncludeExpr(file)$/;"	f
UNAME_M	cache-plug/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UPDATED_SOURCE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
UnIndentByInd	cache-plug/vim-polyglot/indent/autohotkey.vim	/^function! UnIndentByInd(indent)$/;"	f
Underline	cache-plug/fzf/src/tui/dummy.go	/^	Underline = Attr(1 << 3)$/;"	c
Underline	cache-plug/fzf/src/tui/tcell.go	/^	Underline      = Attr(tcell.AttrUnderline)$/;"	c
UnexpectedToken	cache-plug/vim-polyglot/indent/erlang.vim	/^function! s:UnexpectedToken(token, stack)$/;"	f
Unfinalise	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function Unfinalise()$/;"	f
UnfinaliseMenu	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>UnfinaliseMenu()$/;"	f
Uniq	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
UnletStack	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! s:UnletStack()$/;"	f
Unlock	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unmap	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:Unmap() " {{{$/;"	f
Unwatch	cache-plug/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f
Up	cache-plug/fzf/src/tui/tui.go	/^	Up$/;"	c
UpdateCount	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, failedCommand *string) {$/;"	f
UpdateHeader	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f
UpdateIndex	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function s:UpdateIndex(dir, info) abort$/;"	f
UpdateList	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger, reset bool) {$/;"	f
UpdateMakePrg	cache-plug/vim-polyglot/compiler/coffee.vim	/^  function! s:UpdateMakePrg()$/;"	f
UpdateMakePrg	cache-plug/vim-polyglot/compiler/ls.vim	/^  function! s:UpdateMakePrg()$/;"	f
UpdateNimLog	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! s:UpdateNimLog() abort$/;"	f
UpdateProgress	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f
Urgency	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function Urgency(urg)$/;"	f
UsableWin	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
Usage	cache-plug/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
UserCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommand(...) abort$/;"	f
UserCommandList	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
V	cache-plug/vim-polyglot/scripts/eregex.vim	/^command! -nargs=? -range=% V :<line1>,<line2>call <SID>Evglobal(<q-args>)$/;"	c
VERSION	cache-plug/delimitMate/Makefile	/^VERSION  =  $(shell $(SED) -n -e '\/Current \\+release\/{s\/^ \\+\\([0-9.]\\+\\).*\/\\1\/;p;}' $(firstword $(DOC)))$/;"	m
VERSION	cache-plug/fzf/Makefile	/^VERSION        := $(FZF_VERSION)$/;"	m
VERSION	cache-plug/fzf/Makefile	/^VERSION        := $(shell git describe --abbrev=0 2> \/dev\/null)$/;"	m
VERSION	cache-plug/vim-prettier/Makefile	/^VERSION=1.0.0-beta$/;"	m
VERSION_REGEX	cache-plug/fzf/Makefile	/^VERSION_REGEX  := $(subst .,\\.,$(VERSION_TRIM))$/;"	m
VERSION_TRIM	cache-plug/fzf/Makefile	/^VERSION_TRIM   := $(shell sed "s\/-.*\/\/" <<< $(VERSION))$/;"	m
VIM	cache-plug/delimitMate/Makefile	/^VIM      =  vim$/;"	m
ValaCodingStyle	cache-plug/vim-polyglot/ftplugin/vala.vim	/^command! -buffer -bar ValaCodingStyle call ValaCodingStyle()$/;"	c
ValaCodingStyle	cache-plug/vim-polyglot/ftplugin/vala.vim	/^function! ValaCodingStyle() abort$/;"	f
ValidMatchEnd	cache-plug/vim-polyglot/indent/mp.vim	/^function! s:ValidMatchEnd(line, pat, start)$/;"	f
VbGetIndent	cache-plug/vim-polyglot/indent/vb.vim	/^fun! VbGetIndent(lnum)$/;"	f
VbSearch	cache-plug/vim-polyglot/ftplugin/vb.vim	/^fun! <SID>VbSearch(pattern, flags)$/;"	f
VersionAwareNetrwBrowseX	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:VersionAwareNetrwBrowseX(url)$/;"	f
VisMove	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^function! s:VisMove(f)$/;"	f
VlangIndent	cache-plug/vim-polyglot/indent/vlang.vim	/^function! VlangIndent(lnum) abort$/;"	f
W	plugin/bepo.vim	/^noremap W <C-w><C-w>$/;"	m
Wait	cache-plug/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f
WaitFor	cache-plug/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f
WarnIfNotUnfinalised	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function <SID>WarnIfNotUnfinalised()$/;"	f
Warning	cache-plug/vim-polyglot/syntax/csv.vim	/^fu! <sid>Warning(msg) "{{{3$/;"	f
Watch	cache-plug/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f
Weight	cache-plug/vim-polyglot/indent/mp.vim	/^function! s:Weight(line)$/;"	f
Width	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f
Width	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f
WinShellEsc	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:WinShellEsc(arg) abort$/;"	f
Window	cache-plug/fzf/src/tui/tui.go	/^type Window interface {$/;"	t
WithAttr	cache-plug/fzf/src/tui/tui.go	/^func (p ColorPair) WithAttr(attr Attr) ColorPair {$/;"	f
WithPath	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:WithPath(func, ...)$/;"	f
WorkspaceLoadParms	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:WorkspaceLoadParms(files)$/;"	f
WorkspacePeekRequest	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:WorkspacePeekRequest(directory, deep, excludedDirs)$/;"	f
X	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f
X	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f
Xf86confdeclopt	cache-plug/vim-polyglot/syntax/xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained nextgroup=xf86confValue,xf86confComment skipwhite$/;"	c
Xf86confdeclopt	cache-plug/vim-polyglot/syntax/xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained$/;"	c
XxdBack	cache-plug/vim-polyglot/extras/menu.vim	/^func s:XxdBack()$/;"	f
XxdConv	cache-plug/vim-polyglot/extras/menu.vim	/^func s:XxdConv()$/;"	f
XxdFind	cache-plug/vim-polyglot/extras/menu.vim	/^func s:XxdFind()$/;"	f
Y	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f
Y	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f
ZimbuGoEndBlock	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^func! ZimbuGoEndBlock()$/;"	f
ZimbuGoStartBlock	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^func! ZimbuGoStartBlock()$/;"	f
[#	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> [# :call search('^\\s*#\\@!', "bW")<CR>$/;"	m
[<C-D>	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> [<C-D>      :<C-U>exe <SID>jump('edit',v:count)<SID>foldopen<CR>$/;"	m
[M	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','n')<CR>$/;"	m
[[	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>[[ <Plug>(llvm-prev-section-begin)$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^noremap <silent><buffer> [[ ?^\\*\\a<CR>:nohlsearch<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> [[ m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z0-9-]\\+\\s\\+\\%(division\\<Bar>section\\)\\s*\\.','bW')<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> [[ :call search('^\\s*sub\\>', "bW")<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^nnoremap <silent> <buffer> [[ :<C-U>call <SID>sectionmovement('{{','b','n',v:count1)<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/j.vim	/^noremap <buffer> <silent> [[ :<C-U>call <SID>SearchSection(0, 1, '')<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:false) <CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:true)  <CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:false) <CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:true)  <CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/rust.vim	/^nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/rust.vim	/^onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/scala.vim	/^noremap <script> <buffer> <silent> [[ :call <SID>NextSection(1)<cr>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/sql.vim	/^nnoremap <buffer> <silent> [[ :call search('\\c^\\s*begin\\>', 'bW' )<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/vb.vim	/^nnoremap <buffer> <silent> [[ :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(function\\\\|sub\\)', 'bW')<cr>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^noremap  <buffer><silent>[[ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\%(\\\\<end\\\\s\\\\+\\\\)\\\\@<!\\\\<".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%^","bW")')<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^vnoremap <buffer><silent>[[ :<C-u>cal <SID>CountWrapper('[[')<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [[ :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'bW')<CR>$/;"	m
[[	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^  nnoremap <silent> <buffer> [[ m`:call ZimbuGoStartBlock()<CR>$/;"	m
[]	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>[] <Plug>(llvm-prev-section-end)$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> [] m':call <SID>toend('b')<CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> [] :call search('^\\s*endsub\\>', "bW")<CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/j.vim	/^noremap <buffer> <silent> [] :<C-U>call <SID>SearchSection(1, 1, '')<CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:false) <CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:true)  <CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:false) <CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:true)  <CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/sql.vim	/^nnoremap <buffer> <silent> [] :call search('\\c^\\s*end\\W*$', 'bW' )<CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/vb.vim	/^nnoremap <buffer> <silent> [] :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', 'bW')<cr>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^noremap  <buffer><silent>[] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\<end\\\\s\\\\+".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%^","bW")')<CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^vnoremap <buffer><silent>[] :<C-u>cal <SID>CountWrapper('[]')<CR>$/;"	m
[]	cache-plug/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> [] :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'bW')<CR>$/;"	m
[b	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>[b <Plug>(llvm-move-block-prev)$/;"	m
[d	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> [d          :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
[g	plugin/coc.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
[g	plugin/scala.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
[k	plugin/bepo.vim	/^noremap [k [s$/;"	m
[m	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','n')<CR>$/;"	m
[{	cache-plug/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:false) <CR>$/;"	m
[{	cache-plug/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:true)  <CR>$/;"	m
[{	cache-plug/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:false) <CR>$/;"	m
[{	cache-plug/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:true)  <CR>$/;"	m
]#	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> ]# :call search('^\\s*#\\@!', "W")<CR>$/;"	m
]<C-D>	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> ]<C-D>      :<C-U>exe <SID>jump('edit',v:count)<SID>foldopen<CR>$/;"	m
]M	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','n')<CR>$/;"	m
][	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>][ <Plug>(llvm-next-section-end)$/;"	m
][	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> ][ m':call <SID>toend('')<CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
][	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
][	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> ][ :call search('^\\s*endsub\\>', "W")<CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/j.vim	/^noremap <buffer> <silent> ][ :<C-U>call <SID>SearchSection(1, 0, '')<CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:false) <CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:true)  <CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:false) <CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:true)  <CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/sql.vim	/^nnoremap <buffer> <silent> ][ :call search('\\c^\\s*end\\W*$', 'W' )<CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/vb.vim	/^nnoremap <buffer> <silent> ][ :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', 'W')<cr>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^noremap  <buffer><silent>][ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\<end\\\\s\\\\+".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%$","W")')<CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^vnoremap <buffer><silent>][ :<C-u>cal <SID>CountWrapper('][')<CR>$/;"	m
][	cache-plug/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ][ :call search('^<\/\\(template\\<Bar>script\\<Bar>style\\)', 'W')<CR>$/;"	m
]]	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>]] <Plug>(llvm-next-section-begin)$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^noremap <silent><buffer> ]] \/^\\*\\a<CR>:nohlsearch<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    noremap <silent> <buffer> ]] m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z0-9-]\\+\\s\\+\\%(division\\<Bar>section\\)\\.','W')<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^noremap <silent><buffer> ]] :call search('^\\s*sub\\>', "W")<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^nnoremap <silent> <buffer> ]] :<C-U>call <SID>sectionmovement('{{','' ,'n',v:count1)<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/j.vim	/^noremap <buffer> <silent> ]] :<C-U>call <SID>SearchSection(0, 0, '')<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:false) <CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:true)  <CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:false) <CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:true)  <CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/rust.vim	/^nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/rust.vim	/^onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/scala.vim	/^noremap <script> <buffer> <silent> ]] :call <SID>NextSection(0)<cr>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/sql.vim	/^nnoremap <buffer> <silent> ]] :call search('\\c^\\s*begin\\>', 'W' )<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/vb.vim	/^nnoremap <buffer> <silent> ]] :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(function\\\\|sub\\)', 'W')<cr>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^noremap  <buffer><silent>]] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\%(\\\\<end\\\\s\\\\+\\\\)\\\\@<!\\\\<".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%$","W")')<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^vnoremap <buffer><silent>]] :<C-u>cal <SID>CountWrapper(']]')<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/vue.vim	/^  nnoremap <silent> <buffer> ]] :call search('^<\\(template\\<Bar>script\\<Bar>style\\)', 'W')<CR>$/;"	m
]]	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^  nnoremap <silent> <buffer> ]] m`:call ZimbuGoEndBlock()<CR>$/;"	m
]b	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^    nmap <buffer><silent>]b <Plug>(llvm-move-block-next)$/;"	m
]d	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^  nnoremap <silent> <script> <buffer> ]d          :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
]g	plugin/coc.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
]g	plugin/scala.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
]k	plugin/bepo.vim	/^noremap ]k ]s$/;"	m
]m	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','n')<CR>$/;"	m
]}	cache-plug/vim-polyglot/ftplugin/mf.vim	/^nnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:false) <CR>$/;"	m
]}	cache-plug/vim-polyglot/ftplugin/mf.vim	/^vnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:true)  <CR>$/;"	m
]}	cache-plug/vim-polyglot/ftplugin/mp.vim	/^nnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:false) <CR>$/;"	m
]}	cache-plug/vim-polyglot/ftplugin/mp.vim	/^vnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:true)  <CR>$/;"	m
_SID	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_SID() abort$/;"	f
_SID	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_SID() abort$/;"	f
_SID	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_SID() abort$/;"	f
_SID	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:_SID() abort$/;"	f
_SID	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_SID() abort$/;"	f
_SID	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_SID() abort$/;"	f
__fsel	cache-plug/fzf/shell/key-bindings.zsh	/^__fsel() {$/;"	f
__fzf_cd__	cache-plug/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_comprun	cache-plug/fzf/shell/completion.bash	/^__fzf_comprun() {$/;"	f
__fzf_comprun	cache-plug/fzf/shell/completion.zsh	/^__fzf_comprun() {$/;"	f
__fzf_defc	cache-plug/fzf/shell/completion.bash	/^__fzf_defc() {$/;"	f
__fzf_extract_command	cache-plug/fzf/shell/completion.zsh	/^__fzf_extract_command() {$/;"	f
__fzf_generic_path_completion	cache-plug/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	cache-plug/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	cache-plug/fzf/shell/key-bindings.bash	/^__fzf_history__() {$/;"	f
__fzf_orig_completion	cache-plug/fzf/shell/completion.bash	/^__fzf_orig_completion() {$/;"	f
__fzf_select__	cache-plug/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzfcmd	cache-plug/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	cache-plug/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
_cache	cache-plug/fzf/src/pattern.go	/^	_cache        ChunkCache$/;"	v
_call_string_expr	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_call_string_expr(expr, args) abort$/;"	f
_colorToAttribute	cache-plug/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v
_compare	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
_default_compare	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
_define_ansi_highlights	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_define_ansi_highlights() abort$/;"	f
_dot_to_sharp	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
_encode_dict	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_encode_dict(val, settings) abort$/;"	f
_encode_list	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_encode_list(val, settings) abort$/;"	f
_ends_with	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:_ends_with(text, expr, lnum)$/;"	f
_execute	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_execute(cmd) abort$/;"	f
_extract_files	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
_false	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_false() abort$/;"	f
_file2module	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_file2module(file) abort$/;"	f
_function	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_function(fstr) abort$/;"	f
_fzf_alias_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_alias_completion() {$/;"	f
_fzf_compgen_dir	cache-plug/fzf/shell/completion.bash	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_dir	cache-plug/fzf/shell/completion.zsh	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_path	cache-plug/fzf/shell/completion.bash	/^  _fzf_compgen_path() {$/;"	f
_fzf_compgen_path	cache-plug/fzf/shell/completion.zsh	/^  _fzf_compgen_path() {$/;"	f
_fzf_complete	cache-plug/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	cache-plug/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	cache-plug/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	cache-plug/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill	cache-plug/fzf/shell/completion.zsh	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill_post	cache-plug/fzf/shell/completion.zsh	/^_fzf_complete_kill_post() {$/;"	f
_fzf_complete_ssh	cache-plug/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	cache-plug/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	cache-plug/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	cache-plug/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_dir_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	cache-plug/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	cache-plug/fzf/shell/completion.zsh	/^_fzf_feed_fifo() ($/;"	f
_fzf_file_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_host_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_host_completion() {$/;"	f
_fzf_opts_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	cache-plug/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_proc_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_proc_completion() {$/;"	f
_fzf_proc_completion_post	cache-plug/fzf/shell/completion.bash	/^_fzf_proc_completion_post() {$/;"	f
_fzf_setup_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_setup_completion() {$/;"	f
_fzf_statusline	cache-plug/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_fzf_var_completion	cache-plug/fzf/shell/completion.bash	/^_fzf_var_completion() {$/;"	f
_get_builtin_module	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
_get_module	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_get_module(name) abort dict$/;"	f
_global_vital_files	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_global_vital_files() abort$/;"	f
_handleOldOptions	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
_import	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_import(name) abort dict$/;"	f
_import_func_name	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
_is_available	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:_is_available() abort$/;"	f
_module_path	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_path(name) abort$/;"	f
_module_sid	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_sid(name) abort$/;"	f
_module_sid_base_dir	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
_null	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_null() abort$/;"	f
_pad_with_char	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
_patternCache	cache-plug/fzf/src/pattern.go	/^	_patternCache map[string]*Pattern$/;"	v
_replace	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
_resolve	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_resolve(val, prefix) abort$/;"	f
_runeWidths	cache-plug/fzf/src/util/util.go	/^var _runeWidths = make(map[rune]int)$/;"	v
_screen	cache-plug/fzf/src/tui/tcell.go	/^	_screen tcell.Screen$/;"	v
_self_vital_files	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_self_vital_files() abort$/;"	f
_sfuncname	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
_sid	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
_skip_special_chars	cache-plug/vim-polyglot/indent/cython.vim	/^    function! s:_skip_special_chars(line, col)$/;"	f
_skip_special_chars	cache-plug/vim-polyglot/indent/python.vim	/^    function! s:_skip_special_chars(line, col)$/;"	f
_source	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:_source(path) abort$/;"	f
_splitRegex	cache-plug/fzf/src/pattern.go	/^	_splitRegex   *regexp.Regexp$/;"	v
_split_by_wcswidth	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
_split_by_wcswidth_once	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
_starts_with	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:_starts_with(text, expr, lnum)$/;"	f
_true	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_true() abort$/;"	f
_unify_path	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_unify_path(path) abort$/;"	f
_uniq	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^  function! s:_uniq(list) abort$/;"	f
_vital_created	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_created(module) abort$/;"	f
_vital_created	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_created(module) abort$/;"	f
_vital_depends	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_depends	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_loaded	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_loaded	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_wcwidth	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
a	cache-plug/vim-prettier/tests/fixtures/foo.php	/^  $a='a';$/;"	v
a:temps	cache-plug/fzf/plugin/fzf.vim	/^    let a:temps.shellscript = shellscript$/;"	v
aM	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
abort	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:abort()$/;"	f
abs_path	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:abs_path(bufnr, shellesc)$/;"	f
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role = {}$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['composite'] = abstract_role['widget'] + ['aria-activedescendant']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['input'] = abstract_role['widget']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['landmark'] = role_attributes['region']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['range'] = abstract_role['input'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['roletype'] = ['aria-atomic', 'aria-busy', 'aria-controls', 'aria-describedby', 'aria-disabled', 'aria-dropeffect', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['section'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['sectionhead'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['select'] = abstract_role['composite'] + role_attributes['group'] + abstract_role['input']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['structure'] = abstract_role['roletype']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['widget'] = abstract_role['roletype']$/;"	v
abstract_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let abstract_role['window'] = abstract_role['roletype'] + ['aria-expanded']$/;"	v
abutton_dec	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let abutton_dec = 'details\\\\|embed\\\\|iframe\\\\|keygen\\\\|label\\\\|menu\\\\|select\\\\|textarea'$/;"	v
actAbort	cache-plug/fzf/src/terminal.go	/^	actAbort$/;"	c
actAccept	cache-plug/fzf/src/terminal.go	/^	actAccept$/;"	c
actAcceptNonEmpty	cache-plug/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c
actBackwardChar	cache-plug/fzf/src/terminal.go	/^	actBackwardChar$/;"	c
actBackwardDeleteChar	cache-plug/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c
actBackwardDeleteCharEOF	cache-plug/fzf/src/terminal.go	/^	actBackwardDeleteCharEOF$/;"	c
actBackwardKillWord	cache-plug/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c
actBackwardWord	cache-plug/fzf/src/terminal.go	/^	actBackwardWord$/;"	c
actBeginningOfLine	cache-plug/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c
actCancel	cache-plug/fzf/src/terminal.go	/^	actCancel$/;"	c
actChangePrompt	cache-plug/fzf/src/terminal.go	/^	actChangePrompt$/;"	c
actClearQuery	cache-plug/fzf/src/terminal.go	/^	actClearQuery$/;"	c
actClearScreen	cache-plug/fzf/src/terminal.go	/^	actClearScreen$/;"	c
actClearSelection	cache-plug/fzf/src/terminal.go	/^	actClearSelection$/;"	c
actDeleteChar	cache-plug/fzf/src/terminal.go	/^	actDeleteChar$/;"	c
actDeleteCharEOF	cache-plug/fzf/src/terminal.go	/^	actDeleteCharEOF$/;"	c
actDeselectAll	cache-plug/fzf/src/terminal.go	/^	actDeselectAll$/;"	c
actDown	cache-plug/fzf/src/terminal.go	/^	actDown$/;"	c
actEndOfLine	cache-plug/fzf/src/terminal.go	/^	actEndOfLine$/;"	c
actExecute	cache-plug/fzf/src/terminal.go	/^	actExecute$/;"	c
actExecuteMulti	cache-plug/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c
actExecuteSilent	cache-plug/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c
actForwardChar	cache-plug/fzf/src/terminal.go	/^	actForwardChar$/;"	c
actForwardWord	cache-plug/fzf/src/terminal.go	/^	actForwardWord$/;"	c
actHalfPageDown	cache-plug/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c
actHalfPageUp	cache-plug/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c
actIgnore	cache-plug/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c
actInvalid	cache-plug/fzf/src/terminal.go	/^	actInvalid$/;"	c
actJump	cache-plug/fzf/src/terminal.go	/^	actJump$/;"	c
actJumpAccept	cache-plug/fzf/src/terminal.go	/^	actJumpAccept$/;"	c
actKillLine	cache-plug/fzf/src/terminal.go	/^	actKillLine$/;"	c
actKillWord	cache-plug/fzf/src/terminal.go	/^	actKillWord$/;"	c
actMouse	cache-plug/fzf/src/terminal.go	/^	actMouse$/;"	c
actNextHistory	cache-plug/fzf/src/terminal.go	/^	actNextHistory$/;"	c
actPageDown	cache-plug/fzf/src/terminal.go	/^	actPageDown$/;"	c
actPageUp	cache-plug/fzf/src/terminal.go	/^	actPageUp$/;"	c
actPreview	cache-plug/fzf/src/terminal.go	/^	actPreview$/;"	c
actPreviewDown	cache-plug/fzf/src/terminal.go	/^	actPreviewDown$/;"	c
actPreviewHalfPageDown	cache-plug/fzf/src/terminal.go	/^	actPreviewHalfPageDown$/;"	c
actPreviewHalfPageUp	cache-plug/fzf/src/terminal.go	/^	actPreviewHalfPageUp$/;"	c
actPreviewPageDown	cache-plug/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c
actPreviewPageUp	cache-plug/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c
actPreviewUp	cache-plug/fzf/src/terminal.go	/^	actPreviewUp$/;"	c
actPreviousHistory	cache-plug/fzf/src/terminal.go	/^	actPreviousHistory$/;"	c
actPrintQuery	cache-plug/fzf/src/terminal.go	/^	actPrintQuery$/;"	c
actRefreshPreview	cache-plug/fzf/src/terminal.go	/^	actRefreshPreview$/;"	c
actReload	cache-plug/fzf/src/terminal.go	/^	actReload$/;"	c
actReplaceQuery	cache-plug/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c
actRune	cache-plug/fzf/src/terminal.go	/^	actRune$/;"	c
actSelectAll	cache-plug/fzf/src/terminal.go	/^	actSelectAll$/;"	c
actSigStop	cache-plug/fzf/src/terminal.go	/^	actSigStop$/;"	c
actToggle	cache-plug/fzf/src/terminal.go	/^	actToggle$/;"	c
actToggleAll	cache-plug/fzf/src/terminal.go	/^	actToggleAll$/;"	c
actToggleDown	cache-plug/fzf/src/terminal.go	/^	actToggleDown$/;"	c
actToggleIn	cache-plug/fzf/src/terminal.go	/^	actToggleIn$/;"	c
actToggleOut	cache-plug/fzf/src/terminal.go	/^	actToggleOut$/;"	c
actTogglePreview	cache-plug/fzf/src/terminal.go	/^	actTogglePreview$/;"	c
actTogglePreviewWrap	cache-plug/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c
actToggleSort	cache-plug/fzf/src/terminal.go	/^	actToggleSort$/;"	c
actToggleUp	cache-plug/fzf/src/terminal.go	/^	actToggleUp$/;"	c
actTop	cache-plug/fzf/src/terminal.go	/^	actTop$/;"	c
actUnixLineDiscard	cache-plug/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c
actUnixWordRubout	cache-plug/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c
actUp	cache-plug/fzf/src/terminal.go	/^	actUp$/;"	c
actYank	cache-plug/fzf/src/terminal.go	/^	actYank$/;"	c
action	cache-plug/fzf/src/terminal.go	/^type action struct {$/;"	t
actionType	cache-plug/fzf/src/terminal.go	/^type actionType int$/;"	t
action_for	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
activeTempFiles	cache-plug/fzf/src/terminal.go	/^var activeTempFiles []string$/;"	v
ada#Completion	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Completion (cmd)$/;"	f
ada#Completion_End	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Completion_End ()$/;"	f
ada#Create_Tags	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Create_Tags (option)$/;"	f
ada#Insert_Backspace	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Insert_Backspace ()$/;"	f
ada#Jump_Tag	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Jump_Tag (Word, Mode)$/;"	f
ada#List_Tag	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#List_Tag (...)$/;"	f
ada#Map_Menu	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Map_Menu (Text, Keys, Command)$/;"	f
ada#Map_Popup	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Map_Popup (Text, Keys, Command)$/;"	f
ada#Pretty_Print_Folding	cache-plug/vim-polyglot/autoload/ada.vim	/^   function ada#Pretty_Print_Folding (Line)			     " {{{2$/;"	f
ada#Switch_Session	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Switch_Session (New_Session)$/;"	f
ada#Switch_Syntax_Option	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Switch_Syntax_Option (option)$/;"	f
ada#User_Complete	cache-plug/vim-polyglot/autoload/ada.vim	/^function! ada#User_Complete(findstart, base)$/;"	f
ada#Word	cache-plug/vim-polyglot/autoload/ada.vim	/^function ada#Word (...)$/;"	f
add_db	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
add_methods	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_related	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:add_related(winid, target) abort$/;"	f
add_syntax	cache-plug/vim-polyglot/syntax/pgsql.vim	/^fun! s:add_syntax(s)$/;"	f
adjust_header	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_header(bufnr, hunk_diff)$/;"	f
adjust_hunk_summary	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_hunk_summary(hunk_diff) abort$/;"	f
adjust_win_row	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:adjust_win_row(winid, changed) abort$/;"	f
ae	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  onoremap <silent> <buffer> ae :<C-U>call <SID>wrap_around()<CR>$/;"	m
af	plugin/coc.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
ag_handler	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, has_column)$/;"	f
ag_to_qf	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, has_column)$/;"	f
algo	cache-plug/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	cache-plug/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	cache-plug/fzf/src/algo/normalize.go	/^package algo$/;"	p
align_lists	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
align_pairs	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
all	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
alloc16	cache-plug/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f
alloc32	cache-plug/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f
allsteps	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^function! s:allsteps()$/;"	f
am	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
and	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:and(xs) abort$/;"	f
ansi	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
ansiOffset	cache-plug/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	t
ansiRegex	cache-plug/fzf/src/ansi.go	/^var ansiRegex *regexp.Regexp$/;"	v
ansiState	cache-plug/fzf/src/ansi.go	/^type ansiState struct {$/;"	t
any	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
any_include?	cache-plug/fzf/test/test_go.rb	/^          def any_include?(val)$/;"	f	class:Tmux.until
append	cache-plug/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f
append_line	cache-plug/fzf/install	/^append_line() {$/;"	f
aria_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, drag_and_drop_attributes)$/;"	v
aria_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, live_region_attributes)$/;"	v
aria_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, relationship_attributes)$/;"	v
aria_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, widget_attributes)$/;"	v
aria_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes = global_states_and_properties$/;"	v
aria_attributes_value	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let aria_attributes_value = {$/;"	v
asciiFuzzyIndex	cache-plug/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) int {$/;"	f
ask	cache-plug/fzf/install	/^ask() {$/;"	f
ask	cache-plug/fzf/uninstall	/^ask() {$/;"	f
assert	cache-plug/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f
assertMatch	cache-plug/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sidx int, eidx int, score int) {$/;"	f
assertMatch2	cache-plug/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern string, sidx int, eidx int, score int) {$/;"	f
assert_list_of_dicts	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_list_of_dicts(expected, actual)$/;"	f
assert_signs	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_signs(expected, filename)$/;"	f
asyncFormat	cache-plug/vim-prettier/autoload/prettier/job/runner.vim	/^function! s:asyncFormat(cmd, startSelection, endSelection) abort$/;"	f
at	cache-plug/vim-polyglot/syntax/sed.vim	/^let __at = char2nr("@")$/;"	v
atof	cache-plug/fzf/src/options.go	/^func atof(str string) float64 {$/;"	f
atoi	cache-plug/fzf/src/options.go	/^func atoi(str string) int {$/;"	f
atoi	cache-plug/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f
atopi	cache-plug/fzf/src/terminal.go	/^func atopi(s string) int {$/;"	f
attr	cache-plug/vim-polyglot/syntax/vue.vim	/^function! s:attr(name, value)$/;"	f
attrCodes	cache-plug/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f
attribute_highlight	cache-plug/vim-polyglot/syntax/ansible.vim	/^fun! s:attribute_highlight(attributes)$/;"	f
attributes_value	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, event_attributes_value)$/;"	v
attributes_value	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, microdata_attributes_value)$/;"	v
attributes_value	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, rdfa_attributes_value)$/;"	v
attributes_value	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let attributes_value = {$/;"	v
autofill_tokens	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let autofill_tokens = ['on', 'off', 'name', 'honorific-prefix', 'given-name', 'additional-name', 'family-name', 'honorific-suffix', 'nickname', 'organization-title', 'username', 'new-password', 'current-password', 'organization', 'street-address', 'address-line1', 'address-line2', 'address-line3', 'address-level4', 'address-level3', 'address-level2', 'address-level1', 'country', 'country-name', 'postal-code', 'cc-name', 'cc-given-name', 'cc-additional-name', 'cc-family-name', 'cc-number', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-csc', 'cc-type', 'transaction-currency', 'transaction-amount', 'language', 'bday', 'bday-day', 'bday-month', 'bday-year', 'sex', 'url', 'photo', 'tel', 'tel-country-code', 'tel-national', 'tel-area-code', 'tel-local', 'tel-local-prefix', 'tel-local-suffix', 'tel-extension', 'email', 'impp']$/;"	v
awkBlack	cache-plug/fzf/src/tokenizer.go	/^	awkBlack$/;"	c
awkNil	cache-plug/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c
awkTokenizer	cache-plug/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f
awkWhite	cache-plug/fzf/src/tokenizer.go	/^	awkWhite$/;"	c
aÉ	plugin/bepo.vim	/^onoremap aÉ aW$/;"	m
aé	plugin/bepo.vim	/^onoremap aé aw$/;"	m
b	cache-plug/vim-prettier/tests/fixtures/foo.php	/^      $b = $a. $a .' asda';$/;"	v
b:	cache-plug/vim-polyglot/syntax/liquid.vim	/^      let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\\.\\zs.*')$/;"	v
b:AutoPairs	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^  let b:AutoPairs = { '{%': '%}' }$/;"	v
b:AutoPairs	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^  let b:AutoPairs = {$/;"	v
b:AutoPairs	cache-plug/vim-polyglot/ftplugin/rust.vim	/^    let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}$/;"	v
b:RstFoldCache	cache-plug/vim-polyglot/autoload/RstFold.vim	/^  let b:RstFoldCache = closure.levels$/;"	v
b:Xsl_SyntaxFold_by	cache-plug/vim-polyglot/syntax/xsl.vim	/^	let b:Xsl_SyntaxFold_by=''$/;"	v
b:ale_fixers	cache-plug/vim-polyglot/ftplugin/svelte.vim	/^    let b:ale_fixers = ['eslint', 'prettier', 'prettier_standard']$/;"	v
b:ale_linter_aliases	cache-plug/vim-polyglot/ftplugin/svelte.vim	/^    let b:ale_linter_aliases = ['css', 'javascript']$/;"	v
b:ale_linters	cache-plug/vim-polyglot/ftplugin/svelte.vim	/^    let b:ale_linters = ['stylelint', 'eslint']$/;"	v
b:bdf_minlines	cache-plug/vim-polyglot/syntax/bdf.vim	/^  let b:bdf_minlines = 30$/;"	v
b:bdf_minlines	cache-plug/vim-polyglot/syntax/bdf.vim	/^  let b:bdf_minlines = bdf_minlines$/;"	v
b:block_begin	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^let b:block_begin = '\\<\\(do$\\|fn\\>\\)'$/;"	v
b:block_end	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^let b:block_end = '\\<end\\>'$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/abap.vim	/^  let b:browsefilter = "ABAP Source Files (*.abap)\\t*.abap\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^    let b:browsefilter = "Abaqus Input Files (*.inp *.inc)\\t*.inp;*.inc\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/ant.vim	/^    let b:browsefilter = "Build Files (build.xml)\\tbuild.xml\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^    let  b:browsefilter="ASP Files (*.asp)\\t*.asp\\n" . s:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/awk.vim	/^  let b:browsefilter = "Awk Source Files (*.awk,*.gawk)\\t*.awk;*.gawk\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^	let b:browsefilter = "Clojure Source Files (*.clj)\\t*.clj\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^  let b:browsefilter = "COBOL Source Files (*.cbl, *.cob)\\t*.cbl;*.cob;*.lib\\n".$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/config.vim	/^    let  b:browsefilter="Configure Scripts (configure.*, config.*)\\tconfigure*;config.*\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/cs.vim	/^    let b:browsefilter = "C# Source Files (*.cs)\\t*.cs\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/dosbatch.vim	/^  let b:browsefilter = "DOS Batch Files (*.bat, *.cmd)\\t*.bat;*.cmd\\nAll Files (*.*)\\t*.*\\n"$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/dtd.vim	/^    let  b:browsefilter="DTD Files (*.dtd)\\t*.dtd\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^  let b:browsefilter='eCrystal Files (*.ecr)\\t*.ecr\\n' . s:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/falcon.vim	/^  let b:browsefilter = "Falcon Source Files (*.fal *.ftd)\\t*.fal;*.ftd\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^  let b:browsefilter = "Fortran Files (*.f;*.for;*.f77;*.f90;*.f95;*.f03;*.f08;*.fpp;*.ftn)\\t*.f;*.for;*.f77;*.f90;*.f95;*.f03;*.f08;*.fpp;*.ftn\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/haml.vim	/^  let b:browsefilter="Haml Files (*.haml)\\t*.haml\\nSass Files (*.sass)\\t*.sass\\n" . s:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/html.vim	/^    let  b:browsefilter="HTML Files (*.html,*.htm)\\t*.htm;*.html\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/j.vim	/^  let b:browsefilter = "J Script Files (*.ijs)\\t*.ijs\\n"$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/java.vim	/^    let  b:browsefilter="Java Files (*.java)\\t*.java\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^    let  b:browsefilter="JSP Files (*.jsp)\\t*.jsp\\n" . s:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let b:browsefilter = "Julia Source Files (*.jl)\\t*.jl\\n"$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/kwt.vim	/^    let b:browsefilter = "Kimwitu\/Kimwitu++ Files (*.k)\\t*.k\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let b:browsefilter = "\\n".b:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let b:browsefilter = ''$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let b:browsefilter="Liquid Files (*.liquid)\\t*.liquid" . b:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/occam.vim	/^  let b:browsefilter = "All Occam Files (*.occ *.inc)\\t*.occ;*.inc\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/perl.vim	/^    let b:browsefilter = "Perl Source Files (*.pl)\\t*.pl\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/postscr.vim	/^  let b:browsefilter = "PostScript Files (*.ps)\\t*.ps\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/ps1.vim	/^	let b:browsefilter =$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/ps1xml.vim	/^  let b:browsefilter = $/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/pug.vim	/^  let b:browsefilter="Pug Files (*.pug)\\t*.pug\\n" . s:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/pyrex.vim	/^    let  b:browsefilter = "Pyrex files (*.pyx,*.pxd)\\t*.pyx;*.pxd\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/qml.vim	/^   let b:browsefilter =$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/rmd.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rrst\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/rnoweb.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rrst\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/rrst.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rrst\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let b:browsefilter = "SQL Files (*.sql)\\t*.sql\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^  let b:browsefilter="Stylus Files (*.styl)\\t*.styl\\n" . s:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/tcl.vim	/^    let b:browsefilter = "Tcl Source Files (.tcl)\\t*.tcl\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/vala.vim	/^  let b:browsefilter = "Vala Source Files (*.vala)\\t*.vala\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/verilog.vim	/^  let b:browsefilter = "Verilog Source Files (*.v)\\t*.v\\n" .$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^    let  b:browsefilter="XHTML files (*.xhtml, *.xhtm)\\t*.xhtml;*.xhtm\\n" . s:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/xsd.vim	/^    let  b:browsefilter="XSD Files (*.xsd)\\t*.xsd\\n" . s:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/ftplugin/xslt.vim	/^    let  b:browsefilter="XSLT Files (*.xsl,*.xslt)\\t*.xsl;*.xslt\\n" . b:browsefilter$/;"	v
b:browsefilter	cache-plug/vim-polyglot/syntax/lpc.vim	/^    let b:browsefilter = "LPC Source Files (*.c *.d *.h)\\t*.c;*.d;*.h\\n" .$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/autodoc.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/autodoc.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/autodoc.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/c.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/c.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/c.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/calendar.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/calendar.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/calendar.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/indent.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/indent.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/indent.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/lpc.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/lpc.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/lpc.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/pike.vim	/^    let b:c_minlines = 200	" mostly for multiline strings$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/pike.vim	/^    let b:c_minlines = 400	" #if 0 constructs can be long$/;"	v
b:c_minlines	cache-plug/vim-polyglot/syntax/pike.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:comment_end	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let b:comment_end = '\\(^\\s*'.b:comment_leader.'.*\\n\\)'.$/;"	v
b:comment_jump_over	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let b:comment_jump_over  = "call search('".$/;"	v
b:comment_leader	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let b:comment_leader = '\\(--\\\\|\\\/\\\/\\\\|\\*\\\\|\\\/\\*\\\\|\\*\\\/\\)'$/;"	v
b:comment_skip_back	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let b:comment_skip_back  = "call search('".$/;"	v
b:comment_start	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let b:comment_start  = '^\\(\\s*'.b:comment_leader.'.*\\n\\)\\@<!'.$/;"	v
b:commentary_format	cache-plug/vim-polyglot/ftplugin/julia.vim	/^let b:commentary_format = "# %s"           " for tpope\/vim-commentary$/;"	v
b:control_statement	cache-plug/vim-polyglot/indent/cython.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except)>'$/;"	v
b:control_statement	cache-plug/vim-polyglot/indent/cython.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except|cdef|cpdef)>'$/;"	v
b:control_statement	cache-plug/vim-polyglot/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except)>'$/;"	v
b:control_statement	cache-plug/vim-polyglot/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except|cdef|cpdef)>'$/;"	v
b:crystal_no_expensive	cache-plug/vim-polyglot/syntax/crystal.vim	/^  let b:crystal_no_expensive = 1$/;"	v
b:csv_end	cache-plug/vim-polyglot/ftplugin/csv.vim	/^let b:csv_end   = get(g:, 'csv_end', line('$'))$/;"	v
b:csv_result	cache-plug/vim-polyglot/ftplugin/csv.vim	/^let b:csv_result = ''$/;"	v
b:csv_start	cache-plug/vim-polyglot/ftplugin/csv.vim	/^let b:csv_start = get(g:, 'csv_start', 1)$/;"	v
b:cucumber_root	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^let b:cucumber_root = expand('%:p:h:s?.*[\\\/]\\%(features\\|stories\\)\\zs[\\\/].*??')$/;"	v
b:cucumber_steps_glob	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^  let b:cucumber_steps_glob = b:cucumber_root.'\/**\/*.rb'$/;"	v
b:current_ftplugin	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let b:current_ftplugin = 'sql'$/;"	v
b:current_indent	cache-plug/vim-polyglot/indent/pgsql.vim	/^let b:current_indent = "pgsql"$/;"	v
b:current_syntax	cache-plug/vim-fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	cache-plug/vim-fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/coffee.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/haskell.vim	/^let b:current_syntax = old_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/javascript/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/javascript/sql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/jsx.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/jsx.vim	/^let b:current_syntax = 'javascript.jsx'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/mdx.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/php/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/reason/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/rspec.vim	/^let b:current_syntax = 'rspec'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/tsx.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/tsx.vim	/^let b:current_syntax = 'typescript.tsx'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/after/syntax/typescript/graphql.vim	/^  let b:current_syntax = s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/8th.vim	/^let b:current_syntax = "8th"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/Jenkinsfile.vim	/^let b:current_syntax = 'Jenkinsfile'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/a2ps.vim	/^let b:current_syntax = "a2ps"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/a65.vim	/^let b:current_syntax = "a65"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/aap.vim	/^let b:current_syntax = "aap"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/abap.vim	/^let b:current_syntax = "abap"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/abaqus.vim	/^let b:current_syntax = "abaqus"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/abc.vim	/^let b:current_syntax = "abc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/abel.vim	/^let b:current_syntax = "abel"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/acedb.vim	/^let b:current_syntax = "acedb"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ada.vim	/^let b:current_syntax = "ada"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ahdl.vim	/^let b:current_syntax = "ahdl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/aidl.vim	/^let b:current_syntax = "aidl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/alsaconf.vim	/^let b:current_syntax = "alsaconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/aml.vim	/^let b:current_syntax = "aml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ampl.vim	/^let b:current_syntax = "ampl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ansible.vim	/^  let b:current_syntax=s:current_syntax$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ansible.vim	/^let b:current_syntax = "ansible"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ansible_hosts.vim	/^let b:current_syntax = "ansible_hosts"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ant.vim	/^let b:current_syntax = "ant"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/apache.vim	/^let b:current_syntax = "apache"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/apachestyle.vim	/^let b:current_syntax = "apachestyle"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/apiblueprint.vim	/^let b:current_syntax = 'apiblueprint'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/applescript.vim	/^let b:current_syntax = "applescript"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/aptconf.vim	/^let b:current_syntax = "aptconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/arch.vim	/^let b:current_syntax = "arch"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/art.vim	/^let b:current_syntax = "art"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/asciidoc.vim	/^let b:current_syntax = "asciidoc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/asl.vim	/^let b:current_syntax = "asl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/asn.vim	/^let b:current_syntax = "asn"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/aspperl.vim	/^let b:current_syntax = "aspperl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/aspvbs.vim	/^let b:current_syntax = "aspvbs"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/asterisk.vim	/^let b:current_syntax = "asterisk" $/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/asteriskvm.vim	/^let b:current_syntax = "asteriskvm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/atlas.vim	/^let b:current_syntax = "atlas"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/autodoc.vim	/^let b:current_syntax = "autodoc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/autoit.vim	/^let b:current_syntax = "autoit"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/automake.vim	/^let b:current_syntax = 'automake'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ave.vim	/^let b:current_syntax = "ave"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/awk.vim	/^let b:current_syntax = "awk"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/b.vim	/^let b:current_syntax = "b"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/basic.vim	/^let b:current_syntax = "basic"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/bc.vim	/^let b:current_syntax = "bc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/bdf.vim	/^let b:current_syntax = "bdf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/bib.vim	/^let b:current_syntax = "bib"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/bindzone.vim	/^let b:current_syntax = "bindzone"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/blade.vim	/^let b:current_syntax = 'blade'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/blank.vim	/^let b:current_syntax = "blank"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/brewfile.vim	/^let b:current_syntax = "brewfile"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/bsdl.vim	/^let b:current_syntax = "bsdl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/bst.vim	/^let b:current_syntax = "bst"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/bzl.vim	/^let b:current_syntax = 'bzl'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/bzr.vim	/^let b:current_syntax = "bzr"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/c.vim	/^let b:current_syntax = "c"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cabal-1.vim	/^let b:current_syntax = "cabal"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cabal-2.vim	/^let b:current_syntax = "cabal"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/caddyfile.vim	/^let b:current_syntax = "caddyfile"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/calendar.vim	/^let b:current_syntax = "calendar"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/carp.vim	/^let b:current_syntax = "carp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/catalog.vim	/^let b:current_syntax = "catalog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cdl.vim	/^let b:current_syntax = "cdl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cdrdaoconf.vim	/^let b:current_syntax = "cdrdaoconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^let b:current_syntax = "cdrtoc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cf.vim	/^let b:current_syntax = "cfml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cfg.vim	/^let b:current_syntax = "cfg"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ch.vim	/^let b:current_syntax = "ch"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/chaiscript.vim	/^let b:current_syntax = "chaiscript"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/chill.vim	/^let b:current_syntax = "chill"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/chordpro.vim	/^let b:current_syntax = "chordpro"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cl.vim	/^let b:current_syntax = "cl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/clean.vim	/^let b:current_syntax = "clean"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/clojure.vim	/^let b:current_syntax = "clojure"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cmake.vim	/^let b:current_syntax = "cmake"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cmod.vim	/^let b:current_syntax = "cmod"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cmusrc.vim	/^let b:current_syntax = "cmusrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cobol.vim	/^let b:current_syntax = "cobol"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/coffee.vim	/^  let b:current_syntax = 'coffee'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/conaryrecipe.vim	/^let b:current_syntax = "conaryrecipe"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/conf.vim	/^let b:current_syntax = "conf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/config.vim	/^let b:current_syntax = "config"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cpp.vim	/^let b:current_syntax = "cpp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cql.vim	/^let b:current_syntax = "cql"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/crm.vim	/^let b:current_syntax = "crm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/crontab.vim	/^let b:current_syntax = "crontab"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cryptol.vim	/^let b:current_syntax = "cryptol"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/crystal.vim	/^let b:current_syntax = 'crystal'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cs.vim	/^let b:current_syntax = 'cs'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/csc.vim	/^let b:current_syntax = "csc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/csdl.vim	/^let b:current_syntax = "csdl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/csp.vim	/^let b:current_syntax = "csp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/css.vim	/^let b:current_syntax = "css"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/csv.vim	/^let b:current_syntax="csv"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cterm.vim	/^let b:current_syntax = "cterm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cucumber.vim	/^let b:current_syntax = "cucumber"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cuda.vim	/^let b:current_syntax = "cuda"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cuesheet.vim	/^let b:current_syntax='cuesheet'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cupl.vim	/^let b:current_syntax = "cupl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cuplsim.vim	/^let b:current_syntax = "cuplsim"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cvs.vim	/^let b:current_syntax = "cvs"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cvsrc.vim	/^let b:current_syntax = "cvsrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/cynpp.vim	/^let b:current_syntax = "cynpp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/d.vim	/^let b:current_syntax = "d"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dart.vim	/^let b:current_syntax = 'dart'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/datascript.vim	/^let b:current_syntax = "datascript"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dcd.vim	/^let b:current_syntax = "dcd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dcov.vim	/^let b:current_syntax = "dcov"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ddoc.vim	/^    let b:current_syntax = "ddoc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/debchangelog.vim	/^let b:current_syntax = 'debchangelog'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/debcontrol.vim	/^let b:current_syntax = 'debcontrol'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/debcopyright.vim	/^let b:current_syntax = 'debcopyright'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/debsources.vim	/^let b:current_syntax = 'debsources'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/def.vim	/^let b:current_syntax = "def"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/denyhosts.vim	/^let b:current_syntax = "denyhosts"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/desc.vim	/^let b:current_syntax = "desc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/desktop.vim	/^let b:current_syntax = "desktop"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dhall.vim	/^let b:current_syntax = 'dhall'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dictconf.vim	/^let b:current_syntax = "dictconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dictdconf.vim	/^let b:current_syntax = "dictdconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/diff.vim	/^let b:current_syntax = "diff"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dircolors.vim	/^let b:current_syntax = "dircolors"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/django.vim	/^let b:current_syntax = "django"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dnsmasq.vim	/^let b:current_syntax = "dnsmasq"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/docker-compose.vim	/^let b:current_syntax = "dockercompose"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dockerfile.vim	/^let b:current_syntax = "dockerfile"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dosbatch.vim	/^let b:current_syntax = "dosbatch"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dosini.vim	/^let b:current_syntax = "dosini"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dot.vim	/^let b:current_syntax = "dot"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dracula.vim	/^let b:current_syntax = "dracula"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dsdl.vim	/^let b:current_syntax = "dsdl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dsl.vim	/^let b:current_syntax = "dsl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dtd.vim	/^let b:current_syntax = "dtd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dune.vim	/^let b:current_syntax = "dune"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dylan.vim	/^let b:current_syntax = "dylan"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dylanintr.vim	/^let b:current_syntax = "dylanintr"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/dylanlid.vim	/^let b:current_syntax = "dylanlid"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ecd.vim	/^let b:current_syntax = "ecd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ecrystal.vim	/^let b:current_syntax = 'ecrystal'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/edif.vim	/^let b:current_syntax = "edif"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/eelixir.vim	/^let b:current_syntax = 'eelixir'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/elf.vim	/^let b:current_syntax = "elf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/elinks.vim	/^let b:current_syntax = "elinks"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/elixir.vim	/^let b:current_syntax = "elixir"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/elm.vim	/^let b:current_syntax = 'elm'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/elmfilt.vim	/^let b:current_syntax = "elmfilt"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/embeddedpuppet.vim	/^let b:current_syntax = "embeddedpuppet"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ember-script.vim	/^let b:current_syntax = 'ember-script'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/emblem.vim	/^let b:current_syntax = 'emblem'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/erlang.vim	/^let b:current_syntax = "erlang"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/eruby.vim	/^let b:current_syntax = matchstr(&syntax, '^.*\\<eruby\\>')$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/esmtprc.vim	/^let b:current_syntax = "esmtprc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/esqlc.vim	/^let b:current_syntax = "esqlc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/esterel.vim	/^let b:current_syntax = "esterel"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/eterm.vim	/^let b:current_syntax = "eterm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/exim.vim	/^let b:current_syntax = "exim"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/expect.vim	/^let b:current_syntax = "expect"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/exports.vim	/^let b:current_syntax = "exports"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/falcon.vim	/^let b:current_syntax = "falcon"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fan.vim	/^let b:current_syntax = "fan"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fbs.vim	/^let b:current_syntax = "fbs"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fennel.vim	/^let b:current_syntax = "fennel"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ferm.vim	/^let b:current_syntax = "ferm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fetchmail.vim	/^let b:current_syntax = "fetchmail"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fgl.vim	/^let b:current_syntax = "fgl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fish.vim	/^let b:current_syntax = 'fish'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/focexec.vim	/^let b:current_syntax = "focexec"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/forth.vim	/^let b:current_syntax = "forth"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fortran.vim	/^let b:current_syntax = "fortran"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/framescript.vim	/^let b:current_syntax = "framescript"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/freebasic.vim	/^let b:current_syntax = "freebasic"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fsharp.vim	/^let b:current_syntax = 'fsharp'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fstab.vim	/^let b:current_syntax = "fstab"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/fvwm.vim	/^let b:current_syntax = "fvwm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gdb.vim	/^let b:current_syntax = "gdb"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gdmo.vim	/^let b:current_syntax = "gdmo"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gdscript3.vim	/^let b:current_syntax = "gdscript3"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gedcom.vim	/^let b:current_syntax = "gedcom"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/git.vim	/^let b:current_syntax = "git"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gitcommit.vim	/^let b:current_syntax = "gitcommit"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gitconfig.vim	/^let b:current_syntax = "gitconfig"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gitignore.vim	/^let b:current_syntax = 'gitignore'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gitolite.vim	/^let b:current_syntax = "gitolite"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gitrebase.vim	/^let b:current_syntax = "gitrebase"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gitsendemail.vim	/^let b:current_syntax = "gitsendemail"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gkrellmrc.vim	/^let b:current_syntax = "gkrellmrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/glsl.vim	/^  let b:current_syntax = "glsl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gmpl.vim	/^let b:current_syntax = "gmpl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gnash.vim	/^let b:current_syntax = "gnash"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gnuplot.vim	/^let b:current_syntax = "gnuplot"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/go.vim	/^let b:current_syntax = "go"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/godebugoutput.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/godebugstacktrace.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/godebugvariables.vim	/^let b:current_syntax = "godebugvariables"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/godefstack.vim	/^let b:current_syntax = "godefstack"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gohtmltmpl.vim	/^let b:current_syntax = "gohtmltmpl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gomod.vim	/^let b:current_syntax = "gomod"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gotexttmpl.vim	/^let b:current_syntax = "gotexttmpl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gp.vim	/^let b:current_syntax = "gp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gpg.vim	/^let b:current_syntax = "gpg"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/grads.vim	/^let b:current_syntax = "grads"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/graphql.vim	/^let b:current_syntax = 'graphql'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gretl.vim	/^let b:current_syntax="gretl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/groovy.vim	/^let b:current_syntax = "groovy"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/group.vim	/^let b:current_syntax = "group"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/grub.vim	/^let b:current_syntax = "grub"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gsl.vim	/^let b:current_syntax = "gsl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gsp.vim	/^let b:current_syntax = "gsp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/gtkrc.vim	/^let b:current_syntax = "gtkrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/haml.vim	/^let b:current_syntax = "haml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hamster.vim	/^let b:current_syntax = "hamster"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/handlebars.vim	/^let b:current_syntax = "handlebars"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/haproxy.vim	/^let b:current_syntax = "haproxy"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/haskell.vim	/^let b:current_syntax = "haskell"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/haste.vim	/^let b:current_syntax = "haste"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hastepreproc.vim	/^let b:current_syntax = "hastepreproc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/haxe.vim	/^let b:current_syntax = "haxe"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hb.vim	/^let b:current_syntax = "hb"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hcl.vim	/^let b:current_syntax = "hcl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/helm.vim	/^let b:current_syntax = "helm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/helm.vim	/^let b:current_syntax = ''$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/help.vim	/^let b:current_syntax = "help"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hercules.vim	/^let b:current_syntax = "hercules"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hex.vim	/^let b:current_syntax = "hex"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hgcommit.vim	/^let b:current_syntax = "hgcommit"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hive.vim	/^let b:current_syntax = "hive"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hog.vim	/^let b:current_syntax = "hog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hollywood.vim	/^let b:current_syntax = "hollywood"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hostconf.vim	/^let b:current_syntax = "hostconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/hostsaccess.vim	/^let b:current_syntax = "hostsaccess"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/html.vim	/^let b:current_syntax = "html"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/htmldjango.vim	/^let b:current_syntax = "htmldjango"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/htmlm4.vim	/^let b:current_syntax = "htmlm4"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/i3config.vim	/^let b:current_syntax = "i3config"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ibasic.vim	/^let b:current_syntax = "ibasic"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/icalendar.vim	/^let b:current_syntax = "icalendar"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/icemenu.vim	/^let b:current_syntax = "IceMenu"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/icon.vim	/^let b:current_syntax = "icon"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/idris.vim	/^let b:current_syntax = "idris"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/idris2.vim	/^let b:current_syntax = "idris2"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/indent.vim	/^let b:current_syntax = "indent"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/inform.vim	/^let b:current_syntax = "inform"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/initng.vim	/^let b:current_syntax = "initng"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/inittab.vim	/^let b:current_syntax = "inittab"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/iss.vim	/^let b:current_syntax = "iss"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ist.vim	/^let b:current_syntax = "ist"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/j.vim	/^let b:current_syntax = 'j'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jal.vim	/^let b:current_syntax = "jal"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jam.vim	/^let b:current_syntax = "jam"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/java.vim	/^let b:current_syntax = "java"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/javacc.vim	/^let b:current_syntax = "javacc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jess.vim	/^let b:current_syntax = "jess"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jgraph.vim	/^let b:current_syntax = "jgraph"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jinja2.vim	/^let b:current_syntax = "jinja2"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jinja2.vim	/^let b:current_syntax = ''$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jovial.vim	/^let b:current_syntax = "jovial"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jproperties.vim	/^let b:current_syntax = "jproperties"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/json.vim	/^let b:current_syntax = "json"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/json5.vim	/^  let b:current_syntax = 'json5'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jsp.vim	/^let b:current_syntax = "jsp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/jst.vim	/^let b:current_syntax = 'jst'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/julia.vim	/^let b:current_syntax = "julia"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/juliadoc.vim	/^let b:current_syntax = "juliadoc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/kconfig.vim	/^let b:current_syntax = "kconfig"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/kivy.vim	/^let b:current_syntax = "kivy"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/kix.vim	/^let b:current_syntax = "kix"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/kotlin.vim	/^let b:current_syntax = 'kotlin'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/kscript.vim	/^let b:current_syntax = "kscript"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/kwt.vim	/^let b:current_syntax = "kwt"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lace.vim	/^let b:current_syntax = "lace"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/latte.vim	/^let b:current_syntax = "latte"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ld.vim	/^let b:current_syntax = "ld"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ldif.vim	/^let b:current_syntax = "ldif"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ledger.vim	/^let b:current_syntax = b:is_hledger ? 'hledger' : 'ledger'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/less.vim	/^let b:current_syntax = "less"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lex.vim	/^let b:current_syntax = "lex"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lftp.vim	/^let b:current_syntax = "lftp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lhaskell.vim	/^let b:current_syntax = "lhaskell"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/libao.vim	/^let b:current_syntax = "libao"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lidris.vim	/^let b:current_syntax = "lidris"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lidris2.vim	/^let b:current_syntax = "lidris2"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lifelines.vim	/^let b:current_syntax = "lifelines"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lilo.vim	/^let b:current_syntax = "lilo"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lilypond.vim	/^let b:current_syntax = "lilypond"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/limits.vim	/^let b:current_syntax = "limits"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/liquid.vim	/^let b:current_syntax = 'liquid'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lisp.vim	/^let b:current_syntax = "lisp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/litcoffee.vim	/^let b:current_syntax = "litcoffee"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lite.vim	/^let b:current_syntax = "lite"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/litestep.vim	/^let b:current_syntax = "litestep"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/llvm.vim	/^let b:current_syntax = "llvm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/log.vim	/^let b:current_syntax = 'log'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/loginaccess.vim	/^let b:current_syntax = "loginaccess"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/logindefs.vim	/^let b:current_syntax = "logindefs"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/logtalk.vim	/^let b:current_syntax = "logtalk"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lotos.vim	/^let b:current_syntax = "lotos"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lout.vim	/^let b:current_syntax = "lout"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lpc.vim	/^let b:current_syntax = "lpc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lprolog.vim	/^let b:current_syntax = "lprolog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ls.vim	/^  let b:current_syntax = 'livescript'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ls.vim	/^let b:current_syntax = "ls"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lsl.vim	/^let b:current_syntax = "lsl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lss.vim	/^let b:current_syntax = "lss"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lua.vim	/^let b:current_syntax = "lua"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/lynx.vim	/^let b:current_syntax = "lynx"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/m4.vim	/^let b:current_syntax = "m4"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mail.vim	/^let b:current_syntax = "mail"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mailaliases.vim	/^let b:current_syntax = "mailaliases"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mailcap.vim	/^let b:current_syntax = "mailcap"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/make.vim	/^let b:current_syntax = "make"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mako.vim	/^let b:current_syntax = b:mako_outer_lang$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mallard.vim	/^let b:current_syntax = "mallard"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/manconf.vim	/^let b:current_syntax = "manconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/maple.vim	/^let b:current_syntax = "maple"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/markdown.vim	/^let b:current_syntax = "mkd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mason.vim	/^let b:current_syntax = "mason"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/master.vim	/^let b:current_syntax = "master"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mel.vim	/^let b:current_syntax = "mel"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/merlin.vim	/^let b:current_syntax = "merlin"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/meson.vim	/^let b:current_syntax = "meson"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/messages.vim	/^let b:current_syntax = "messages"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mf.vim	/^let b:current_syntax = "mf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mgl.vim	/^let b:current_syntax = "mgl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mgp.vim	/^let b:current_syntax = "mgp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mib.vim	/^let b:current_syntax = "mib"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mix.vim	/^let b:current_syntax = "mix"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mma.vim	/^let b:current_syntax = "mma"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mmp.vim	/^let b:current_syntax = "mmp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/modconf.vim	/^let b:current_syntax = "modconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/modula2.vim	/^let b:current_syntax = "modula2"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/modula3.vim	/^let b:current_syntax = "modula3"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/monk.vim	/^let b:current_syntax = "monk"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/moo.vim	/^let b:current_syntax = "moo"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/moon.vim	/^  let b:current_syntax = 'moon'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mp.vim	/^let b:current_syntax = "mp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mplayerconf.vim	/^let b:current_syntax = "mplayerconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mrxvtrc.vim	/^let b:current_syntax = "mrxvtrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/msidl.vim	/^let b:current_syntax = "msidl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/msql.vim	/^let b:current_syntax = "msql"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/murphi.vim	/^let b:current_syntax = "murphi"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mush.vim	/^let b:current_syntax = "mush"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/muttrc.vim	/^let b:current_syntax = "muttrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/mysql.vim	/^let b:current_syntax = "mysql"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/n1ql.vim	/^let b:current_syntax = "n1ql"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/named.vim	/^let b:current_syntax = "named"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/nanorc.vim	/^let b:current_syntax = "nanorc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/natural.vim	/^let b:current_syntax = "natural"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ncf.vim	/^let b:current_syntax = "ncf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/neomuttrc.vim	/^let b:current_syntax = "neomuttrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/netrc.vim	/^let b:current_syntax = "netrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/nginx.vim	/^let b:current_syntax = "nginx"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/nim.vim	/^let b:current_syntax = 'nim'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ninja.vim	/^let b:current_syntax = "ninja"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/nix.vim	/^let b:current_syntax = "nix"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/nqc.vim	/^let b:current_syntax = "nqc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/nroff.vim	/^let b:current_syntax = "nroff"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/nsis.vim	/^let b:current_syntax = "nsis"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/oasis.vim	/^let b:current_syntax = "oasis"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/obj.vim	/^let b:current_syntax = "obj"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ocaml.vim	/^let b:current_syntax = "ocaml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ocamlbuild_tags.vim	/^let b:current_syntax = "ocamlbuild_tags"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/occam.vim	/^let b:current_syntax = "occam"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ocpbuild.vim	/^let b:current_syntax = "ocpbuild"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ocpbuildroot.vim	/^let b:current_syntax = "ocpbuildroot"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/octave.vim	/^let b:current_syntax = "octave"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/odin.vim	/^let b:current_syntax = "odin"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/omake.vim	/^let b:current_syntax = "omake"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/omnimark.vim	/^let b:current_syntax = "omnimark"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/opam.vim	/^let b:current_syntax = "opam"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/opencl.vim	/^let b:current_syntax = "opencl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/openroad.vim	/^let b:current_syntax = "openroad"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/opl.vim	/^let b:current_syntax = "opl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ora.vim	/^let b:current_syntax = "ora"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pamconf.vim	/^let b:current_syntax = "pamconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pamenv.vim	/^let b:current_syntax = "pamenv"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/papp.vim	/^let b:current_syntax = "papp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pascal.vim	/^let b:current_syntax = "pascal"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/passwd.vim	/^let b:current_syntax = "passwd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pccts.vim	/^let b:current_syntax = "pccts"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pdf.vim	/^let b:current_syntax = "pdf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/perl.vim	/^let b:current_syntax = "perl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pf.vim	/^let b:current_syntax = "pf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pfmain.vim	/^let b:current_syntax = "pfmain"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pgsql.vim	/^let b:current_syntax = "sql"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/php.vim	/^let b:current_syntax = "php"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pike.vim	/^let b:current_syntax = "pike"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pilrc.vim	/^let b:current_syntax = "pilrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pine.vim	/^let b:current_syntax = "pine"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pinfo.vim	/^let b:current_syntax = "pinfo"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/plantuml.vim	/^let b:current_syntax = 'plantuml'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pli.vim	/^let b:current_syntax = "pl1"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/plm.vim	/^let b:current_syntax = "plm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/plp.vim	/^let b:current_syntax = "plp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/plsql.vim	/^let b:current_syntax = "plsql"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/po.vim	/^let b:current_syntax = "po"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pod.vim	/^let b:current_syntax = "pod"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pony.vim	/^let b:current_syntax = 'pony'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/postscr.vim	/^let b:current_syntax = "postscr"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pov.vim	/^let b:current_syntax = "pov"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/povini.vim	/^let b:current_syntax = "povini"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ppd.vim	/^let b:current_syntax = "ppd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ppwiz.vim	/^let b:current_syntax = "ppwiz"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/privoxy.vim	/^let b:current_syntax = "privoxy"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/procmail.vim	/^let b:current_syntax = "procmail"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/prolog.vim	/^let b:current_syntax = "prolog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/promela.vim	/^let b:current_syntax = "promela"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/proto.vim	/^let b:current_syntax = "proto"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/protocols.vim	/^let b:current_syntax = "protocols"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ps1.vim	/^let b:current_syntax = "ps1"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ps1xml.vim	/^let b:current_syntax = "ps1xml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/psf.vim	/^let b:current_syntax = "psf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pug.vim	/^let b:current_syntax = "pug"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/puppet.vim	/^let b:current_syntax = "puppet"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/purescript.vim	/^let b:current_syntax = "purescript"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/pyrex.vim	/^let b:current_syntax = "pyrex"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/python.vim	/^let b:current_syntax = 'python'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/qmake.vim	/^let b:current_syntax = "qmake"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/qml.vim	/^let b:current_syntax = "qml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/quake.vim	/^let b:current_syntax = "quake"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/racket.vim	/^let b:current_syntax = "racket"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/radiance.vim	/^let b:current_syntax = "radiance"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ragel.vim	/^let b:current_syntax = "ragel"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/raku.vim	/^let b:current_syntax = "raku"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/raml.vim	/^let b:current_syntax = "raml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ratpoison.vim	/^let b:current_syntax = "ratpoison"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/razor.vim	/^let b:current_syntax = "razor"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rc.vim	/^let b:current_syntax = "rc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rcs.vim	/^let b:current_syntax = "rcs"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/readline.vim	/^let b:current_syntax = 'readline'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/reason.vim	/^let b:current_syntax = "reason"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rego.vim	/^let b:current_syntax = 'rego'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/remind.vim	/^let b:current_syntax = "remind"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/requirements.vim	/^let b:current_syntax = "requirements"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/resolv.vim	/^let b:current_syntax = "resolv"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/reva.vim	/^let b:current_syntax = "reva"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rexx.vim	/^let b:current_syntax = "rexx"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rhelp.vim	/^let   b:current_syntax = "rhelp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rib.vim	/^let b:current_syntax = "rib"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rmd.vim	/^  let b:current_syntax = "rmd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rmd.vim	/^let b:current_syntax = "rmd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rnc.vim	/^let b:current_syntax = "rnc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rng.vim	/^let b:current_syntax = 'rng'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rnoweb-1.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rnoweb-2.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/robots.vim	/^let b:current_syntax = "robots"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rpcgen.vim	/^let b:current_syntax = "rpcgen"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rpl.vim	/^let b:current_syntax = "rpl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rrst.vim	/^let b:current_syntax = "rrst"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rst.vim	/^let b:current_syntax = "rst"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rtf.vim	/^let b:current_syntax = "rtf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/rust.vim	/^let b:current_syntax = "rust"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/samba.vim	/^let b:current_syntax = "samba"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sas.vim	/^let b:current_syntax = "sas"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sass.vim	/^let b:current_syntax = "sass"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sather.vim	/^let b:current_syntax = "sather"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/scala.vim	/^let b:current_syntax = "scala"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/scala.vim	/^let b:current_syntax = 'scala'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/scheme.vim	/^let b:current_syntax = 'scheme'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/scilab.vim	/^let b:current_syntax = "scilab"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/screen.vim	/^let b:current_syntax = "screen"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/scss.vim	/^let b:current_syntax = "scss"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sd.vim	/^let b:current_syntax = "sd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sdc.vim	/^let b:current_syntax = "sdc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sdl.vim	/^let b:current_syntax = "sdl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sed.vim	/^let b:current_syntax = "sed"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sensors.vim	/^let b:current_syntax = "sensors"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/services.vim	/^let b:current_syntax = "services"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/setserial.vim	/^let b:current_syntax = "setserial"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sexplib.vim	/^let b:current_syntax = "sexplib"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sieve.vim	/^let b:current_syntax = "sieve"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sil.vim	/^let b:current_syntax = "sil"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/simula.vim	/^let b:current_syntax = "simula"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sinda.vim	/^let b:current_syntax = "sinda"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sisu.vim	/^let b:current_syntax = "sisu"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/skill.vim	/^let b:current_syntax = "skill"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/slang.vim	/^let b:current_syntax = "slang"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/slice.vim	/^let b:current_syntax = "slice"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/slim.vim	/^let b:current_syntax = "slim"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/slime.vim	/^let b:current_syntax = "slime"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/slpconf.vim	/^let b:current_syntax = "slpconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/slpreg.vim	/^let b:current_syntax = "slpreg"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/slpspi.vim	/^let b:current_syntax = "slpspi"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/slrnrc.vim	/^let b:current_syntax = "slrnrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/slrnsc.vim	/^let b:current_syntax = "slrnsc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sm.vim	/^let b:current_syntax = "sm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/smarty.vim	/^let b:current_syntax = "smarty"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/smcl.vim	/^let b:current_syntax = "smcl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/smith.vim	/^let b:current_syntax = "smith"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sml.vim	/^let b:current_syntax = "sml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/smt2.vim	/^let b:current_syntax = "smt2"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/snobol4.vim	/^let b:current_syntax = "snobol4"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/spec.vim	/^let b:current_syntax = "spec"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/spice.vim	/^let b:current_syntax = "spice"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/spup.vim	/^let b:current_syntax = "spup"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/spyce.vim	/^let b:current_syntax = "spyce"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sqlj.vim	/^let b:current_syntax = "sqlj"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sqloracle.vim	/^let b:current_syntax = "sql"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sqr.vim	/^let b:current_syntax = "sqr"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/squid.vim	/^let b:current_syntax = "squid"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/srec.vim	/^let b:current_syntax = "srec"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sshconfig.vim	/^let b:current_syntax = "sshconfig"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sshdconfig.vim	/^let b:current_syntax = "sshdconfig"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/st.vim	/^let b:current_syntax = "st"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/stata.vim	/^let b:current_syntax = "stata"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/stp.vim	/^let b:current_syntax = "stp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/stylus.vim	/^let b:current_syntax = "stylus"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sudoers.vim	/^let b:current_syntax = "sudoers"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/svelte.vim	/^let b:current_syntax = "svelte"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/svg.vim	/^let b:current_syntax = "svg"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/svn.vim	/^let b:current_syntax = "svn"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/swift.vim	/^let b:current_syntax = "swift"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/swiftgyb.vim	/^let b:current_syntax = "swiftgyb"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sxhkdrc.vim	/^let b:current_syntax = "sxhkdrc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/sysctl.vim	/^let b:current_syntax = "sysctl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/systemd.vim	/^let b:current_syntax = "systemd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/systemverilog.vim	/^let b:current_syntax = "systemverilog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tablegen.vim	/^let b:current_syntax = "tablegen"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tads.vim	/^let b:current_syntax = "tads"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tags.vim	/^let b:current_syntax = "tags"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tak.vim	/^let b:current_syntax = "tak"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tap.vim	/^let b:current_syntax="tapVerboseOutput"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/taskdata.vim	/^let b:current_syntax = "taskdata"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/taskedit.vim	/^let b:current_syntax = "taskedit"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tcl.vim	/^let b:current_syntax = "tcl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/teraterm.vim	/^let b:current_syntax = "teraterm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/terminfo.vim	/^let b:current_syntax = "terminfo"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/terraform.vim	/^let b:current_syntax = 'terraform'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tex.vim	/^let   b:current_syntax = "tex"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/texinfo.vim	/^let b:current_syntax = "texinfo"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/texmf.vim	/^let b:current_syntax = "texmf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tf.vim	/^let b:current_syntax = "tf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/thrift.vim	/^let b:current_syntax = "thrift"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tidy.vim	/^let b:current_syntax = "tidy"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tilde.vim	/^let b:current_syntax = "tilde"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tli.vim	/^let b:current_syntax = "tli"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tmux.vim	/^let b:current_syntax = "tmux"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/toml.vim	/^let b:current_syntax = 'toml'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tpp.vim	/^let b:current_syntax = 'tpp'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tptp.vim	/^let b:current_syntax = "tptp"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/trasys.vim	/^let b:current_syntax = "trasys"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/treetop.vim	/^let b:current_syntax = 'treetop'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tsalt.vim	/^let b:current_syntax = "tsalt"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tsscl.vim	/^let b:current_syntax = "tsscl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tssgm.vim	/^let b:current_syntax = "tssgm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tssop.vim	/^let b:current_syntax = "tssop"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tt2.vim	/^let b:current_syntax = "tt2"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tt2html.vim	/^let b:current_syntax = "tt2html"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/tt2js.vim	/^let b:current_syntax = "tt2js"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/typescript.vim	/^let b:current_syntax = "typescript"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/typescriptreact.vim	/^let b:current_syntax = "typescriptreact"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/uc.vim	/^let b:current_syntax = "uc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/udevconf.vim	/^let b:current_syntax = "udevconf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/udevperm.vim	/^let b:current_syntax = "udevperm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/uil.vim	/^let b:current_syntax = "uil"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/unison.vim	/^let b:current_syntax = "unison"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/updatedb.vim	/^let b:current_syntax = "updatedb"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/upstart.vim	/^let b:current_syntax = "upstart"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/upstreamdat.vim	/^let b:current_syntax = "upstreamdat"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/upstreaminstalllog.vim	/^let b:current_syntax = "upstreaminstalllog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/upstreamlog.vim	/^let b:current_syntax = "upstreamlog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/usserverlog.vim	/^let b:current_syntax = "usserverlog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/usw2kagtlog.vim	/^let b:current_syntax = "usw2kagentlog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vala.vim	/^let b:current_syntax = "vala"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vb.vim	/^let b:current_syntax = "vb"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vbnet.vim	/^let b:current_syntax = "vbnet"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/velocity.vim	/^let b:current_syntax = "velocity"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vera.vim	/^let b:current_syntax = "vera"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/verilog.vim	/^let b:current_syntax = "verilog"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/verilogams.vim	/^let b:current_syntax = "verilogams"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vgrindefs.vim	/^let b:current_syntax = "vgrindefs"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vhdl.vim	/^let b:current_syntax = "vhdl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vimgo.vim	/^let b:current_syntax = "vimgo"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/viminfo.vim	/^let b:current_syntax = "viminfo"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vlang.vim	/^let b:current_syntax = 'vlang'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vmasm.vim	/^let b:current_syntax = "vmasm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/voscm.vim	/^let b:current_syntax = "voscm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vrml.vim	/^let b:current_syntax = "vrml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vroom.vim	/^let b:current_syntax = 'vroom'$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/vue.vim	/^let b:current_syntax = "vue"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/wast.vim	/^let b:current_syntax = "wast"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/webmacro.vim	/^let b:current_syntax = "webmacro"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/wget.vim	/^let b:current_syntax = "wget"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/winbatch.vim	/^let b:current_syntax = "winbatch"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/wml.vim	/^let b:current_syntax = "wml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/wsh.vim	/^let b:current_syntax = "wsh"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/wsml.vim	/^let b:current_syntax = "wsml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/wvdial.vim	/^let b:current_syntax = "wvdial"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xdc.vim	/^let b:current_syntax = "xdc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xdefaults.vim	/^let b:current_syntax = "xdefaults"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xf86conf.vim	/^let b:current_syntax = "xf86conf"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xhtml.vim	/^let b:current_syntax = "xhtml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xinetd.vim	/^let b:current_syntax = "xinetd"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xmath.vim	/^let b:current_syntax = "xmath"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xml.vim	/^let b:current_syntax = "xml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xmodmap.vim	/^let b:current_syntax = "xmodmap"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xpm.vim	/^let b:current_syntax = "xpm"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xpm2.vim	/^let b:current_syntax = "xpm2"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xquery.vim	/^let b:current_syntax = "xquery"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xs.vim	/^let b:current_syntax = "xs"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/xsl.vim	/^let b:current_syntax = "xsl"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/yacc.vim	/^let b:current_syntax = "yacc"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/yaml.vim	/^let b:current_syntax = "yaml"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/z8a.vim	/^let b:current_syntax = "z8a"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/zephir.vim	/^let b:current_syntax = "zephir"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/zig.vim	/^let b:current_syntax = "zig"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/zimbu.vim	/^let b:current_syntax = "zimbu"$/;"	v
b:current_syntax	cache-plug/vim-polyglot/syntax/zir.vim	/^let b:current_syntax = "zir"$/;"	v
b:current_syntax_embed	cache-plug/vim-polyglot/syntax/rust.vim	/^    let b:current_syntax_embed = 1$/;"	v
b:dc_next_index	cache-plug/vim-polyglot/syntax/dircolors.vim	/^let b:dc_next_index = 0$/;"	v
b:dhall_ftplugin	cache-plug/vim-polyglot/ftplugin/dhall.vim	/^let b:dhall_ftplugin = 1$/;"	v
b:did_8thplugin	cache-plug/vim-polyglot/ftplugin/8th.vim	/^let b:did_8thplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/a2ps.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/aap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/abap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ada.vim	/^let b:did_ftplugin = 45$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/alsaconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ansible_hosts.vim	/^  let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ant.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/arch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/awk.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/bdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/blade.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/bst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/caddyfile.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/calendar.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/cdrdaoconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/cfg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/coffee.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/config.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/crm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/cs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/csc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/css.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/csv.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/cvsrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/dart.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/debcontrol.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/denyhosts.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/dictconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/dictdconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/diff.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/dircolors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/dockerfile.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/dosbatch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/dosini.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/dtd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/dune.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/elinks.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^	let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/eterm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/falcon.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/fennel.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/fetchmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/framescript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/fvwm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/gdb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/git.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/gitcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/gitconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/gitignore.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/gpg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/graphql.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/groovy.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/group.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/grub.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/haml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/hcl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/help.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/hgcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/hog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/hostconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/hostsaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/html.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/idris.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/indent.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ion.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/j.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/java.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/jproperties.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/julia.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/juliadoc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/kconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/kotlin.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ld.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/less.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/lftp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/libao.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/lilypond.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/limits.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/lisp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/llvm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/logcheck.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/loginaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/logindefs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/logtalk.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/lprolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ls.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/m4.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/mail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/mailaliases.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/mailcap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/make.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/mako.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/manconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/meson.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/mf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/mma.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/modconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/moon.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/mp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/mplayerconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/mrxvtrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/muttrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/nanorc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/neomuttrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/netrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/nix.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/nroff.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/nsis.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/occam.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/omake.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/opencl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/pamconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/pascal.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/passwd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/perl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/pinfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/pony.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/postscr.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/procmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/prolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/protocols.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ps1.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ps1xml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/puppet.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/qml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/quake.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/racket.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/raku.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/razor.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/readline.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/reva.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/rmd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/rnc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/rnoweb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/rpl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/rrst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/rst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/rust.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/sass.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/sbt.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/scala.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/scheme.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/screen.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/sensors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/services.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/setserial.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/sexplib.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/sieve.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/slim.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/slpconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/slpreg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/slpspi.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/spec.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let b:did_ftplugin     = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/sshconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/sudoers.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/svelte.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/sysctl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/systemd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/tablegen.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/tcl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/terminfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/text.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/tmux.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/toml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/treetop.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/typescript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/udevconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/udevperm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/updatedb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/vala.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/vb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/verilog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/vroom.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/wast.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/xdefaults.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/xf86conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/xinetd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/xmodmap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/xsd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/xslt.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/yaml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/zig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/after/indent/html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/after/indent/jsx.vim	/^  let b:did_indent = s:did_indent$/;"	v
b:did_indent	cache-plug/vim-polyglot/after/indent/tsx.vim	/^  let b:did_indent = s:did_indent$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ada.vim	/^let b:did_indent = 45$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/arduino.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/autohotkey.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/awk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/bib.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/blade.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/bst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/bzl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/cabal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/caddyfile.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/cdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ch.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/chaiscript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/clojure.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/cmake.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/cobol.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/coffee.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/crystal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/cs.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/css.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/cucumber.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/cuda.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/cython.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/d.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/dart.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/dictconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/dictdconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/dosbatch.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/dune.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/dylan.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ecrystal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/eelixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/elixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/elm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ember-script.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/erlang.vim	/^  let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/eruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/eterm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/falcon.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/fennel.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/fortran.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/framescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/fsharp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/gdscript3.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/gitconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/gitolite.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/go.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/graphql.vim	/^  let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/haml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/hamster.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/handlebars.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/haskell.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/hcl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/hog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/idris.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/idris2.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/j.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/java.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/json.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/jst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/kotlin.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ld.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ledger.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/lifelines.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/lilypond.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/liquid.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/lisp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/litcoffee.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/llvm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/logtalk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ls.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/lua.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/mail.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/make.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/mako.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/markdown.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/meson.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/moon.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/mp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/nginx.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/nim.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/nix.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/nsis.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ocaml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/occam.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/octave.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/odin.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/omake.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/opencl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/pascal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/perl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/pgsql.vim	/^let b:did_indent     = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/plantuml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/pony.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/postscr.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/pov.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/prolog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/proto.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ps1.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/pug.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/puppet.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/purescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/python.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/qml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/racket.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/raku.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/readline.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/reason.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/rmd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/rnoweb.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/rpl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/rrst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/rst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/ruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/rust.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/sas.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/sass.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/scala.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/scss.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/sdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/slim.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/slime.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/sml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/solidity.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/sshconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/stylus.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/svelte.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/svg.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/swift.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/systemverilog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/tcl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/teraterm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/terraform.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/tex.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/tf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/tilde.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/treetop.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/typescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^  let b:did_indent=s:did_indent$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/vala.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/vb.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/verilog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/vhdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/vlang.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/vroom.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/vue.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/wast.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/xf86conf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/xinetd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/yacc.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/yaml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/zig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/indent/zimbu.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	cache-plug/vim-polyglot/syntax/spyce.vim	/^let b:did_indent = 1	     " don't perform HTML indentation!$/;"	v
b:did_indent_hbs	cache-plug/vim-polyglot/indent/handlebars.vim	/^let b:did_indent_hbs = 1$/;"	v
b:did_scheme_ftplugin	cache-plug/vim-polyglot/ftplugin/scheme.vim	/^let b:did_scheme_ftplugin = 1$/;"	v
b:did_scheme_syntax	cache-plug/vim-polyglot/syntax/scheme.vim	/^let b:did_scheme_syntax = 1$/;"	v
b:dnsmasq_backrgound_light	cache-plug/vim-polyglot/syntax/dnsmasq.vim	/^	let b:dnsmasq_backrgound_light = 0$/;"	v
b:dnsmasq_backrgound_light	cache-plug/vim-polyglot/syntax/dnsmasq.vim	/^	let b:dnsmasq_backrgound_light = dnsmasq_backrgound_light$/;"	v
b:ecrystal_align_end	cache-plug/vim-polyglot/indent/ecrystal.vim	/^    let b:ecrystal_align_end = b:ecrystal_subtype !=# 'html' && b:ecrystal_subtype !=# 'xml'$/;"	v
b:ecrystal_align_end	cache-plug/vim-polyglot/indent/ecrystal.vim	/^    let b:ecrystal_align_end = g:ecrystal_align_end$/;"	v
b:ecrystal_indent_multiline	cache-plug/vim-polyglot/indent/ecrystal.vim	/^  let b:ecrystal_indent_multiline = get(g:, 'ecrystal_indent_multiline', 1)$/;"	v
b:ecrystal_subtype_indentexpr	cache-plug/vim-polyglot/indent/ecrystal.vim	/^let b:ecrystal_subtype_indentexpr = &l:indentexpr$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.leex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.leex\\|\\.eelixir\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eelixir_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype_indentexpr	cache-plug/vim-polyglot/indent/eelixir.vim	/^let b:eelixir_subtype_indentexpr = &l:indentexpr$/;"	v
b:elixir_no_expensive	cache-plug/vim-polyglot/syntax/slime.vim	/^let b:elixir_no_expensive = 1$/;"	v
b:endwise_addition	cache-plug/vim-polyglot/ftplugin/fish.vim	/^let b:endwise_addition = 'end'$/;"	v
b:endwise_addition	cache-plug/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_addition = '\\=index(["dot","mindmap","uml","salt","wbs"], submatch(0))!=-1 ? "@end" . submatch(0) : index(["note","legend"], submatch(0))!=-1 ? "end " . submatch(0) : "end"'$/;"	v
b:endwise_pattern	cache-plug/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_pattern = '^\\s*\\zs\\(loop\\|group\\|alt\\|note\\ze[^:]*$\\|legend\\|@start\\zs\\(dot\\|mindmap\\|uml\\|salt\\|wbs\\)\\)\\>.*$'$/;"	v
b:endwise_syngroups	cache-plug/vim-polyglot/ftplugin/fish.vim	/^let b:endwise_syngroups = 'fishKeyword,fishConditional,fishRepeat'$/;"	v
b:endwise_syngroups	cache-plug/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_syngroups = 'plantumlKeyword,plantumlPreProc'$/;"	v
b:endwise_words	cache-plug/vim-polyglot/ftplugin/fish.vim	/^let b:endwise_words = 'begin,function,if,switch,while,for'$/;"	v
b:endwise_words	cache-plug/vim-polyglot/ftplugin/plantuml.vim	/^let b:endwise_words = 'loop,group,alt,note,legend,startdot,startmindmap,startuml,startsalt,startwbs'$/;"	v
b:erlang_syntax_synced	cache-plug/vim-polyglot/syntax/erlang.vim	/^let b:erlang_syntax_synced = 1$/;"	v
b:eruby_nest_level	cache-plug/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(&filetype,'\\C\\<eruby\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	cache-plug/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	cache-plug/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^.\\{-\\}\\ze\\.eruby\\>')$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	cache-plug/vim-polyglot/syntax/nginx.vim	/^let b:eruby_subtype = ''$/;"	v
b:eruby_subtype_indentexpr	cache-plug/vim-polyglot/indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:eterm_minlines	cache-plug/vim-polyglot/syntax/eterm.vim	/^  let b:eterm_minlines = 50$/;"	v
b:eterm_minlines	cache-plug/vim-polyglot/syntax/eterm.vim	/^  let b:eterm_minlines = eterm_minlines$/;"	v
b:fortran_dialect	cache-plug/vim-polyglot/syntax/fortran.vim	/^    let b:fortran_dialect = "f08"$/;"	v
b:fortran_dialect	cache-plug/vim-polyglot/syntax/fortran.vim	/^    let b:fortran_dialect = g:fortran_dialect$/;"	v
b:fortran_dialect	cache-plug/vim-polyglot/syntax/fortran.vim	/^  let b:fortran_dialect = "F"$/;"	v
b:fortran_dialect	cache-plug/vim-polyglot/syntax/fortran.vim	/^  let b:fortran_dialect = "f08"$/;"	v
b:fortran_fixed_source	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	cache-plug/vim-polyglot/indent/fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	cache-plug/vim-polyglot/indent/fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	cache-plug/vim-polyglot/indent/fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	cache-plug/vim-polyglot/syntax/fortran.vim	/^        let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	cache-plug/vim-polyglot/syntax/fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	cache-plug/vim-polyglot/syntax/fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_retype	cache-plug/vim-polyglot/syntax/fortran.vim	/^let b:fortran_retype = getline(1)." ".getline(2)." ".getline(3)$/;"	v
b:framescript_minlines	cache-plug/vim-polyglot/syntax/framescript.vim	/^let b:framescript_minlines = exists("framescript_minlines")$/;"	v
b:git_dir	cache-plug/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = $GIT_DIR$/;"	v
b:git_dir	cache-plug/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git[\\\/]worktrees[\\\/][^\\\/]\\+\\>')$/;"	v
b:git_dir	cache-plug/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git\\>')$/;"	v
b:git_dir	cache-plug/vim-polyglot/ftplugin/git.vim	/^    let b:git_dir = substitute(b:git_dir,'\\\\','\/','g')$/;"	v
b:git_dir	cache-plug/vim-polyglot/ftplugin/gitcommit.vim	/^  let b:git_dir = expand("%:p:h")$/;"	v
b:handlebars_subtype_indentexpr	cache-plug/vim-polyglot/indent/handlebars.vim	/^let b:handlebars_subtype_indentexpr = &l:indentexpr$/;"	v
b:hi_indent	cache-plug/vim-polyglot/after/indent/html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
b:hi_indent	cache-plug/vim-polyglot/indent/html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
b:hi_lasttick	cache-plug/vim-polyglot/after/indent/html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_lasttick	cache-plug/vim-polyglot/indent/html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_newstate	cache-plug/vim-polyglot/after/indent/html.vim	/^let b:hi_newstate = {}$/;"	v
b:hi_newstate	cache-plug/vim-polyglot/indent/html.vim	/^let b:hi_newstate = {}$/;"	v
b:hs_chs	cache-plug/vim-polyglot/syntax/chaskell.vim	/^let b:hs_chs=1$/;"	v
b:html_indent_usestate	cache-plug/vim-polyglot/indent/eruby.vim	/^let b:html_indent_usestate = 0$/;"	v
b:html_indent_usestate	cache-plug/vim-polyglot/indent/handlebars.vim	/^let b:html_indent_usestate = 0$/;"	v
b:indent_use_syntax	cache-plug/vim-polyglot/indent/perl.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
b:indent_use_syntax	cache-plug/vim-polyglot/indent/raku.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
b:indentexpr_base	cache-plug/vim-polyglot/after/indent/javascript-2.vim	/^let b:indentexpr_base = &indentexpr$/;"	v
b:indentexpr_base	cache-plug/vim-polyglot/after/indent/php.vim	/^let b:indentexpr_base = &indentexpr$/;"	v
b:indentexpr_base	cache-plug/vim-polyglot/after/indent/typescript.vim	/^let b:indentexpr_base = &indentexpr$/;"	v
b:is_hledger	cache-plug/vim-polyglot/syntax/ledger.vim	/^    let b:is_hledger = 0$/;"	v
b:is_hledger	cache-plug/vim-polyglot/syntax/ledger.vim	/^    let b:is_hledger = 1$/;"	v
b:jst_nest_level	cache-plug/vim-polyglot/syntax/jst.vim	/^  let b:jst_nest_level = 1$/;"	v
b:jst_nest_level	cache-plug/vim-polyglot/syntax/jst.vim	/^  let b:jst_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'haml'$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'html'$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'javascript'$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'ruby'$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'text'$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = 'yaml'$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = g:jst_default_subtype$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^    let b:jst_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.jst\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^  let b:jst_subtype = matchstr(&filetype,'^jst\\.\\zs\\w\\+')$/;"	v
b:jst_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^  let b:jst_subtype = matchstr(s:lines,'jst_subtype=\\zs\\w\\+')$/;"	v
b:jst_subtype_indentexpr	cache-plug/vim-polyglot/indent/jst.vim	/^let b:jst_subtype_indentexpr = &l:indentexpr$/;"	v
b:jsx_pretty_old_cms	cache-plug/vim-polyglot/after/ftplugin/jsx.vim	/^let b:jsx_pretty_old_cms = &l:commentstring$/;"	v
b:jsx_pretty_old_cms	cache-plug/vim-polyglot/after/ftplugin/tsx.vim	/^let b:jsx_pretty_old_cms = &l:commentstring$/;"	v
b:julia_begin_keywords	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let b:julia_begin_keywords = '\\%(\\%(\\.\\s*\\)\\@<!\\|\\%(@\\s*.\\s*\\)\\@<=\\)\\<\\%(function\\|macro\\|begin\\|mutable\\s\\+struct\\|\\%(mutable\\s\\+\\)\\@<!struct\\|\\%(abstract\\|primitive\\)\\s\\+type\\|let\\|do\\|\\%(bare\\)\\?module\\|quote\\|if\\|for\\|while\\|try\\)\\>'$/;"	v
b:julia_begin_keywordsm	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let b:julia_begin_keywordsm = '\\%(' . s:yesmacro . b:julia_begin_keywords . '\\)\\|'$/;"	v
b:julia_end_keywords	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let b:julia_end_keywords = '\\<end\\>'$/;"	v
b:julia_vim_loaded	cache-plug/vim-polyglot/ftplugin/julia.vim	/^let b:julia_vim_loaded = 1$/;"	v
b:lhs_markup	cache-plug/vim-polyglot/syntax/lhaskell.vim	/^	    let b:lhs_markup = "unknown"$/;"	v
b:lhs_markup	cache-plug/vim-polyglot/syntax/lhaskell.vim	/^	    let b:lhs_markup = matchstr(lhs_markup,'\\<\\%(tex\\|none\\)\\>')$/;"	v
b:lhs_markup	cache-plug/vim-polyglot/syntax/lhaskell.vim	/^	let b:lhs_markup = "plain"$/;"	v
b:lhs_markup	cache-plug/vim-polyglot/syntax/lhaskell.vim	/^	let b:lhs_markup = "tex"$/;"	v
b:lhs_markup	cache-plug/vim-polyglot/syntax/lhaskell.vim	/^	let b:lhs_markup = "unknown"$/;"	v
b:liquid_subtype	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
b:liquid_subtype	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:liquid_subtype	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype	cache-plug/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
b:liquid_subtype	cache-plug/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	cache-plug/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:liquid_subtype	cache-plug/vim-polyglot/syntax/liquid.vim	/^    let b:liquid_subtype = s:subtype$/;"	v
b:liquid_subtype	cache-plug/vim-polyglot/syntax/liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype_indentexpr	cache-plug/vim-polyglot/indent/liquid.vim	/^let b:liquid_subtype_indentexpr = &l:indentexpr$/;"	v
b:loaded_mustache_handlebars	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^let b:loaded_mustache_handlebars = 1$/;"	v
b:loaded_plantuml_plugin	cache-plug/vim-polyglot/ftplugin/plantuml.vim	/^let b:loaded_plantuml_plugin = 1$/;"	v
b:main_syntax	cache-plug/vim-polyglot/syntax/twig.vim	/^  let b:main_syntax = 'twig'$/;"	v
b:main_syntax	cache-plug/vim-polyglot/syntax/twig.vim	/^  let b:main_syntax = b:current_syntax$/;"	v
b:mako_outer_lang	cache-plug/vim-polyglot/syntax/mako.vim	/^    let b:mako_outer_lang = "html"$/;"	v
b:mako_outer_lang	cache-plug/vim-polyglot/syntax/mako.vim	/^    let b:mako_outer_lang = g:mako_default_outer_lang$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/after/ftplugin/coffee.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/after/ftplugin/tsx.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/blade.vim	/^    let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/falcon.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/html.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/j.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/mako.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/mf.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/mp.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/nsis.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let b:match_ignorecase=0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_ignorecase = 1 " (pascal is case-insensitive)$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/plantuml.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/pony.vim	/^let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/postscr.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/spec.vim	/^let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/svelte.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/typescriptreact.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/vb.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/verilog.vim	/^  let b:match_ignorecase=0$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^  let b:match_ignorecase=1$/;"	v
b:match_ignorecase	cache-plug/vim-polyglot/syntax/jst.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_skip	cache-plug/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_skip = 's:comment\\|string'$/;"	v
b:match_skip	cache-plug/vim-polyglot/after/ftplugin/tsx.vim	/^  let b:match_skip = 's:comment\\|string'$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/blade.vim	/^    let b:match_skip = 'synIDattr(synID(line("."), col("."), 0), "name") !=# "bladeKeyword"'$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^	let b:match_skip = 's:comment\\|string\\|regex\\|character'$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^  let b:match_skip =$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/hog.vim	/^    let b:match_skip = 'r:\\\\.\\{-}$\\|^\\s*#.\\{-}$\\|^\\s*$'$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let b:match_skip = 'synIDattr(synID(line("."),col("."),1),"name") =~ '$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/mf.vim	/^  let b:match_skip = 'synIDattr(synID(line("."), col("."), 1), "name")$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/mp.vim	/^  let b:match_skip = 'synIDattr(synID(line("."), col("."), 1), "name")$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/perl.vim	/^let b:match_skip = 's:comment\\|string\\|perlQQ\\|perlShellCommand\\|perlHereDoc\\|perlSubstitution\\|perlTranslation\\|perlMatch\\|perlFormatField'$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/pony.vim	/^let b:match_skip = 's:Comment\\|String\\|Character\\|CaseGuard'$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let b:match_skip =$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/rust.vim	/^let b:match_skip = 's:comment\\|string\\|rustCharacter\\|rustArrow'$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/vala.vim	/^let b:match_skip = 's:comment\\|string\\|character\\|special'$/;"	v
b:match_skip	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^let b:match_skip = 's:comment\\|string\\|zimbuchar'$/;"	v
b:match_words	cache-plug/vim-polyglot/after/ftplugin/coffee.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
b:match_words	cache-plug/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
b:match_words	cache-plug/vim-polyglot/after/ftplugin/jsx.vim	/^  let b:match_words = '<\\@<=\\([^\/][^ \\t>]*\\)\\g{hlend}[^>]*\\%(\/\\@<!>\\|$\\):<\\@<=\/\\1>'$/;"	v
b:match_words	cache-plug/vim-polyglot/after/ftplugin/tsx.vim	/^  let b:match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
b:match_words	cache-plug/vim-polyglot/after/ftplugin/tsx.vim	/^  let b:match_words = '<\\@<=\\([^\/][^ \\t>]*\\)\\g{hlend}[^>]*\\%(\/\\@<!>\\|$\\):<\\@<=\/\\1>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^    let b:match_words = $/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/ada.vim	/^   let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/blade.vim	/^    let b:match_words .= ',' .$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^	let b:match_words = &matchpairs$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    let b:match_words=$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/csc.vim	/^    let b:match_words=$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/dtd.vim	/^    let b:match_words = '<!--:-->,<!:>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^  let b:match_words = '\\:\\@<!\\<\\%(do\\|fn\\)\\:\\@!\\>' .$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/falcon.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/fish.vim	/^let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/framescript.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/haml.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  let b:match_words = b:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/hog.vim	/^    let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/html.vim	/^    let b:match_words = '<:>,' .$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/j.vim	/^  let b:match_words = '^\\%(\\s*Note\\|.\\{-}\\<\\%([0-4]\\|13\\|noun\\|adverb\\|conjunction\\|verb\\|monad\\|dyad\\)\\s\\+\\%(\\:\\s*0\\|def\\s\\+0\\|define\\)\\)\\>:^\\s*\\:\\s*$:^\\s*)\\s*$'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let b:match_words = 'JuliaGetMatchWords()'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/kconfig.vim	/^  let b:match_words = '^\\<menu\\>:\\<endmenu\\>,^\\<if\\>:\\<endif\\>,^\\<choice\\>:\\<endchoice\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let b:match_words .= ','$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let b:match_words .= '\\<\\%(if\\w*\\|unless\\|case\\)\\>:\\<\\%(elsif\\|else\\|when\\)\\>:\\<end\\%(if\\w*\\|unless\\|case\\)\\>,\\<\\%(for\\|tablerow\\)\\>:\\%({%\\s*\\)\\@<=empty\\>:\\<end\\%(for\\|tablerow\\)\\>,<\\(capture\\|comment\\|highlight\\)\\>:\\<end\\1\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let b:match_words = ''$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/make.vim	/^  let b:match_words = '^ *ifn\\=\\(eq\\|def\\)\\>:^ *else\\(\\s\\+ifn\\=\\(eq\\|def\\)\\)\\=\\>:^ *endif\\>,\\<define\\>:\\<endef\\>,^!\\s*if\\(n\\=def\\)\\=\\>:^!\\s*else\\(if\\(n\\=def\\)\\=\\)\\=\\>:^!\\s*endif\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/mako.vim	/^  let b:match_words = "<:>," .$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/mf.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/mp.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/nsis.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let b:match_words = b:mw$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_words .= ',\\<if\\>:\\<else\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_words .= ',\\<repeat\\>:\\<until\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_words .= ':\\<^\\s*\\%(except\\|finally\\)\\>:\\<end\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/pascal.vim	/^    let b:match_words = '\\<\\%(begin\\|case\\|record\\|object\\|try\\)\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^    let b:match_words = '\\<\\%(\\d\\+\\s\\+\\d\\+\\s\\+\\)obj\\>:\\<endobj\\>,\\<stream$:\\<endstream\\>,\\<xref\\>:\\<trailer\\>,<<:>>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/perl.vim	/^let b:match_words = '\\<if\\>:\\<elsif\\>:\\<else\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/plantuml.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/pony.vim	/^let b:match_words = '\\v<%(ifdef|if|match|while|for|repeat|try|with|recover|object|lambda|iftype)>\\m:\\v<%(then|elseif|else|until|do|in|elseiftype)>|\\|\\m:\\<end\\>,(:),\\[:\\],{:}'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/postscr.vim	/^  let b:match_words = '<<:>>,\\<begin\\>:\\<end\\>,\\<save\\>:\\<restore\\>,\\<gsave\\>:\\<grestore\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/pug.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/spec.vim	/^let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let b:match_words = &matchpairs .$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/svelte.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/tex.vim	/^  let b:match_words .= ',\\\\begin\\s*\\({\\a\\+\\*\\=}\\):\\\\end\\s*\\1'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/twig.vim	/^        let b:match_words .= ',' . s:pattern$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/typescriptreact.vim	/^  let b:match_words = exists('b:match_words')$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/vala.vim	/^let b:match_words = '^\\s*#\\s*if\\(\\|def\\|ndef\\)\\>:^\\s*#\\s*elif\\>:^\\s*#\\s*else\\>:^\\s*#\\s*endif\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/vb.vim	/^    let b:match_words=$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/verilog.vim	/^  let b:match_words=$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^  let b:match_words =$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^let b:match_words = '\\(^\\s*\\)\\@<=\\(MODULE\\|CLASS\\|INTERFACE\\|BITS\\|ENUM\\|SHARED\\|FUNC\\|REPLACE\\|DEFINE\\|PROC\\|EQUAL\\|MAIN\\|IF\\|GENERATE_IF\\|WHILE\\|REPEAT\\|WITH\\|DO\\|FOR\\|SWITCH\\|TRY\\)\\>\\|{\\s*$:\\(^\\s*\\)\\@<=\\(ELSE\\|ELSEIF\\|GENERATE_ELSE\\|GENERATE_ELSEIF\\|CATCH\\|FINALLY\\)\\>:\\(^\\s*\\)\\@<=\\(}\\|\\<UNTIL\\>\\)'$/;"	v
b:match_words	cache-plug/vim-polyglot/syntax/cdl.vim	/^let b:match_words='\\<if\\>:\\<then\\>:\\<elseif\\>:\\<else\\>:\\<endif\\>'$/;"	v
b:match_words	cache-plug/vim-polyglot/syntax/cmod.vim	/^let b:match_words = "({:}\\\\@1<=),^\\s*#\\s*\\%(if\\%(n\\?def\\)\\|else\\|el\\%(se\\)\\?if\\|endif\\)\\>"$/;"	v
b:match_words	cache-plug/vim-polyglot/syntax/jst.vim	/^  let b:match_words = '<:>,' .$/;"	v
b:match_words	cache-plug/vim-polyglot/syntax/pike.vim	/^let b:match_words = "({:}\\\\@1<=),(\\\\[:]\\\\@1<=),(<:>\\\\@1<=),^\\s*#\\s*\\%(if\\%(n\\?def\\)\\|else\\|el\\%(se\\)\\?if\\|endif\\)\\>"$/;"	v
b:mw	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw =         '\\<let\\>:\\<and\\>:\\(\\<in\\>\\|;;\\)'$/;"	v
b:mw	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(for\\|while\\)\\>:\\<do\\>:\\<done\\>'$/;"	v
b:mw	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(match\\|try\\)\\>:\\<with\\>'$/;"	v
b:mw	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<\\(object\\|sig\\|struct\\|begin\\)\\>:\\<end\\>'$/;"	v
b:mw	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let b:mw = b:mw . ',\\<if\\>:\\<then\\>:\\<else\\>'$/;"	v
b:ormolu_disable	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^  let b:ormolu_disable = g:ormolu_disable$/;"	v
b:pdf_tagstack	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^    let b:pdf_tagstack = []$/;"	v
b:php_version_id	cache-plug/vim-polyglot/syntax/php.vim	/^  let b:php_version_id = g:php_version_id$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/css.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/graphql.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/html.vim	/^  let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/json.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/less.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/lua.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/markdown.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/php.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/ruby.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/scss.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/typescript.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/vue.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/xml.vim	/^  let b:prettier_ft_default_args = {$/;"	v
b:prettier_ft_default_args	cache-plug/vim-prettier/ftplugin/yaml.vim	/^let b:prettier_ft_default_args = {$/;"	v
b:ragel_subtype	cache-plug/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'cpp'$/;"	v
b:ragel_subtype	cache-plug/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'objc'$/;"	v
b:ragel_subtype	cache-plug/vim-polyglot/syntax/ragel.vim	/^      let b:ragel_subtype = 'ruby'$/;"	v
b:ragel_subtype	cache-plug/vim-polyglot/syntax/ragel.vim	/^    let b:ragel_subtype = g:ragel_default_subtype$/;"	v
b:ragel_subtype	cache-plug/vim-polyglot/syntax/ragel.vim	/^    let b:ragel_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.rl\\|\\.ragel\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:ragel_subtype	cache-plug/vim-polyglot/syntax/ragel.vim	/^  let b:ragel_subtype = matchstr(s:lines, 'ragel_subtype=\\zs\\w\\+')$/;"	v
b:ran_once	cache-plug/vim-polyglot/indent/twig.vim	/^let b:ran_once = 1$/;"	v
b:ruby_no_expensive	cache-plug/vim-polyglot/syntax/haml.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:ruby_no_expensive	cache-plug/vim-polyglot/syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
b:ruby_no_expensive	cache-plug/vim-polyglot/syntax/slim.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:ruby_version	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^    let b:ruby_version = get(readfile(s:version_file, '', 1), '')$/;"	v
b:rust_last_args	cache-plug/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_last_args = []$/;"	v
b:rust_last_rustc_args	cache-plug/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_last_rustc_args = []$/;"	v
b:rust_original_delimitMate_excluded_regions	cache-plug/vim-polyglot/ftplugin/rust.vim	/^        let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions$/;"	v
b:rust_set_conceallevel	cache-plug/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_set_conceallevel=1$/;"	v
b:rust_set_foldmethod	cache-plug/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_set_foldmethod=1$/;"	v
b:rust_set_style	cache-plug/vim-polyglot/ftplugin/rust.vim	/^    let b:rust_set_style = 1$/;"	v
b:smartcomment_force_linemode	cache-plug/vim-polyglot/ftplugin/julia.vim	/^let b:smartcomment_force_linemode = 1      " for carlobaldassi\/vim-smartcomment$/;"	v
b:spell_options	cache-plug/vim-polyglot/syntax/dart.vim	/^let b:spell_options = 'contained'$/;"	v
b:spell_options	cache-plug/vim-polyglot/syntax/groovy.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	cache-plug/vim-polyglot/syntax/haxe.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	cache-plug/vim-polyglot/syntax/java.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	cache-plug/vim-polyglot/syntax/wsml.vim	/^let b:spell_options="contained"$/;"	v
b:sql_compl_savefunc	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let b:sql_compl_savefunc = &omnifunc$/;"	v
b:sql_type_override	cache-plug/vim-polyglot/syntax/php.vim	/^    let b:sql_type_override='mysql'$/;"	v
b:sql_vis	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let b:sql_vis = 1$/;"	v
b:surround_35	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_35 = "<%# \\r %>"$/;"	v
b:surround_45	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_45 = "<% \\r %>"$/;"	v
b:surround_5	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_5 = "<% \\r %>\\n<% end %>"$/;"	v
b:surround_61	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let b:surround_61 = "<%= \\r %>"$/;"	v
b:svg_indent_close	cache-plug/vim-polyglot/indent/svg.vim	/^  let b:svg_indent_close = '.\\{-}<\/'$/;"	v
b:svg_indent_open	cache-plug/vim-polyglot/indent/svg.vim	/^  let b:svg_indent_open = '.\\{-}<\\a'$/;"	v
b:tex_isk	cache-plug/vim-polyglot/syntax/tex.vim	/^  let b:tex_isk= '@,'.g:tex_isk$/;"	v
b:tex_isk	cache-plug/vim-polyglot/syntax/tex.vim	/^  let b:tex_isk= g:tex_isk$/;"	v
b:tex_isk	cache-plug/vim-polyglot/syntax/tex.vim	/^ let b:tex_isk="48-57,a-z,A-Z,192-255"$/;"	v
b:tex_isk	cache-plug/vim-polyglot/syntax/tex.vim	/^ let b:tex_isk="@,48-57,a-z,A-Z,192-255"$/;"	v
b:tex_stylish	cache-plug/vim-polyglot/syntax/tex.vim	/^  let b:tex_stylish= 0$/;"	v
b:tex_stylish	cache-plug/vim-polyglot/syntax/tex.vim	/^  let b:tex_stylish= 1$/;"	v
b:tex_stylish	cache-plug/vim-polyglot/syntax/tex.vim	/^ let b:tex_stylish= g:tex_stylish$/;"	v
b:tsx_match_words	cache-plug/vim-polyglot/ftplugin/typescriptreact.vim	/^  let b:tsx_match_words = '(:),\\[:\\],{:},<:>,' .$/;"	v
b:tsx_ts_indentexpr	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^let b:tsx_ts_indentexpr = &indentexpr$/;"	v
b:tt2_syn_inc_perl	cache-plug/vim-polyglot/syntax/tt2.vim	/^    let b:tt2_syn_inc_perl = 1$/;"	v
b:tt2_syn_tags	cache-plug/vim-polyglot/syntax/tt2.vim	/^    let b:tt2_syn_tags = '\\[% %]'$/;"	v
b:twigMatchWords	cache-plug/vim-polyglot/ftplugin/twig.vim	/^    let b:twigMatchWords = [$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/after/ftplugin/javascript-1.vim	/^  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/after/ftplugin/javascript-1.vim	/^  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/a2ps.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/aap.vim	/^let b:undo_ftplugin = "setl fo< com< et<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^    let b:undo_ftplugin .= " foldexpr< foldmethod<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^    let b:undo_ftplugin .= "|unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^    let b:undo_ftplugin .= "|unlet! b:match_ignorecase b:match_words"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^let b:undo_ftplugin .= "|unmap <buffer> [[|unmap <buffer> ]]"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^let b:undo_ftplugin = "let s:cpo_save = &cpoptions|"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^let b:undo_ftplugin = "setlocal include< includeexpr< isfname<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/alsaconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ansible_hosts.vim	/^let b:undo_ftplugin = "setl comments< commentstring< formatoptions<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ant.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/arch.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^let b:undo_ftplugin = "unlet! b:match_words b:match_ignorecase b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/awk.vim	/^    let b:undo_ftplugin .= " | setl fp<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/awk.vim	/^  let b:undo_ftplugin .= " | setl inc< path<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/awk.vim	/^let b:undo_ftplugin = "setl fo< com< cms< def< sua<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/bdf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/bst.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/calendar.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/cdrdaoconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/cfg.vim	/^let b:undo_ftplugin = "setl cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^		let b:undo_ftplugin .= ' | setlocal ' . s:setting . '<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | setlocal path<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:browsefilter'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:match_words b:match_skip'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^let b:undo_ftplugin = 'setlocal iskeyword< define< formatoptions< comments< commentstring< lispwords<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    let b:undo_ftplugin = b:undo_ftplugin .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo< et< tw<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/config.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . b:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/crm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/csc.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/css.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo< ofu<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^  let b:undo_ftplugin .=$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^let b:undo_ftplugin = "setl fo< com< cms< ofu<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/cvsrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/dart.vim	/^let b:undo_ftplugin = 'setl et< fo< sw< sts< com< cms< inex< isf<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^let b:undo_ftplugin = 'setlocal tw< comments< foldmethod< foldexpr< foldtext<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/debcontrol.vim	/^let b:undo_ftplugin = 'setlocal tw< foldmethod< foldexpr< foldtext<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/denyhosts.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/dictconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/dictdconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/diff.vim	/^let b:undo_ftplugin = "setl modeline<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/dircolors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/dockerfile.vim	/^let b:undo_ftplugin = "setl commentstring<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/dosbatch.vim	/^let b:undo_ftplugin = "setlocal comments< formatoptions< keywordprg<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/dosini.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/dtd.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^let b:undo_ftplugin = 'setlocal comments< commentstring< shiftwidth<' .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^let b:undo_ftplugin = "setl cms< " .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/elinks.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/elixir.vim	/^let b:undo_ftplugin = 'setlocal sw< sts< et< isk< com< cms< path< inex< sua< def< fo<'.$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^let b:undo_ftplugin = "setlocal foldmethod< foldexpr< foldtext<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let b:undo_ftplugin = "setl cms< " .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/eterm.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/falcon.vim	/^let b:undo_ftplugin = "setlocal tabstop< shiftwidth< expandtab< fileencoding<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/fetchmail.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^let b:undo_ftplugin = "setl fo< com< tw< cms< et< inc< sua<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/framescript.vim	/^let b:undo_ftplugin = "setl com< cms< fo< inc< | unlet! b:matchwords"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/fvwm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/gdb.vim	/^let b:undo_ftplugin = "setlocal cms<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/git.vim	/^let b:undo_ftplugin = "setl keywordprg< path< includeexpr<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/gitcommit.vim	/^let b:undo_ftplugin = 'setl modeline< tabstop< formatoptions< tw< com< cms< formatlistpat<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/gitcommit.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|delc DiffGitCached"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/gitconfig.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/gitignore.vim	/^let b:undo_ftplugin = 'setlocal commentstring<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^  let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|exe 'nunmap <buffer> K'|exe 'nunmap <buffer> <C-A>'|exe 'nunmap <buffer> <C-X>'"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin."|setl com< cms< fo< ml<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/gpg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/graphql.vim	/^let b:undo_ftplugin = 'setlocal com< cms< fo< isk< sts< sw< et<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/groovy.vim	/^let b:undo_ftplugin = 'setlocal commentstring<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/group.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/grub.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/haml.vim	/^let b:undo_ftplugin = "setl def< cms< com< "$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^let b:undo_ftplugin = "setl fo< com< tw< commentstring<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/hcl.vim	/^let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/help.vim	/^let b:undo_ftplugin = "setl fo< tw< cole< cocu< keywordprg<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/hgcommit.vim	/^let b:undo_ftplugin = 'setl modeline<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/hostconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/hostsaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/html.vim	/^let b:undo_ftplugin = "setlocal commentstring< matchpairs< omnifunc< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/indent.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/j.vim	/^  let b:undo_ftplugin .= ' | unlet! b:browsefilter'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/j.vim	/^  let b:undo_ftplugin .= ' | unlet! b:match_ignorecase b:match_words'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/j.vim	/^let b:undo_ftplugin .= ' | silent! execute "unmap <buffer> ]]"'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/j.vim	/^let b:undo_ftplugin = 'setlocal suffixesadd< includeexpr< include< path< matchpairs< formatoptions< commentstring< comments< iskeyword<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/java.vim	/^let b:undo_ftplugin = "setlocal suffixes< suffixesadd<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/jproperties.vim	/^let b:undo_ftplugin = "setl cms< com< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/julia.vim	/^    let b:undo_ftplugin .= " | call julia_blocks#remove_mappings()"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let b:undo_ftplugin = b:undo_ftplugin . " | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/julia.vim	/^let b:undo_ftplugin .= " | delcommand JuliaDoc | delcommand JuliaDocKeywordprg"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/julia.vim	/^let b:undo_ftplugin .= " | setlocal keywordprg<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/julia.vim	/^let b:undo_ftplugin = "setlocal include< suffixesadd< comments< commentstring<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/juliadoc.vim	/^  let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/juliadoc.vim	/^let b:undo_ftplugin .= " | delcommand JuliaDoc | delcommand JuliaDocKeywordprg"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/juliadoc.vim	/^let b:undo_ftplugin .= " | setlocal keywordprg<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/juliadoc.vim	/^let b:undo_ftplugin .= 'setlocal conceallevel< concealcursor< wrap<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/kconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/kwt.vim	/^    let b:undo_ftplugin = "setlocal efm<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/kwt.vim	/^    let b:undo_ftplugin = b:undo_ftplugin . " | setlocal efm<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ld.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/less.vim	/^let b:undo_ftplugin = "setl cms< def< inc< inex< ofu< sua<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/lftp.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/libao.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/limits.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let b:undo_ftplugin .= '|'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^let b:undo_ftplugin .= 'setl cms< | unlet! b:browsefilter b:match_words'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/lisp.vim	/^let b:undo_ftplugin = "setlocal comments< define< formatoptions< iskeyword< lisp< commentstring<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/logcheck.vim	/^let b:undo_ftplugin = 'setl fo<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/loginaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/logindefs.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/logtalk.vim	/^let b:undo_ftplugin = "setl ts< sw< fdm< fdc< ai< dict<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/m4.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/mail.vim	/^let b:undo_ftplugin = "setl modeline< tw< fo< comments<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/mailaliases.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/mailcap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/make.vim	/^let b:undo_ftplugin = "setl et< sts< sw< fo< com< cms< inc<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/manconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/mf.vim	/^let b:undo_ftplugin = "setl com< cms< fo< sua< inc< def< ofu<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/modconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/moon.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/mp.vim	/^let b:undo_ftplugin = "setl com< cms< fo< sua< inc< def< ofu<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/mplayerconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/mrxvtrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/muttrc.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/nanorc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/neomuttrc.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/netrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/nsis.vim	/^let b:undo_ftplugin = "setl com< cms< fo< def< inc<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let b:undo_ftplugin = "setlocal efm< foldmethod< foldexpr<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/occam.vim	/^let b:undo_ftplugin = "setlocal shiftwidth< softtabstop< expandtab<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/pamconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/pascal.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/passwd.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^let b:undo_ftplugin .= " | silent! nunmap <buffer> <C-]> | silent! nunmap <buffer> <C-T>"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^let b:undo_ftplugin = "setlocal cms< com< | unlet! b:match_words"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/perl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isk< isf< kp< path<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/pinfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/pony.vim	/^let b:undo_ftplugin = 'set comments< commentstring< formatoptions< path< include< includeexpr< define< isident< iskeyword< suffixesadd< matchpairs<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/postscr.vim	/^let b:undo_ftplugin = "setlocal comments< formatoptions<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/procmail.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/prolog.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/protocols.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ps1.vim	/^let b:undo_ftplugin = "setlocal tw< cms< fo< iskeyword< keywordprg<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ps1xml.vim	/^let b:undo_ftplugin = "setlocal tw< cms< fo<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/pug.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/puppet.vim	/^let b:undo_ftplugin = "$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/qml.vim	/^let b:undo_ftplugin =$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/quake.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/racket.vim	/^let b:undo_ftplugin =$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/raku.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isf< isk< kp< path<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/readline.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rmd.vim	/^  let b:undo_ftplugin .= " | setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rmd.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rnc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rnoweb.vim	/^  let b:undo_ftplugin .= " | setl isk< sua< com< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rnoweb.vim	/^  let b:undo_ftplugin = "setl isk< sua< com< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rpl.vim	/^let b:undo_ftplugin = "setlocal fo< comments<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rrst.vim	/^  let b:undo_ftplugin .= " | setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rrst.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rst.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= "| setl bexpr="$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= ' | setl sw< sts< et<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^let b:undo_ftplugin .= "| sil! cunmap <buffer> <Plug><ctag>| sil! cunmap <buffer> <Plug><cfile>"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^let b:undo_ftplugin = "setl inc= sua= path= tags= fo< com< cms< kp="$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/rust.vim	/^let b:undo_ftplugin = "$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/sass.vim	/^  let b:undo_ftplugin .= ' isk<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/sass.vim	/^let b:undo_ftplugin = "setl com< cms< def< inc< inex< ofu< sua<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/scheme.vim	/^let b:undo_ftplugin = 'setl lisp< comments< commentstring< define< iskeyword<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/scheme.vim	/^let b:undo_ftplugin = b:undo_ftplugin . ' lispwords<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/screen.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/sensors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/services.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/setserial.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/sieve.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/slim.vim	/^let b:undo_ftplugin = "setl isk<" . " | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/slpconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/slpreg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/slpspi.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/spec.vim	/^let b:undo_ftplugin = "unlet! b:match_ignorecase b:match_words"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let b:undo_ftplugin = "setl comments< formatoptions< define< omnifunc<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/sshconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^let b:undo_ftplugin = "setl cms< com< "$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/sudoers.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/sysctl.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/systemd.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/tcl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isf< kp<" .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/terminfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^  let b:undo_ftplugin .= ' foldmethod<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^  let b:undo_ftplugin .= ' iskeyword<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^  let b:undo_ftplugin .= '|iunmap <buffer> ='$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^let b:undo_ftplugin .= ' commentstring<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^let b:undo_ftplugin .= '|delcommand Terraform|delcommand TerraformFmt'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^let b:undo_ftplugin = 'setlocal formatoptions<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/tex.vim	/^let b:undo_ftplugin .= "| setl inex<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/text.vim	/^let b:undo_ftplugin = 'setlocal comments< commentstring<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/tmux.vim	/^let b:undo_ftplugin = "setlocal comments< commentstring<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/toml.vim	/^let b:undo_ftplugin = 'setlocal commentstring< comments<'$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/treetop.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/twig.vim	/^  let b:undo_ftplugin .= "|setlocal comments< formatoptions<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/twig.vim	/^  let b:undo_ftplugin = "setlocal comments< formatoptions<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/udevconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/udevperm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/updatedb.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/verilog.vim	/^let b:undo_ftplugin = "setlocal fo< com< tw<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/vroom.vim	/^let b:undo_ftplugin = 'setlocal formatoptions< shiftwidth< softtabstop<' .$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/wast.vim	/^let b:undo_ftplugin = "setlocal comments< commentstring< formatoptions< iskeyword<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xdefaults.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xf86conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xinetd.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xmodmap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xsd.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/yaml.vim	/^  let b:undo_ftplugin .= " sw< sts<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/yaml.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/zig.vim	/^let b:undo_ftplugin =$/;"	v
b:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^let b:undo_ftplugin = "setl fo< com< ofu< efm< tw< et< sts< sw< | if has('vms') | setl isk< | endif"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/after/indent/html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/arduino.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/autohotkey.vim	/^let b:undo_indent = 'setlocal '.join([$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/bib.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/clojure.vim	/^	let b:undo_indent .= '| setlocal lisp<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/clojure.vim	/^let b:undo_indent = 'setlocal autoindent< smartindent< expandtab< softtabstop< shiftwidth< indentexpr< indentkeys<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/cs.vim	/^let b:undo_indent = 'setlocal indentexpr<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/css.vim	/^let b:undo_indent = "setl smartindent< indentkeys< indentexpr<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/cucumber.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/cuda.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/dart.vim	/^let b:undo_indent = 'setl cin< cino<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/fennel.vim	/^	let b:undo_indent .= '| setlocal lisp<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/gitconfig.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/hog.vim	/^let b:undo_indent = 'setlocal smartindent< indentexpr< indentkeys<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/j.vim	/^let b:undo_indent = 'setlocal indentkeys< indentexpr<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/java.vim	/^let b:undo_indent = "set cin< cino< indentkeys< indentexpr<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/lifelines.vim	/^let b:undo_indent = "setl cin< cino< cinw<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/lisp.vim	/^let b:undo_indent = "setl ai< si<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/mp.vim	/^let b:undo_indent = "setl indentkeys< indentexpr<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/pony.vim	/^let b:undo_indent = 'set lisp< cindent< autoindent< smartindent< indentexpr< indentkeys< cinkeys< cinwords<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/proto.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/ps1.vim	/^let b:undo_indent = "setl si<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/puppet.vim	/^let b:undo_indent = "$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/racket.vim	/^let b:undo_indent = "setl ai< si<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/rpl.vim	/^let b:undo_indent = "set ai< indentkeys< indentexpr<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/scss.vim	/^let b:undo_indent = 'setl smartindent< indentkeys< indentexpr<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/sshconfig.vim	/^let b:undo_indent = "setlocal autoindent< indentexpr< indentkeys<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/terraform.vim	/^let b:undo_indent = 'setlocal lisp< autoindent< shiftwidth< tabstop< softtabstop<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/vb.vim	/^let b:undo_indent = "set ai< indentexpr< indentkeys<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/vroom.vim	/^let b:undo_indent = 'setlocal autoindent<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/wast.vim	/^let b:undo_indent = "setl lisp< indentexpr<"$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/yaml.vim	/^let b:undo_indent = 'setlocal indentexpr< indentkeys< smartindent<'$/;"	v
b:undo_indent	cache-plug/vim-polyglot/indent/zimbu.vim	/^let b:undo_indent = "setl et< sw< ai< indentkeys< indentexpr="$/;"	v
b:vala_minlines	cache-plug/vim-polyglot/syntax/vala.vim	/^  let b:vala_minlines = 50$/;"	v
b:vala_minlines	cache-plug/vim-polyglot/syntax/vala.vim	/^  let b:vala_minlines = vala_minlines$/;"	v
b:vera_minlines	cache-plug/vim-polyglot/syntax/vera.vim	/^    let b:vera_minlines = 15	" mostly for () constructs$/;"	v
b:vera_minlines	cache-plug/vim-polyglot/syntax/vera.vim	/^    let b:vera_minlines = 50	" #if 0 constructs can be long$/;"	v
b:vera_minlines	cache-plug/vim-polyglot/syntax/vera.vim	/^  let b:vera_minlines = vera_minlines$/;"	v
b:vhdl_explore	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^let b:vhdl_explore = '\\%(architecture\\|block\\|configuration\\|component\\|entity\\|function\\|package\\|procedure\\|process\\|record\\|units\\)'$/;"	v
b:xf86conf_xfree86_version	cache-plug/vim-polyglot/syntax/xf86conf.vim	/^		let b:xf86conf_xfree86_version = 4$/;"	v
b:xf86conf_xfree86_version	cache-plug/vim-polyglot/syntax/xf86conf.vim	/^		let b:xf86conf_xfree86_version = xf86conf_xfree86_version$/;"	v
b:yaml_schema	cache-plug/vim-polyglot/syntax/yaml.vim	/^    let b:yaml_schema = 'core'$/;"	v
b:yaml_schema	cache-plug/vim-polyglot/syntax/yaml.vim	/^    let b:yaml_schema = g:yaml_schema$/;"	v
balance_matchpairs	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:balance_matchpairs(char) "{{{$/;"	f
base	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^    let base = split(pkg, '\\.')$/;"	v
bash	cache-plug/fzf/test/test_go.rb	/^    def bash$/;"	f	class:Shell
basicMatch	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f
binary_search	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
black	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:black(x) abort$/;"	f
blocks_graph_at	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:blocks_graph_at(linum) abort$/;"	f
bmenu_priority	cache-plug/vim-polyglot/extras/menu.vim	/^  let bmenu_priority = 60$/;"	v
body_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let body_attributes = {'onafterprint': [], 'onbeforeprint': [], 'onbeforeunload': [], 'onblur': [], 'onerror': [], 'onfocus': [], 'onhashchange': [], 'onload': [], 'onmessage': [], 'onoffline': [], 'ononline': [], 'onpopstate': [], 'onredo': [], 'onresize': [], 'onstorage': [], 'onundo': [], 'onunload': []}$/;"	v
body_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let body_attributes = {}$/;"	v
bonusAt	cache-plug/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f
bonusBoundary	cache-plug/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c
bonusCamel123	cache-plug/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtention$/;"	c
bonusConsecutive	cache-plug/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtention)$/;"	c
bonusFirstCharMultiplier	cache-plug/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c
bonusFor	cache-plug/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f
bonusNonWord	cache-plug/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c
boolQuadGen	cache-plug/vim-polyglot/syntax/neomuttrc.vim	/^function! s:boolQuadGen(type, vars, deprecated)$/;"	f
border_opt	cache-plug/fzf/plugin/fzf.vim	/^function! s:border_opt(window)$/;"	f
brace_expansion	cache-plug/vim-polyglot/scripts/build	/^def brace_expansion(s)$/;"	f	class:rules_to_code.rule_to_code
brace_expansion	cache-plug/vim-polyglot/scripts/import_vim	/^def brace_expansion(s)$/;"	f
bracket_type	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:bracket_type(char)$/;"	f
bracket_type	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:bracket_type(char)$/;"	f
break	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
browser_open_command	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:browser_open_command() abort$/;"	f
bsub	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^function! s:bsub(target,pattern,replacement)$/;"	f
btags_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
btags_source	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
buf_line_count	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:buf_line_count(bufnr) abort$/;"	f
buffer_line_handler	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
buffer_lines	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
buffer_repo	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_type	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
buflisted	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
bufopen	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
buftabline#render	cache-plug/vim-buftabline/plugin/buftabline.vim	/^function! buftabline#render()$/;"	f
buftabline#update	cache-plug/vim-buftabline/plugin/buftabline.vim	/^function! buftabline#update(zombie)$/;"	f
buftabline#user_buffers	cache-plug/vim-buftabline/plugin/buftabline.vim	/^function! buftabline#user_buffers() " help buffers are always unlisted, but quickfix buffers are not$/;"	f
buildCacheKey	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f
buildConfigKeys	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:buildConfigKeys()$/;"	f
buildLists	cache-plug/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f
buildPlusList	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, []*Item) {$/;"	f
buildResult	cache-plug/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f
build_command	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:build_command(cmd)$/;"	f
build_path	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! s:build_path(path) abort$/;"	f
byBegin	cache-plug/fzf/src/options.go	/^	byBegin$/;"	c
byEnd	cache-plug/fzf/src/options.go	/^	byEnd$/;"	c
byLength	cache-plug/fzf/src/options.go	/^	byLength$/;"	c
byScore	cache-plug/fzf/src/options.go	/^	byScore criterion = iota$/;"	c
byTimeOrder	cache-plug/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t
c	plugin/bepo.vim	/^noremap c h$/;"	m
cache_project_root	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
cacheable	cache-plug/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f
calc_size	cache-plug/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
calculateScore	cache-plug/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx int, eidx int, withPos bool) (int, *[]int) {$/;"	f
calculateSize	cache-plug/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, occupied int, minSize int, pad int) int {$/;"	f
call	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:call(method, params, cont)$/;"	f
callback	cache-plug/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
camelize	cache-plug/vim-polyglot/scripts/build	/^def camelize(str)$/;"	f
can_diffoff	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
cancelPreview	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) cancelPreview() {$/;"	f
capture	cache-plug/fzf/test/test_go.rb	/^  def capture$/;"	f	class:Tmux
cargo#Load	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#Load()$/;"	f
cargo#bench	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#bench(args)$/;"	f
cargo#build	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#build(args)$/;"	f
cargo#check	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#check(args)$/;"	f
cargo#clean	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#clean(args)$/;"	f
cargo#cmd	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#cmd(args) abort$/;"	f
cargo#doc	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#doc(args)$/;"	f
cargo#init	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#init(args)$/;"	f
cargo#install	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#install(args)$/;"	f
cargo#nearestCargo	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#nearestCargo(is_getcwd) abort$/;"	f
cargo#nearestRootCargo	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#nearestRootCargo(is_getcwd) abort$/;"	f
cargo#nearestWorkspaceCargo	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#nearestWorkspaceCargo(is_getcwd) abort$/;"	f
cargo#new	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#new(args)$/;"	f
cargo#publish	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#publish(args)$/;"	f
cargo#quickfix#CmdPost	cache-plug/vim-polyglot/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPost() abort$/;"	f
cargo#quickfix#CmdPre	cache-plug/vim-polyglot/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPre() abort$/;"	f
cargo#run	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#run(args)$/;"	f
cargo#runtarget	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#runtarget(args)$/;"	f
cargo#search	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#search(args)$/;"	f
cargo#test	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#test(args)$/;"	f
cargo#update	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! cargo#update(args)$/;"	f
carp_syntax_init	cache-plug/vim-polyglot/syntax/carp.vim	/^    let carp_syntax_init = 1$/;"	v
cexpr	cache-plug/vim-polyglot/autoload/dart.vim	/^function! s:cexpr(errorformat, lines, reason) abort$/;"	f
cfile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
changelogMenu	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^augroup changelogMenu$/;"	a
charClass	cache-plug/fzf/src/algo/algo.go	/^type charClass int$/;"	t
charClassOf	cache-plug/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f
charClassOfAscii	cache-plug/fzf/src/algo/algo.go	/^func charClassOfAscii(char rune) charClass {$/;"	f
charClassOfNonAscii	cache-plug/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f
charLetter	cache-plug/fzf/src/algo/algo.go	/^	charLetter$/;"	c
charLower	cache-plug/fzf/src/algo/algo.go	/^	charLower$/;"	c
charNonWord	cache-plug/fzf/src/algo/algo.go	/^	charNonWord charClass = iota$/;"	c
charNumber	cache-plug/fzf/src/algo/algo.go	/^	charNumber$/;"	c
charUpper	cache-plug/fzf/src/algo/algo.go	/^	charUpper$/;"	c
char_range	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
chars	cache-plug/vim-polyglot/syntax/xpm.vim	/^	 let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	cache-plug/vim-polyglot/syntax/xpm.vim	/^	 let chars = substitute(chars, '.$', '', '')$/;"	v
chars	cache-plug/vim-polyglot/syntax/xpm.vim	/^	 let chars = substitute(s, '"\\(.\\{'.cpp.'}\\s\\).*"', '\\1', '')$/;"	v
chars	cache-plug/vim-polyglot/syntax/xpm.vim	/^let chars  = ""$/;"	v
chars	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let chars = substitute(chars, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
chars	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let chars = substitute(chars, '\\\\s\\\\+$', '', '')$/;"	v
chars	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let chars = substitute(s, '\\(.\\{'.cpp.'}\\s\\+\\).*', '\\1', '')$/;"	v
chars	cache-plug/vim-polyglot/syntax/xpm2.vim	/^  let chars  = ""$/;"	v
charset	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let charset = [$/;"	v
checkAscii	cache-plug/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f
checkAutocmd	cache-plug/coc.nvim/autoload/health/coc.vim	/^function! s:checkAutocmd()$/;"	f
checkCommand	cache-plug/coc.nvim/autoload/health/coc.vim	/^function! s:checkCommand()$/;"	f
checkEnvironment	cache-plug/coc.nvim/autoload/health/coc.vim	/^function! s:checkEnvironment() abort$/;"	f
checkInitailize	cache-plug/coc.nvim/autoload/health/coc.vim	/^function! s:checkInitailize() abort$/;"	f
checkVersion	cache-plug/coc.nvim/plugin/coc.vim	/^function! s:checkVersion() abort$/;"	f
check_back_space	plugin/coc.vim	/^function! s:check_back_space() abort$/;"	f
check_back_space	plugin/scala.vim	/^function! s:check_back_space() abort$/;"	f
check_binary	cache-plug/fzf/install	/^check_binary() {$/;"	f
check_for_string	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:check_for_string()$/;"	f
check_for_string	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:check_for_string()$/;"	f
check_requirements	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:check_requirements()$/;"	f
chill_minlines	cache-plug/vim-polyglot/syntax/chill.vim	/^  let chill_minlines = 15$/;"	v
chomp	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
chomp	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
choose	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^function! s:choose(word) abort$/;"	f
chop	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
chunkSize	cache-plug/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c
cleanTemporaryFiles	cache-plug/fzf/src/terminal.go	/^func cleanTemporaryFiles() {$/;"	f
cleanse	cache-plug/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f
cleanup	cache-plug/fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
clear	cache-plug/lightline.vim/test/link.vim	/^function! s:clear()$/;"	f
clear	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! s:clear(bufnr)$/;"	f
clear	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:clear(list) abort$/;"	f
clearChunkCache	cache-plug/fzf/src/pattern.go	/^func clearChunkCache() {$/;"	f
clearCode	cache-plug/fzf/src/terminal.go	/^const clearCode string = "\\x1b[2J"$/;"	c
clearPatternCache	cache-plug/fzf/src/pattern.go	/^func clearPatternCache() {$/;"	f
clearQfList	cache-plug/vim-polyglot/autoload/dart.vim	/^function! s:clearQfList(reason) abort$/;"	f
clojure_check_for_string_worker	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_check_for_string_worker()$/;"	f
clojure_indent_pos	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_indent_pos()$/;"	f
clojure_is_method_special_case_worker	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:clojure_is_method_special_case_worker(position)$/;"	f
clojurecomplete#Complete	cache-plug/vim-polyglot/autoload/clojurecomplete.vim	/^function! clojurecomplete#Complete(findstart, base)$/;"	f
closePlatform	cache-plug/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) closePlatform() {$/;"	f
closePlatform	cache-plug/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) closePlatform() {$/;"	f
close_hunk_preview_window	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:close_hunk_preview_window()$/;"	f
close_win	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:close_win(winid) abort$/;"	f
close_win	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! s:close_win(winid) abort$/;"	f
cmd	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^    let cmd = s:is_win ? join(a:cmd, ' ') : a:cmd$/;"	v
cmd	cache-plug/coc.nvim/autoload/coc/util.vim	/^      let cmd = 'cmd.exe \/C "'.cmd.'"'$/;"	v
cmd	cache-plug/fzf/plugin/fzf.vim	/^      let cmd = 'start \/wait cmd \/c '.command$/;"	v
cmd	cache-plug/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
cmd_history_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
coc#_cancel	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_cancel()$/;"	f
coc#_complete	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_complete() abort$/;"	f
coc#_do_complete	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_do_complete(start, items, preselect)$/;"	f
coc#_hide	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_hide() abort$/;"	f
coc#_insert_key	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_insert_key(method, key, ...) abort$/;"	f
coc#_map	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_map()$/;"	f
coc#_select	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_select() abort$/;"	f
coc#_select_confirm	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_select_confirm() abort$/;"	f
coc#_selected	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_selected()$/;"	f
coc#_unmap	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_unmap()$/;"	f
coc#_unwatch	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_unwatch(key)$/;"	f
coc#_watch	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#_watch(key)$/;"	f
coc#add_command	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#add_command(id, cmd, ...)$/;"	f
coc#add_extension	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#add_extension(...)$/;"	f
coc#api#call	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! coc#api#call(method, args) abort$/;"	f
coc#api#func_names	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! coc#api#func_names() abort$/;"	f
coc#api#notify	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! coc#api#notify(method, args) abort$/;"	f
coc#client#create	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#create(name, command)$/;"	f
coc#client#get_channel	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#get_channel(client)$/;"	f
coc#client#get_client	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#get_client(name) abort$/;"	f
coc#client#is_running	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#is_running(name) abort$/;"	f
coc#client#notify	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#notify(name, method, args)$/;"	f
coc#client#on_response	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#on_response(name, id, resp, isErr)$/;"	f
coc#client#open_log	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#open_log()$/;"	f
coc#client#request	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request(name, method, args)$/;"	f
coc#client#request_async	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request_async(name, method, args, cb)$/;"	f
coc#client#restart	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart(name) abort$/;"	f
coc#client#restart_all	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart_all()$/;"	f
coc#client#stop	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! coc#client#stop(name) abort$/;"	f
coc#color#rgb2term	cache-plug/coc.nvim/autoload/coc/color.vim	/^function! coc#color#rgb2term(rgb)$/;"	f
coc#compat#buf_del_keymap	cache-plug/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_del_keymap(bufnr, mode, lhs) abort$/;"	f
coc#compat#buf_win_id	cache-plug/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_win_id(bufnr) abort$/;"	f
coc#compat#clear_matches	cache-plug/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#clear_matches(winid) abort$/;"	f
coc#compat#execute	cache-plug/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#execute(winid, command) abort$/;"	f
coc#compat#matchaddgroups	cache-plug/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#matchaddgroups(winid, groups) abort$/;"	f
coc#compat#matchaddpos	cache-plug/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#matchaddpos(group, pos, priority, winid) abort$/;"	f
coc#compat#win_is_valid	cache-plug/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#win_is_valid(winid) abort$/;"	f
coc#config	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#config(section, value)$/;"	f
coc#do_notify	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#do_notify(id, method, result)$/;"	f
coc#expandable	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#expandable() abort$/;"	f
coc#expandableOrJumpable	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#expandableOrJumpable() abort$/;"	f
coc#float#check_related	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#check_related() abort$/;"	f
coc#float#close	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close(winid) abort$/;"	f
coc#float#close_all	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_all() abort$/;"	f
coc#float#close_auto_hide_wins	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_auto_hide_wins(...) abort$/;"	f
coc#float#close_i	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_i(winid) abort$/;"	f
coc#float#close_related	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_related(winid, ...) abort$/;"	f
coc#float#content_height	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#content_height(bufnr, width, wrap) abort$/;"	f
coc#float#create_border_lines	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_border_lines(border, title, width, height, hasbtn) abort$/;"	f
coc#float#create_buf	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_buf(bufnr, ...) abort$/;"	f
coc#float#create_cursor_float	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_cursor_float(winid, bufnr, lines, config) abort$/;"	f
coc#float#create_dialog	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_dialog(lines, config) abort$/;"	f
coc#float#create_float_win	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_float_win(winid, bufnr, config) abort$/;"	f
coc#float#create_menu	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_menu(lines, config) abort$/;"	f
coc#float#create_notification	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_notification(lines, config) abort$/;"	f
coc#float#create_prompt_win	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_prompt_win(title, default, opts) abort$/;"	f
coc#float#create_pum_float	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_pum_float(winid, bufnr, lines, config) abort$/;"	f
coc#float#cursor_relative	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#cursor_relative(winid) abort$/;"	f
coc#float#get_config_cursor	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_config_cursor(lines, config) abort$/;"	f
coc#float#get_float_win	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_float_win() abort$/;"	f
coc#float#get_float_win_list	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_float_win_list() abort$/;"	f
coc#float#get_related	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_related(winid, kind) abort$/;"	f
coc#float#has_float	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#has_float() abort$/;"	f
coc#float#has_scroll	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#has_scroll() abort$/;"	f
coc#float#jump	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#jump() abort$/;"	f
coc#float#nvim_border_win	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_border_win(config, winid, border, title, hasbtn, hlgroup, related) abort$/;"	f
coc#float#nvim_buttons	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_buttons(config, winid, buttons, borderbottom, pad, hlgroup, borderhighlight, related) abort$/;"	f
coc#float#nvim_close_btn	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_close_btn(config, winid, border, hlgroup, related) abort$/;"	f
coc#float#nvim_create_related	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_create_related(winid, config, opts) abort$/;"	f
coc#float#nvim_float_click	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_float_click() abort$/;"	f
coc#float#nvim_refresh_scrollbar	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_refresh_scrollbar(winid) abort$/;"	f
coc#float#nvim_right_pad	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_right_pad(config, winid, hlgroup, related) abort$/;"	f
coc#float#nvim_scroll	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_scroll(forward, ...)$/;"	f
coc#float#nvim_scrollbar	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_scrollbar(winid) abort$/;"	f
coc#float#nvim_win_enter	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_win_enter(winid) abort$/;"	f
coc#float#prompt_confirm	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#prompt_confirm(title, cb) abort$/;"	f
coc#float#prompt_insert	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#prompt_insert(text) abort$/;"	f
coc#float#reflow	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#reflow(top) abort$/;"	f
coc#float#scroll	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#scroll(forward, ...)$/;"	f
coc#float#scroll_win	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#scroll_win(winid, forward, amount) abort$/;"	f
coc#float#scrollable	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#scrollable(winid) abort$/;"	f
coc#float#valid	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#valid(winid) abort$/;"	f
coc#float#vim_buttons	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#vim_buttons(winid, config) abort$/;"	f
coc#float#vim_filter	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! coc#float#vim_filter(winid, key, keys) abort$/;"	f
coc#helper#dict_omit	cache-plug/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#dict_omit(dict, keys) abort$/;"	f
coc#helper#dict_pick	cache-plug/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#dict_pick(dict, keys) abort$/;"	f
coc#helper#max	cache-plug/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#max(first, ...) abort$/;"	f
coc#helper#min	cache-plug/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#min(first, ...) abort$/;"	f
coc#helper#str_compose	cache-plug/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#str_compose(line, position, inserted) abort$/;"	f
coc#highlight#add_highlight	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#add_highlight(bufnr, src_id, hl_group, line, col_start, col_end) abort$/;"	f
coc#highlight#add_highlights	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#add_highlights(winid, codes, highlights) abort$/;"	f
coc#highlight#clear_highlight	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_highlight(bufnr, key, start_line, end_line) abort$/;"	f
coc#highlight#clear_match_group	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_match_group(winid, match) abort$/;"	f
coc#highlight#clear_matches	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_matches(winid, ids)$/;"	f
coc#highlight#compose_hlgroup	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#compose_hlgroup(fgGroup, bgGroup) abort$/;"	f
coc#highlight#highlight_lines	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#highlight_lines(winid, blocks) abort$/;"	f
coc#highlight#match_ranges	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#match_ranges(winid, bufnr, ranges, hlGroup, priority) abort$/;"	f
coc#highlight#ranges	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#ranges(bufnr, key, hlGroup, ranges) abort$/;"	f
coc#jumpable	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#jumpable() abort$/;"	f
coc#list#clean_up	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#clean_up() abort$/;"	f
coc#list#create	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#create(position, height, name, numberSelect)$/;"	f
coc#list#get_preview	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#get_preview(...) abort$/;"	f
coc#list#getchar	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#getchar() abort$/;"	f
coc#list#has_preview	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#has_preview()$/;"	f
coc#list#hide	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#hide(original, height, winid) abort$/;"	f
coc#list#names	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#names(...) abort$/;"	f
coc#list#options	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#options(...)$/;"	f
coc#list#preview	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#preview(lines, config) abort$/;"	f
coc#list#restore	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#restore(winid, height)$/;"	f
coc#list#scroll_preview	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#scroll_preview(dir) abort$/;"	f
coc#list#set_height	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#set_height(height) abort$/;"	f
coc#list#setlines	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setlines(bufnr, lines, append)$/;"	f
coc#list#setup	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setup(source)$/;"	f
coc#list#status	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! coc#list#status(name)$/;"	f
coc#on_enter	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#on_enter()$/;"	f
coc#on_notify	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#on_notify(id, method, Cb)$/;"	f
coc#prompt#activated	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#activated() abort$/;"	f
coc#prompt#getc	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#getc() abort$/;"	f
coc#prompt#getchar	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#getchar() abort$/;"	f
coc#prompt#start_prompt	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#start_prompt(session) abort$/;"	f
coc#prompt#stop_prompt	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#stop_prompt(session)$/;"	f
coc#refresh	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#refresh() abort$/;"	f
coc#rpc#async_request	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_request(id, method, args)$/;"	f
coc#rpc#async_response	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_response(id, resp, isErr) abort$/;"	f
coc#rpc#get_errors	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#get_errors()$/;"	f
coc#rpc#kill	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#kill()$/;"	f
coc#rpc#notify	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#notify(method, args) abort$/;"	f
coc#rpc#ready	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#ready()$/;"	f
coc#rpc#request	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request(method, args) abort$/;"	f
coc#rpc#request_async	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request_async(method, args, cb) abort$/;"	f
coc#rpc#restart	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#restart()$/;"	f
coc#rpc#start_server	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#start_server()$/;"	f
coc#rpc#started	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#started() abort$/;"	f
coc#rpc#stop	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#stop()$/;"	f
coc#snippet#_select_mappings	cache-plug/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#_select_mappings()$/;"	f
coc#snippet#disable	cache-plug/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#disable()$/;"	f
coc#snippet#enable	cache-plug/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#enable()$/;"	f
coc#snippet#show_choices	cache-plug/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#show_choices(lnum, col, len, values) abort$/;"	f
coc#start	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#start(...)$/;"	f
coc#status	cache-plug/coc.nvim/autoload/coc.vim	/^function! coc#status()$/;"	f
coc#task#running	cache-plug/coc.nvim/autoload/coc/task.vim	/^function! coc#task#running(id)$/;"	f
coc#task#start	cache-plug/coc.nvim/autoload/coc/task.vim	/^function! coc#task#start(id, opts)$/;"	f
coc#task#stop	cache-plug/coc.nvim/autoload/coc/task.vim	/^function! coc#task#stop(id)$/;"	f
coc#terminal#close	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#close(bufnr) abort$/;"	f
coc#terminal#send	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#send(bufnr, text, add_new_line) abort$/;"	f
coc#terminal#start	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#start(cmd, cwd, env) abort$/;"	f
coc#util#api_version	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#api_version() abort$/;"	f
coc#util#change_lines	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#change_lines(bufnr, list) abort$/;"	f
coc#util#check_refresh	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#check_refresh(bufnr)$/;"	f
coc#util#clear_signs	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clear_signs()$/;"	f
coc#util#clearmatches	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clearmatches(ids, ...)$/;"	f
coc#util#cursor	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#cursor()$/;"	f
coc#util#cursor_pos	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#cursor_pos() abort$/;"	f
coc#util#diff_content	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#diff_content(lines) abort$/;"	f
coc#util#do_autocmd	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#do_autocmd(name) abort$/;"	f
coc#util#do_complete	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#do_complete(name, opt, cb) abort$/;"	f
coc#util#echo_hover	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_hover(msg)$/;"	f
coc#util#echo_line	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_line()$/;"	f
coc#util#echo_lines	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_lines(lines)$/;"	f
coc#util#echo_messages	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_messages(hl, msgs)$/;"	f
coc#util#echo_signatures	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_signatures(signatures) abort$/;"	f
coc#util#execute	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#execute(cmd)$/;"	f
coc#util#extension_root	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#extension_root() abort$/;"	f
coc#util#get_buf_lines	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_buf_lines(bufnr, changedtick)$/;"	f
coc#util#get_bufoptions	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_bufoptions(bufnr, maxFileSize) abort$/;"	f
coc#util#get_changeinfo	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_changeinfo()$/;"	f
coc#util#get_complete_option	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_complete_option()$/;"	f
coc#util#get_config	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_config(key) abort$/;"	f
coc#util#get_config_home	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_config_home()$/;"	f
coc#util#get_data_home	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_data_home()$/;"	f
coc#util#get_format_opts	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_format_opts(bufnr) abort$/;"	f
coc#util#get_input	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_input()$/;"	f
coc#util#get_offset	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_offset() abort$/;"	f
coc#util#get_pretext	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_pretext() abort$/;"	f
coc#util#get_syntax_name	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_syntax_name(lnum, col)$/;"	f
coc#util#getpid	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#getpid()$/;"	f
coc#util#has_preview	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#has_preview()$/;"	f
coc#util#highlight_options	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#highlight_options()$/;"	f
coc#util#install	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install() abort$/;"	f
coc#util#install_extension	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install_extension(args) abort$/;"	f
coc#util#iterm_open	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#iterm_open(dir)$/;"	f
coc#util#job_command	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#job_command()$/;"	f
coc#util#jump	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jump(cmd, filepath, ...) abort$/;"	f
coc#util#jumpTo	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jumpTo(line, character) abort$/;"	f
coc#util#move_cursor	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#move_cursor(delta)$/;"	f
coc#util#on_error	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#on_error(msg) abort$/;"	f
coc#util#open_file	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_file(cmd, file)$/;"	f
coc#util#open_files	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_files(files)$/;"	f
coc#util#open_terminal	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_terminal(opts) abort$/;"	f
coc#util#open_url	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_url(url)$/;"	f
coc#util#path_replace_patterns	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#path_replace_patterns() abort$/;"	f
coc#util#pick_color	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#pick_color(default_color)$/;"	f
coc#util#preview_info	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#preview_info(info, filetype, ...) abort$/;"	f
coc#util#quickpick	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#quickpick(title, items, cb) abort$/;"	f
coc#util#rebuild	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#rebuild()$/;"	f
coc#util#refactor_fold_text	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#refactor_fold_text(lnum) abort$/;"	f
coc#util#refactor_foldlevel	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#refactor_foldlevel(lnum) abort$/;"	f
coc#util#remote_fns	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#remote_fns(name)$/;"	f
coc#util#root_patterns	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#root_patterns() abort$/;"	f
coc#util#run_terminal	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#run_terminal(opts, cb)$/;"	f
coc#util#set_buf_lines	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#set_buf_lines(bufnr, lines) abort$/;"	f
coc#util#set_buf_var	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#set_buf_var(bufnr, name, val) abort$/;"	f
coc#util#set_lines	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#set_lines(bufnr, replacement, start, end) abort$/;"	f
coc#util#setline	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#setline(lnum, line)$/;"	f
coc#util#timer	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#timer(method, args)$/;"	f
coc#util#unmap	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#unmap(bufnr, keys) abort$/;"	f
coc#util#unplace_signs	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#unplace_signs(bufnr, sign_ids)$/;"	f
coc#util#update_extensions	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#update_extensions(...) abort$/;"	f
coc#util#version	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#version()$/;"	f
coc#util#vim_info	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#vim_info()$/;"	f
coc#util#win_gotoid	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#win_gotoid(winid) abort$/;"	f
coc#util#with_callback	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! coc#util#with_callback(method, args, cb)$/;"	f
coffee#CoffeeSetUpErrorFormat	cache-plug/vim-polyglot/autoload/coffee.vim	/^function! coffee#CoffeeSetUpErrorFormat()$/;"	f
coffee#CoffeeSetUpVariables	cache-plug/vim-polyglot/autoload/coffee.vim	/^function! coffee#CoffeeSetUpVariables()$/;"	f
colBlack	cache-plug/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c
colBlue	cache-plug/fzf/src/tui/tui.go	/^	colBlue$/;"	c
colCyan	cache-plug/fzf/src/tui/tui.go	/^	colCyan$/;"	c
colDefault	cache-plug/fzf/src/tui/tui.go	/^	colDefault   Color = -1$/;"	c
colGreen	cache-plug/fzf/src/tui/tui.go	/^	colGreen$/;"	c
colMagenta	cache-plug/fzf/src/tui/tui.go	/^	colMagenta$/;"	c
colRed	cache-plug/fzf/src/tui/tui.go	/^	colRed$/;"	c
colUndefined	cache-plug/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c
colWhite	cache-plug/fzf/src/tui/tui.go	/^	colWhite$/;"	c
colYellow	cache-plug/fzf/src/tui/tui.go	/^	colYellow$/;"	c
collect	cache-plug/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
color	cache-plug/vim-polyglot/syntax/xpm.vim	/^		     let color = ""$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm.vim	/^		  let color = substitute(s, '".*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm.vim	/^	       let color = substitute(s, '".*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm.vim	/^	    let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm.vim	/^	    let color = substitute(s, '".*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm.vim	/^	 let color = substitute(s, '".*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm.vim	/^let color  = ""$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm2.vim	/^		let color = ""$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	      let color = substitute(s, '.*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	    let color = substitute(s, '.*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	  let color = substitute(s, '.*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let color = substitute(s, '.*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	cache-plug/vim-polyglot/syntax/xpm2.vim	/^  let color  = ""$/;"	v
colorCodes	cache-plug/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f
colorOffset	cache-plug/fzf/src/result.go	/^type colorOffset struct {$/;"	t
colorOffsets	cache-plug/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, theme *tui.ColorTheme, colBase tui.ColorPair, colMatch tui.ColorPair, current bool) []colorOffset {$/;"	f
colored	cache-plug/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f
colors	cache-plug/vim-polyglot/syntax/xpm.vim	/^	 let colors = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
colors	cache-plug/vim-polyglot/syntax/xpm.vim	/^let colors = 0$/;"	v
colors	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let colors = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
colors	cache-plug/vim-polyglot/syntax/xpm2.vim	/^  let colors = 0$/;"	v
colour	cache-plug/coc.nvim/autoload/coc/color.vim	/^fun! s:colour(r, g, b)$/;"	f
combinations	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
comma	cache-plug/delimitMate/Makefile	/^comma    := ,$/;"	m
comma_expanson	cache-plug/vim-polyglot/scripts/build	/^def comma_expanson(s)$/;"	f	class:rules_to_code.rule_to_code
comma_expanson	cache-plug/vim-polyglot/scripts/import_vim	/^def comma_expanson(s)$/;"	f
command	cache-plug/fzf/plugin/fzf.vim	/^      let command = a:command$/;"	v
command	cache-plug/fzf/plugin/fzf.vim	/^      let command = fzf.temps.batchfile$/;"	v
command	cache-plug/fzf/plugin/fzf.vim	/^    let command .= s:term_marker$/;"	v
command	cache-plug/fzf/plugin/fzf.vim	/^    let command = 'cmd.exe \/C '.fzf#shellescape('set "TERM=" & start \/WAIT sh -c '.shellscript)$/;"	v
command_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
commands	cache-plug/delimitMate/test/expand_cr.vim	/^  let commands = []$/;"	v
commands	cache-plug/delimitMate/test/expand_cr.vim	/^let commands = []$/;"	v
commands	cache-plug/vim-polyglot/syntax/sh.vim	/^let commands = [ 'arch', 'awk', 'b2sum', 'base32', 'base64', 'basename', 'basenc', 'bash', 'brew', 'cat', 'chcon', 'chgrp', 'chown', 'chroot', 'cksum', 'comm', 'cp', 'csplit', 'curl', 'cut', 'date', 'dd', 'defaults', 'df', 'dir', 'dircolors', 'dirname', 'ed', 'env', 'expand', 'factor', 'fmt', 'fold', 'git', 'grep', 'groups', 'head', 'hexdump', 'hostid', 'hostname', 'hugo', 'id', 'install', 'join', 'killall', 'link', 'ln', 'logname', 'md5sum', 'mkdir', 'mkfifo', 'mknod', 'mktemp', 'nice', 'nl', 'nohup', 'npm', 'nproc', 'numfmt', 'od', 'open', 'paste', 'pathchk', 'pr', 'printenv', 'printf', 'ptx', 'readlink', 'realpath', 'rg', 'runcon', 'scutil', 'sed', 'seq', 'sha1sum', 'sha2', 'shred', 'shuf', 'split', 'stat', 'stdbuf', 'stty', 'sudo', 'sum', 'sync', 'tac', 'tee', 'terminfo', 'timeout', 'tmux', 'top', 'touch', 'tput', 'tr', 'truncate', 'tsort', 'tty', 'uname', 'unexpand', 'uniq', 'unlink', 'uptime', 'users', 'vdir', 'vim', 'wc', 'who', 'whoami', 'yabai', 'yes' ]$/;"	v
commands	cache-plug/vim-polyglot/syntax/zsh.vim	/^let commands = [ 'arch', 'awk', 'b2sum', 'base32', 'base64', 'basename', 'basenc', 'bash', 'brew', 'cat', 'chcon', 'chgrp', 'chown', 'chroot', 'cksum', 'comm', 'cp', 'csplit', 'curl', 'cut', 'date', 'dd', 'defaults', 'df', 'dir', 'dircolors', 'dirname', 'ed', 'env', 'expand', 'factor', 'fmt', 'fold', 'git', 'grep', 'groups', 'head', 'hexdump', 'hostid', 'hostname', 'hugo', 'id', 'install', 'join', 'killall', 'link', 'ln', 'logname', 'md5sum', 'mkdir', 'mkfifo', 'mknod', 'mktemp', 'nice', 'nl', 'nohup', 'npm', 'nproc', 'numfmt', 'od', 'open', 'paste', 'pathchk', 'pr', 'printenv', 'printf', 'ptx', 'readlink', 'realpath', 'rg', 'runcon', 'scutil', 'sed', 'seq', 'sha1sum', 'sha2', 'shred', 'shuf', 'split', 'stat', 'stdbuf', 'stty', 'sudo', 'sum', 'sync', 'tac', 'tee', 'terminfo', 'timeout', 'tmux', 'top', 'touch', 'tput', 'tr', 'truncate', 'tsort', 'tty', 'uname', 'unexpand', 'uniq', 'unlink', 'uptime', 'users', 'vdir', 'vim', 'wc', 'who', 'whoami', 'yabai', 'yes' ]$/;"	v
commits	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(buffer_local, args)$/;"	f
commits_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
common_head	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
common_prefix	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_prefix(a, b)$/;"	f
common_sink	cache-plug/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
common_suffix	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_suffix(a, b, start)$/;"	f
compareRanks	cache-plug/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f
compareRanks	cache-plug/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f
compare_pos	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:compare_pos(pos1, pos2)$/;"	f
compile	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:compile(projectPath, cont)$/;"	f
compilerLocation	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:compilerLocation(cont)$/;"	f
complete_insert	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
complete_trigger	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
concat	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:concat(list) abort$/;"	f
conj	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
cons	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
consoleDevice	cache-plug/fzf/src/tui/light.go	/^const consoleDevice string = "\/dev\/tty"$/;"	c
consoleFlagsInput	cache-plug/fzf/src/tui/light_windows.go	/^	consoleFlagsInput  = uint32(windows.ENABLE_VIRTUAL_TERMINAL_INPUT | windows.ENABLE_PROCESSED_INPUT | windows.ENABLE_EXTENDED_FLAGS)$/;"	v
consoleFlagsOutput	cache-plug/fzf/src/tui/light_windows.go	/^	consoleFlagsOutput = uint32(windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING | windows.ENABLE_PROCESSED_OUTPUT | windows.DISABLE_NEWLINE_AUTO_RETURN)$/;"	v
constrain	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f
contained	cache-plug/vim-polyglot/syntax/plantuml.vim	/^let contained = []$/;"	v
contains_multibyte	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
convert	cache-plug/lightline.vim/autoload/lightline.vim	/^function! s:convert(name, index) abort$/;"	f
convert	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:convert(rgb) abort$/;"	f
convertBoolToInt32	cache-plug/fzf/src/util/atomicbool.go	/^func convertBoolToInt32(b bool) int32 {$/;"	f
convert_config_nvim	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:convert_config_nvim(config) abort$/;"	f
coordinatorDelayMax	cache-plug/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c
coordinatorDelayStep	cache-plug/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c
copySlice	cache-plug/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f
copy_file	cache-plug/vim-polyglot/scripts/build	/^def copy_file(name, src, dest)$/;"	f
core_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let core_attributes = {'accesskey': [], 'class': [], 'contenteditable': ['true', 'false', ''], 'contextmenu': [], 'dir': ['ltr', 'rtl'], 'draggable': ['true', 'false'], 'hidden': ['hidden', ''], 'id': [], 'is': [], 'lang': lang_tag, 'spellcheck': ['true', 'false', ''], 'style': [], 'tabindex': [], 'title': []}$/;"	v
count	cache-plug/vim-polyglot/indent/bst.vim	/^function! s:count(string,char)$/;"	f
count	cache-plug/vim-polyglot/indent/liquid.vim	/^function! s:count(string,pattern)$/;"	f
count_braces	cache-plug/vim-polyglot/indent/css.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	cache-plug/vim-polyglot/indent/ld.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	cache-plug/vim-polyglot/indent/stylus.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	cache-plug/vim-polyglot/indent/tcl.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	cache-plug/vim-polyglot/indent/xinetd.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_chars	cache-plug/vim-polyglot/indent/scss.vim	/^function s:count_chars(lnum, count_open, chars)$/;"	f
counts	cache-plug/fzf/test/test_go.rb	/^          def counts$/;"	f	class:Tmux.until
cpath	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
cpp	cache-plug/vim-polyglot/syntax/xpm.vim	/^	 let cpp = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
cpp	cache-plug/vim-polyglot/syntax/xpm.vim	/^let cpp    = 0$/;"	v
cpp	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let cpp = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
cpp	cache-plug/vim-polyglot/syntax/xpm2.vim	/^  let cpp    = 0$/;"	v
cprint2	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f
create_btns_buffer	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:create_btns_buffer(bufnr, width, buttons, borderbottom) abort$/;"	f
create_cterm_hlgroup	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! s:create_cterm_hlgroup(group, fg, bg, attr) abort$/;"	f
create_file	cache-plug/fzf/install	/^create_file() {$/;"	f
create_gui_hlgroup	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! s:create_gui_hlgroup(group, fg, bg, attr)$/;"	f
create_namespace	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! s:create_namespace(key) abort$/;"	f
create_popup	cache-plug/fzf/plugin/fzf.vim	/^  function s:create_popup(hl, opts) abort$/;"	f
create_popup	cache-plug/fzf/plugin/fzf.vim	/^  function! s:create_popup(hl, opts) abort$/;"	f
criterion	cache-plug/fzf/src/options.go	/^type criterion int$/;"	t
crossorigin	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let crossorigin = ['anonymous', 'use-credentials']$/;"	v
cry_minlines	cache-plug/vim-polyglot/syntax/cryptol.vim	/^  let cry_minlines = 50$/;"	v
crystal#indent#AfterBlockOpening	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterBlockOpening(pline_info) abort$/;"	f
crystal#indent#AfterEndKeyword	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterEndKeyword(pline_info) abort$/;"	f
crystal#indent#AfterEndMacroTag	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterEndMacroTag(pline_info) abort$/;"	f
crystal#indent#AfterIndentKeyword	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterIndentKeyword(pline_info) abort$/;"	f
crystal#indent#AfterIndentMacroTag	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterIndentMacroTag(pline_info) abort$/;"	f
crystal#indent#AfterLeadingOperator	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterLeadingOperator(pline_info) abort$/;"	f
crystal#indent#AfterLinkAttribute	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterLinkAttribute(pline_info) abort$/;"	f
crystal#indent#AfterTypeDeclaration	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterTypeDeclaration(pline_info) abort$/;"	f
crystal#indent#AfterUnbalancedBracket	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#AfterUnbalancedBracket(pline_info) abort$/;"	f
crystal#indent#ClosingBracketOnEmptyLine	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
crystal#indent#ContinuedHangingOperator	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#ContinuedHangingOperator(msl_info) abort$/;"	f
crystal#indent#ContinuedLine	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#ContinuedLine(pline_info) abort$/;"	f
crystal#indent#DeindentingKeyword	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#DeindentingKeyword(cline_info) abort$/;"	f
crystal#indent#DeindentingMacroTag	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#DeindentingMacroTag(cline_info) abort$/;"	f
crystal#indent#EmptyInsideString	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#EmptyInsideString(pline_info) abort$/;"	f
crystal#indent#ExtraBrackets	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#ExtraBrackets(lnum) abort$/;"	f
crystal#indent#GetMSL	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#GetMSL(lnum) abort$/;"	f
crystal#indent#IndentingKeywordInMSL	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IndentingKeywordInMSL(msl_info) abort$/;"	f
crystal#indent#IsAssignment	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsAssignment(str, pos) abort$/;"	f
crystal#indent#IsInString	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsInString(lnum, col) abort$/;"	f
crystal#indent#IsInStringDelimiter	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsInStringDelimiter(lnum, col) abort$/;"	f
crystal#indent#IsInStringOrComment	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsInStringOrComment(lnum, col) abort$/;"	f
crystal#indent#IsInStringOrCommentOrDelimiter	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsInStringOrCommentOrDelimiter(lnum, col) abort$/;"	f
crystal#indent#IsLineComment	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#IsLineComment(lnum) abort$/;"	f
crystal#indent#LeadingOperator	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#LeadingOperator(cline_info) abort$/;"	f
crystal#indent#Match	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#Match(lnum, regex) abort$/;"	f
crystal#indent#MultilineString	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#MultilineString(cline_info) abort$/;"	f
crystal#indent#PrevNonBlank	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#PrevNonBlank(lnum) abort$/;"	f
crystal#indent#PreviousNotMSL	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#PreviousNotMSL(msl_info) abort$/;"	f
crystal#indent#RelativeMacroDepth	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#RelativeMacroDepth(a, b) abort$/;"	f
crystal#indent#StartOfFile	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^function! crystal#indent#StartOfFile(pline_info) abort$/;"	f
crystal_lang#complete	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#complete(findstart, base) abort$/;"	f
crystal_lang#context	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#context(file, pos, option_str) abort$/;"	f
crystal_lang#entrypoint_for	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#entrypoint_for(file_path) abort$/;"	f
crystal_lang#expand	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#expand(file, pos, ...) abort$/;"	f
crystal_lang#format	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#format(option_str, ...) abort$/;"	f
crystal_lang#format_string	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#format_string(code, ...) abort$/;"	f
crystal_lang#get_spec_switched_path	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#get_spec_switched_path(absolute_path) abort$/;"	f
crystal_lang#impl	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#impl(file, pos, option_str) abort$/;"	f
crystal_lang#jump_to_definition	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#jump_to_definition(file, pos) abort$/;"	f
crystal_lang#run_all_spec	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#run_all_spec(...) abort$/;"	f
crystal_lang#run_current_spec	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#run_current_spec(...) abort$/;"	f
crystal_lang#switch_spec_file	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#switch_spec_file(...) abort$/;"	f
crystal_lang#tool	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#tool(name, file, pos, option_str) abort$/;"	f
crystal_lang#type_hierarchy	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! crystal_lang#type_hierarchy(file, option_str) abort$/;"	f
csc_minlines	cache-plug/vim-polyglot/syntax/csc.vim	/^	let csc_minlines = 50	" mostly for () constructs$/;"	v
csi	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
csi	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) {$/;"	f
csi	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) {$/;"	f
csiColor	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) bool {$/;"	f
csv#AddColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#AddColumn(start, stop, ...) range "{{{3$/;"	f
csv#AnalyzeColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#AnalyzeColumn(...) "{{{3$/;"	f
csv#ArrangeCol	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#ArrangeCol(first, last, bang, limit, ...) range "{{{3$/;"	f
csv#AvgColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#AvgColumn(list) "{{{3$/;"	f
csv#CSVArrangeCol	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CSVArrangeCol(first, last, bang, limit) range "{{{2$/;"	f
csv#CSVMappings	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CSVMappings() "{{{3$/;"	f
csv#CSVSortValues	cache-plug/vim-polyglot/autoload/csv.vim	/^  fu! csv#CSVSortValues(i1, i2) "{{{3$/;"	f
csv#CSV_SetOption	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CSV_SetOption(csvfile, header, option, value) "{{{3$/;"	f
csv#CalculateColumnWidth	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CalculateColumnWidth(row, silent) "{{{3$/;"	f
csv#CheckDuplicates	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CheckDuplicates(list) "{{{3$/;"	f
csv#CheckHeaderLine	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CheckHeaderLine() "{{{3$/;"	f
csv#ColWidth	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#ColWidth(colnr, row, silent) "{{{3$/;"	f
csv#ColumnMode	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#ColumnMode() "{{{3$/;"	f
csv#ColumnWidth	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#ColumnWidth()$/;"	f
csv#Columnize	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Columnize(field) "{{{3$/;"	f
csv#CommandDefinitions	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CommandDefinitions() "{{{3$/;"	f
csv#CompleteColumnNr	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CompleteColumnNr(A,L,P) "{{{3$/;"	f
csv#CopyCol	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CopyCol(reg, col, cnt) "{{{3$/;"	f
csv#CountColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#CountColumn(list) "{{{3$/;"	f
csv#DelColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#DelColumn(colnr) "{{{3$/;"	f
csv#DeleteColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#DeleteColumn(arg) "{{{3$/;"	f
csv#DisableFolding	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#DisableFolding() "{{{3$/;"	f
csv#DoAutoCommands	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#DoAutoCommands() "{{{3$/;"	f
csv#DoForEachColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#DoForEachColumn(start, stop, bang) range "{{{3$/;"	f
csv#DupColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#DupColumn(start, stop, ...) range "{{{3$/;"	f
csv#DuplicateRows	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#DuplicateRows(columnlist) "{{{3$/;"	f
csv#EscapeValue	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#EscapeValue(val) "{{{3$/;"	f
csv#EvalColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#EvalColumn(nr, func, first, last, ...) range "{{{3$/;"	f
csv#FoldValue	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#FoldValue(lnum, filter) "{{{3$/;"	f
csv#GetCells	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#GetCells(list) "{{{3$/;"	f
csv#GetColPat	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#GetColPat(colnr, zs_flag) "{{{3$/;"	f
csv#GetColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#GetColumn(line, col, strip) "{{{3$/;"	f
csv#GetCursorChar	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#GetCursorChar() "{{{3$/;"	f
csv#GetDelimiter	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#GetDelimiter(first, last, ...) "{{{3$/;"	f
csv#GetPat	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#GetPat(colnr, maxcolnr, pat, allowmore) "{{{3$/;"	f
csv#HiCol	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#HiCol(colnr, bang) "{{{3$/;"	f
csv#IN	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#IN(list, value) "{{{3$/;"	f
csv#Init	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Init(start, end, ...) "{{{3$/;"	f
csv#InitCSVFixedWidth	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#InitCSVFixedWidth() "{{{3$/;"	f
csv#LocalCmd	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#LocalCmd(name, definition, args) "{{{3$/;"	f
csv#LocalSettings	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#LocalSettings(type) "{{{3$/;"	f
csv#Map	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Map(map, name, definition, ...) "{{{3$/;"	f
csv#MaxColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#MaxColumn(list) "{{{3$/;"	f
csv#MaxColumns	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#MaxColumns(...) "{{{3$/;"	f
csv#Menu	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Menu(enable) "{{{3$/;"	f
csv#MoveCol	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#MoveCol(forward, line, ...) "{{{3$/;"	f
csv#MoveColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#MoveColumn(start, stop, ...) range "{{{3$/;"	f
csv#MoveOver	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#MoveOver(outer) "{{{3$/;"	f
csv#NewDelimiter	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#NewDelimiter(newdelimiter, firstl, lastl) "{{{3$/;"	f
csv#NewRecord	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#NewRecord(line1, line2, count) "{{{3$/;"	f
csv#NrColumns	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#NrColumns(bang) "{{{3$/;"	f
csv#NumberFormat	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#NumberFormat() "{{{3$/;"	f
csv#OutputFilters	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#OutputFilters(bang) "{{{3$/;"	f
csv#PopStdDevColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#PopStdDevColumn(list) "{{{2$/;"	f
csv#PopVarianceColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#PopVarianceColumn(list) "{{{2$/;"	f
csv#PrepUnArrangeCol	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#PrepUnArrangeCol(first, last) "{{{3$/;"	f
csv#PrepareDoForEachColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#PrepareDoForEachColumn(start, stop, bang) range"{{{3$/;"	f
csv#PrepareFolding	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#PrepareFolding(add, match)  "{{{3$/;"	f
csv#ProcessFieldValue	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#ProcessFieldValue(field) "{{{3$/;"	f
csv#ProgressBar	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#ProgressBar(cnt, max) "{{{3$/;"	f
csv#RemoveLastItem	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#RemoveLastItem(count) "{{{3$/;"	f
csv#SameFieldRegion	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SameFieldRegion() "{{{3$/;"	f
csv#SaveOptions	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SaveOptions(list) "{{{3$/;"	f
csv#SearchColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SearchColumn(arg) "{{{3$/;"	f
csv#SetupAutoCmd	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SetupAutoCmd(window,bufnr) "{{{3$/;"	f
csv#SmplStdDevColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SmplStdDevColumn(list) "{{{2$/;"	f
csv#SmplVarianceColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SmplVarianceColumn(list) "{{{2$/;"	f
csv#Sort	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Sort(bang, line1, line2, colnr) range "{{{3$/;"	f
csv#SortComplete	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SortComplete(A,L,P) "{{{3$/;"	f
csv#SortFilter	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SortFilter(a, b) "{{{3$/;"	f
csv#SplitHeaderLine	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SplitHeaderLine(lines, bang, hor) "{{{3$/;"	f
csv#SplitHeaderToggle	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SplitHeaderToggle(hor) "{{{3$/;"	f
csv#SubstituteInColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SubstituteInColumn(command, line1, line2) range "{{{3$/;"	f
csv#SumCSVRow	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SumCSVRow(line, nr) "{{{3$/;"	f
csv#SumColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#SumColumn(list) "{{{3$/;"	f
csv#Tabularize	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Tabularize(bang, first, last) "{{{3$/;"	f
csv#Timeout	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Timeout(start) "{{{3$/;"	f
csv#Transpose	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Transpose(line1, line2) "{{{3$/;"	f
csv#UnArrangeCol	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#UnArrangeCol(match) "{{{3$/;"	f
csv#VarianceColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#VarianceColumn(list, is_population) "{{{3$/;"	f
csv#Vertfold	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Vertfold(bang, col) "{{{3$/;"	f
csv#WColumn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#WColumn(...) "{{{3$/;"	f
csv#Warn	cache-plug/vim-polyglot/autoload/csv.vim	/^fu! csv#Warn(mess) "{{{3$/;"	f
current	cache-plug/fzf/src/history.go	/^func (h *History) current() string {$/;"	f
currentItem	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f
currentQueryObject	cache-plug/vim-polyglot/ftplugin/idris.vim	/^function! s:currentQueryObject()$/;"	f
currentQueryObject	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^function! s:currentQueryObject()$/;"	f
current_char	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:current_char()$/;"	f
current_char	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:current_char()$/;"	f
current_compiler	cache-plug/vim-polyglot/compiler/ant.vim	/^let current_compiler = "ant"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/bdf.vim	/^let current_compiler = "bdf"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/cake.vim	/^let current_compiler = 'cake'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/cargo.vim	/^let current_compiler = "cargo"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/coffee.vim	/^let current_compiler = 'coffee'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/credo.vim	/^let current_compiler = 'credo'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/cryptol.vim	/^let current_compiler = "cryptol"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/cs.vim	/^let current_compiler = "cs"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/cucumber.vim	/^let current_compiler = "cucumber"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/dot.vim	/^let current_compiler = "dot"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/eruby.vim	/^let current_compiler = "eruby"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/exunit.vim	/^let current_compiler = "exunit"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/fish.vim	/^let current_compiler = 'fish'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/gradle.vim	/^let current_compiler = "gradle"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/gradlew.vim	/^let current_compiler = "gradlew"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/haml.vim	/^let current_compiler = "haml"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/ledger.vim	/^let current_compiler = g:ledger_bin$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/lilypond.vim	/^let current_compiler = "lilypond"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/ls.vim	/^let current_compiler = 'ls'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/mix.vim	/^let current_compiler = 'mix'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/nim.vim	/^let current_compiler = 'nim'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/nix-build.vim	/^let current_compiler = 'nix-build'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/ocaml.vim	/^let current_compiler = "ocaml"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/powershell.vim	/^let current_compiler = "powershell"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/python.vim	/^let current_compiler = "python"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/rake.vim	/^let current_compiler = "rake"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/rspec.vim	/^let current_compiler = "rspec"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/ruby.vim	/^let current_compiler = "ruby"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/rustc.vim	/^let current_compiler = "rustc"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/sass.vim	/^let current_compiler = "sass"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/sbt.vim	/^let current_compiler = 'sbt'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/swift.vim	/^let current_compiler = "swiftc"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/tcl.vim	/^let current_compiler = "tcl"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/tex.vim	/^		let current_compiler = "latex"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/tex.vim	/^		let current_compiler = b:tex_flavor$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/tex.vim	/^		let current_compiler = g:tex_flavor$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/tex.vim	/^	let current_compiler = 'make'$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/tidy.vim	/^let current_compiler = "tidy"$/;"	v
current_compiler	cache-plug/vim-polyglot/compiler/typescript.vim	/^let current_compiler='typescript'$/;"	v
current_hunk	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:current_hunk() abort$/;"	f
current_session	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! s:current_session() abort$/;"	f
current_word	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:current_word()$/;"	f
current_word	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:current_word()$/;"	f
cursor_idx	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:cursor_idx() "{{{$/;"	f
cursor_in_two_hunks	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:cursor_in_two_hunks()$/;"	f
cursor_moved	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:cursor_moved(...)$/;"	f
cycle	cache-plug/vim-polyglot/ftplugin/gitrebase.vim	/^function! s:cycle(count) abort$/;"	f
cycle_until_end	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:cycle_until_end()$/;"	f
d	cache-plug/vim-polyglot/syntax/julia.vim	/^  function! s:d(x)$/;"	f
dart#ToggleFormatOnSave	cache-plug/vim-polyglot/autoload/dart.vim	/^function! dart#ToggleFormatOnSave() abort$/;"	f
dart#analyzer	cache-plug/vim-polyglot/autoload/dart.vim	/^function! dart#analyzer(q_args) abort$/;"	f
dart#fmt	cache-plug/vim-polyglot/autoload/dart.vim	/^function! dart#fmt(...) abort$/;"	f
dart#resolveUri	cache-plug/vim-polyglot/autoload/dart.vim	/^function! dart#resolveUri(uri) abort$/;"	f
dart#setModifiable	cache-plug/vim-polyglot/autoload/dart.vim	/^function! dart#setModifiable() abort$/;"	f
dart#tojs	cache-plug/vim-polyglot/autoload/dart.vim	/^function! dart#tojs(q_args) abort$/;"	f
db#adapter#ecto#canonicalize	cache-plug/vim-polyglot/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#canonicalize(url) abort$/;"	f
db#adapter#ecto#complete_opaque	cache-plug/vim-polyglot/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#complete_opaque(url) abort$/;"	f
debug	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:debug(str)$/;"	f
debugV2	cache-plug/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f
decimalpos	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:decimalpos(expr) abort$/;"	f
decode	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:decode(json, ...) abort$/;"	f
decode_json	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^  function! s:decode_json(text) abort$/;"	f
decrease	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:decrease(...)$/;"	f
deepcopy	cache-plug/vim-prettier/tests/fixtures/foo.lua	/^  function deepcopy(orig)$/;"	f
def_comment	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_comment(name, nextgroup)$/;"	f
def_keyword	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_keyword(name, nextgroup, keyword)$/;"	f
def_keywords	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_keywords(name, nextgroup, keywords)$/;"	f
def_match	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_match(name, nextgroup, pattern)$/;"	f
def_region	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^function s:def_region(name, nextgroup, start, skip, end, matchgroup, contains)$/;"	f
defaultCommand	cache-plug/fzf/src/constants.go	/^var defaultCommand string$/;"	v
defaultEscDelay	cache-plug/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c
defaultHeight	cache-plug/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c
defaultHistoryMax	cache-plug/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c
defaultJumpLabels	cache-plug/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,<.>\/?'\\"!@#$%^&*()[{]}-_=+"$/;"	c
defaultKeymap	cache-plug/fzf/src/terminal.go	/^func defaultKeymap() map[int][]action {$/;"	f
defaultMargin	cache-plug/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f
defaultOptions	cache-plug/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f
defaultPreviewOpts	cache-plug/fzf/src/options.go	/^func defaultPreviewOpts(command string) previewOpts {$/;"	f
defaultTheme	cache-plug/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f
defaultTheme	cache-plug/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f
defaultTheme	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) defaultTheme() *ColorTheme {$/;"	f
defaultWidth	cache-plug/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c
default_grep	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let default_grep = 'grep'$/;"	v
default_layout	cache-plug/fzf/plugin/fzf.vim	/^function! s:default_layout()$/;"	f
default_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let default_role = {$/;"	v
default_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let default_role = {}$/;"	v
defaults	cache-plug/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
define_sign_line_highlights	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_line_highlights() abort$/;"	f
define_sign_linenr_highlights	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_linenr_highlights() abort$/;"	f
define_sign_text	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_text() abort$/;"	f
defs	cache-plug/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
delChar	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f
delimitMate	cache-plug/delimitMate/plugin/delimitMate.vim	/^augroup delimitMate$/;"	a
delimitMate#BS	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#BS() " {{{$/;"	f
delimitMate#ExpandReturn	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ExpandReturn() "{{{$/;"	f
delimitMate#ExpandSpace	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ExpandSpace() "{{{$/;"	f
delimitMate#Get	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Get(...) "{{{$/;"	f
delimitMate#IsEmptyPair	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#IsEmptyPair(str) "{{{$/;"	f
delimitMate#JumpAny	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpAny(...) " {{{$/;"	f
delimitMate#JumpMany	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpMany() " {{{$/;"	f
delimitMate#JumpOut	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpOut(char) "{{{$/;"	f
delimitMate#ParenDelim	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ParenDelim(right) " {{{$/;"	f
delimitMate#QuoteDelim	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#QuoteDelim(char) "{{{$/;"	f
delimitMate#Set	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Set(...) "{{{$/;"	f
delimitMate#ShouldJump	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ShouldJump(...) "{{{$/;"	f
delimitMate#SkipDelim	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#SkipDelim(char) "{{{$/;"	f
delimitMate#Test	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Test() "{{{$/;"	f
delimitMate#WithinEmptyPair	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#WithinEmptyPair() "{{{$/;"	f
delimitMate_version	cache-plug/delimitMate/plugin/delimitMate.vim	/^let delimitMate_version = "2.8"$/;"	v
delimiterRegexp	cache-plug/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f
deselectItem	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f
detect_filetypes	cache-plug/vim-polyglot/scripts/build	/^def detect_filetypes(glob)$/;"	f	class:rules_to_code.rule_to_code.detect_filetypes_str
detect_filetypes_str	cache-plug/vim-polyglot/scripts/build	/^def detect_filetypes_str(contents)$/;"	f	class:rules_to_code.rule_to_code
detect_indent	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  func! s:detect_indent() abort$/;"	f
devPrefixes	cache-plug/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v
did_c_syn_inits	cache-plug/vim-polyglot/syntax/llvm.vim	/^    let did_c_syn_inits = 1$/;"	v
did_c_syn_inits	cache-plug/vim-polyglot/syntax/tablegen.vim	/^    let did_c_syn_inits = 1$/;"	v
did_cql_syn_inits	cache-plug/vim-polyglot/syntax/cql.vim	/^    let did_cql_syn_inits = 1$/;"	v
did_cry_syntax_inits	cache-plug/vim-polyglot/syntax/cryptol.vim	/^    let did_cry_syntax_inits = 1$/;"	v
did_css_syn_inits	cache-plug/vim-polyglot/syntax/stylus.vim	/^    let did_css_syn_inits = 1$/;"	v
did_eighth_syntax_inits	cache-plug/vim-polyglot/syntax/8th.vim	/^    let did_eighth_syntax_inits=1$/;"	v
did_fs_syntax_inits	cache-plug/vim-polyglot/syntax/fsharp.vim	/^        let did_fs_syntax_inits = 1$/;"	v
did_gnuplot_syntax_inits	cache-plug/vim-polyglot/syntax/gnuplot.vim	/^    let did_gnuplot_syntax_inits = 1$/;"	v
did_haxe_syn_inits	cache-plug/vim-polyglot/syntax/haxe.vim	/^    let did_haxe_syn_inits = 1$/;"	v
did_install_default_menus	cache-plug/vim-polyglot/extras/menu.vim	/^let did_install_default_menus = 1$/;"	v
did_install_syntax_menu	cache-plug/vim-polyglot/extras/menu.vim	/^  let did_install_syntax_menu = 1$/;"	v
did_javascript_syn_inits	cache-plug/vim-polyglot/extras/flow.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	cache-plug/vim-polyglot/extras/jsdoc.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	cache-plug/vim-polyglot/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_lily_syn_inits	cache-plug/vim-polyglot/syntax/lilypond.vim	/^    let did_lily_syn_inits = 1$/;"	v
did_load_filetypes	cache-plug/vim-polyglot/extras/filetype.vim	/^let did_load_filetypes = 1$/;"	v
did_load_filetypes	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^let did_load_filetypes = 1$/;"	v
did_load_polyglot	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^let did_load_polyglot = 1$/;"	v
did_lua_syn_inits	cache-plug/vim-polyglot/syntax/lua.vim	/^    let did_lua_syn_inits = 1$/;"	v
did_mako_syn_inits	cache-plug/vim-polyglot/syntax/mako.vim	/^    let did_mako_syn_inits = 1$/;"	v
did_mmp_syntax_inits	cache-plug/vim-polyglot/syntax/mmp.vim	/^  let did_mmp_syntax_inits=1$/;"	v
did_nim_syn_inits	cache-plug/vim-polyglot/syntax/nim.vim	/^    let did_nim_syn_inits = 1$/;"	v
did_octave_syntax_inits	cache-plug/vim-polyglot/syntax/octave.vim	/^    let did_octave_syntax_inits = 1$/;"	v
did_proto_syn_inits	cache-plug/vim-polyglot/syntax/fbs.vim	/^    let did_proto_syn_inits = 1$/;"	v
did_proto_syn_inits	cache-plug/vim-polyglot/syntax/proto.vim	/^    let did_proto_syn_inits = 1$/;"	v
did_ps1_syn_inits	cache-plug/vim-polyglot/syntax/ps1.vim	/^		let did_ps1_syn_inits = 1$/;"	v
did_python_syn_inits	cache-plug/vim-polyglot/syntax/python.vim	/^        let did_python_syn_inits = 1$/;"	v
did_qml_syn_inits	cache-plug/vim-polyglot/syntax/qml.vim	/^    let did_qml_syn_inits = 1$/;"	v
did_racket_syntax_inits	cache-plug/vim-polyglot/syntax/racket.vim	/^    let did_racket_syntax_inits = 1$/;"	v
did_raku_syntax_inits	cache-plug/vim-polyglot/syntax/raku.vim	/^        let did_raku_syntax_inits = 1$/;"	v
did_reva_syntax_inits	cache-plug/vim-polyglot/syntax/reva.vim	/^    let did_reva_syntax_inits=1$/;"	v
did_rhelp_syntax_inits	cache-plug/vim-polyglot/syntax/rhelp.vim	/^    let did_rhelp_syntax_inits = 1$/;"	v
did_sexplib_syntax_inits	cache-plug/vim-polyglot/syntax/sexplib.vim	/^    let did_sexplib_syntax_inits = 1$/;"	v
did_tapverboseoutput_syntax_inits	cache-plug/vim-polyglot/syntax/tap.vim	/^  let did_tapverboseoutput_syntax_inits = 1$/;"	v
did_thrift_syn_inits	cache-plug/vim-polyglot/syntax/thrift.vim	/^    let did_thrift_syn_inits = 1$/;"	v
did_toolbar_tmenu	cache-plug/vim-polyglot/extras/menu.vim	/^  let did_toolbar_tmenu = 1$/;"	v
did_tptp_syntax_inits	cache-plug/vim-polyglot/syntax/tptp.vim	/^    let did_tptp_syntax_inits = 1$/;"	v
did_twig_syn_inits	cache-plug/vim-polyglot/syntax/twig.vim	/^    let did_twig_syn_inits = 1$/;"	v
did_txt_syn_inits	cache-plug/vim-polyglot/syntax/textile.vim	/^        let did_txt_syn_inits = 1$/;"	v
did_typescript_hilink	cache-plug/vim-polyglot/syntax/common.vim	/^let did_typescript_hilink = 1$/;"	v
did_u_syntax_inits	cache-plug/vim-polyglot/syntax/unison.vim	/^    let did_u_syntax_inits = 1$/;"	v
did_vbnet_syntax_inits	cache-plug/vim-polyglot/syntax/vbnet.vim	/^        let did_vbnet_syntax_inits = 1$/;"	v
did_velocity_syn_inits	cache-plug/vim-polyglot/syntax/velocity.vim	/^    let did_velocity_syn_inits = 1$/;"	v
diff	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:diff(rline, aline, rlinenr, alinenr, rprefix, aprefix, regions, whole_line)$/;"	f
diff_modifier	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_modifier(count) abort$/;"	f
diff_restore	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
diff_window_count	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
diffcomplete	cache-plug/vim-polyglot/ftplugin/gitcommit.vim	/^function! s:diffcomplete(A,L,P)$/;"	f
diffidx	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
diffoff	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
diffoff_all	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
diffthis	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
dir	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dir(bufnr) abort$/;"	f
displayWidth	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f
displayWidthWithLimit	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f
do_handle_pattern_match_block	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:do_handle_pattern_match_block(relative_line, context)$/;"	f
document_structure	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let document_structure = [$/;"	v
document_structure	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let document_structure = ['article', 'cell', 'columnheader', 'definition', 'directory', 'document', 'feed', 'figure', 'group', 'heading', 'img', 'list', 'listitem', 'math', 'none', 'note', 'presentation', 'region', 'row', 'rowheader', 'separator', 'table', 'term']$/;"	v
documentationSymbol	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:documentationSymbol(xmlSig, assembly, cont)$/;"	f
dodigits	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^function! s:dodigits(digits)$/;"	f
doesOrderConnect	cache-plug/vim-polyglot/indent/applescript.vim	/^func! s:doesOrderConnect(text)$/;"	f
doobject	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^function! s:doobject(string)$/;"	f
dopopd	cache-plug/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
dos_shell	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dos_shell()$/;"	f
dosbatch_cmdextversion	cache-plug/vim-polyglot/syntax/dosbatch.vim	/^  let dosbatch_cmdextversion = 2$/;"	v
doubleClickDuration	cache-plug/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c
download	cache-plug/fzf/install	/^download() {$/;"	f
download	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:download(branch)$/;"	f
download	cache-plug/vim-polyglot/scripts/build	/^def download(packages)$/;"	f
dprint	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
dpub_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let dpub_role = [$/;"	v
dpub_role	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let dpub_role = ['dpub-abstract', 'dpub-afterword', 'dpub-appendix', 'dpub-biblioentry', 'dpub-bibliography', 'dpub-biblioref', 'dpub-chapter', 'dpub-cover', 'dpub-epilogue', 'dpub-footnote', 'dpub-footnotes', 'dpub-foreword', 'dpub-glossary', 'dpub-glossdef', 'dpub-glossref', 'dpub-glossterm', 'dpub-index', 'dpub-locator', 'dpub-noteref', 'dpub-notice', 'dpub-pagebreak', 'dpub-pagelist', 'dpub-part', 'dpub-preface', 'dpub-prologue', 'dpub-pullquote', 'dpub-qna', 'dpub-subtitle', 'dpub-tip', 'dpub-title', 'dpub-toc']$/;"	v
drag_and_drop_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let drag_and_drop_attributes = {$/;"	v
drawBorder	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder() {$/;"	f
drawBorder	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder() {$/;"	f
drawBorderAround	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround() {$/;"	f
drawBorderHorizontal	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal(top, bottom bool) {$/;"	f
drawBorderVertical	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderVertical(left, right bool) {$/;"	f
drop_while	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:drop_while(f, xs) abort$/;"	f
dstring	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
dupeTheme	cache-plug/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f
eachLine	cache-plug/fzf/src/terminal.go	/^type eachLine struct {$/;"	t
each_hash	cache-plug/vim-polyglot/scripts/build	/^def each_hash(data, &block)$/;"	f
echo	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:echo(str) abort$/;"	f
echo	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! s:echo(msg, hi)$/;"	f
echo_error	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! s:echo_error(msg, ...) abort$/;"	f
echo_signature	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! s:echo_signature(parts)$/;"	f
echorizer.eat	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.eat() abort$/;"	f
echorizer.echo	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.echo() abort$/;"	f
echorizer.echo_ansi	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function s:echorizer.echo_ansi(code) abort$/;"	f
ecrystal#SetSubtype	cache-plug/vim-polyglot/autoload/ecrystal.vim	/^function! ecrystal#SetSubtype() abort$/;"	f
elixir#indent	cache-plug/vim-polyglot/indent/elixir.vim	/^function! elixir#indent(lnum)$/;"	f
elixir#indent#handle_follow_prev_nb	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_follow_prev_nb(context)$/;"	f
elixir#indent#handle_following_trailing_binary_operator	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_binary_operator(context)$/;"	f
elixir#indent#handle_inside_block	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_block(context)$/;"	f
elixir#indent#handle_inside_generic_block	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_generic_block(context)$/;"	f
elixir#indent#handle_starts_with_binary_operator	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_binary_operator(context)$/;"	f
elixir#indent#handle_starts_with_end	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_end(context)$/;"	f
elixir#indent#handle_starts_with_pipe	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_pipe(context)$/;"	f
elixir#indent#handle_starts_with_string_continuation	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_string_continuation(context)$/;"	f
elixir#indent#handle_top_of_file	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#handle_top_of_file(context)$/;"	f
elixir#indent#indent	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#indent(lnum)$/;"	f
elixir#indent#searchpair_back_skip	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! elixir#indent#searchpair_back_skip()$/;"	f
elixir#util#get_filename	cache-plug/vim-polyglot/autoload/elixir/util.vim	/^function! elixir#util#get_filename(word) abort$/;"	f
ellipsis	cache-plug/fzf/src/terminal.go	/^const ellipsis string = ".."$/;"	c
empty	cache-plug/delimitMate/Makefile	/^empty    :=$/;"	m
emptyLine	cache-plug/fzf/src/terminal.go	/^var emptyLine = itemLine{}$/;"	v
empty_border	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:empty_border(border) abort$/;"	f
enable_staging_from_hunk_preview_window	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:enable_staging_from_hunk_preview_window()$/;"	f
enabled	cache-plug/vim-polyglot/syntax/svelte.vim	/^function! s:enabled(language)$/;"	f
enc_to_cp	cache-plug/fzf/plugin/fzf.vim	/^  function! s:enc_to_cp(str)$/;"	f
encode	cache-plug/vim-polyglot/autoload/vital/_crystal/Web/JSON.vim	/^function! s:encode(val, ...) abort$/;"	f
ends_with	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
ends_with_backslash	cache-plug/vim-polyglot/indent/tcl.vim	/^function s:ends_with_backslash(lnum)$/;"	f
equals	cache-plug/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f
eregex#toggle	cache-plug/vim-polyglot/scripts/eregex.vim	/^function! eregex#toggle(...)$/;"	f
error	cache-plug/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
error	cache-plug/vim-polyglot/autoload/dart.vim	/^function! s:error(text) abort$/;"	f
errorExit	cache-plug/fzf/src/options.go	/^func errorExit(msg string) {$/;"	f
errorExit	cache-plug/fzf/src/tui/tui.go	/^func errorExit(message string) {$/;"	f
error_message	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:error_message(msg) abort$/;"	f
escPollInterval	cache-plug/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c
escSequence	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f
escape	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
escape	cache-plug/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
escape	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:escape(chars)$/;"	f
escape_pattern	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
escapedColon	cache-plug/fzf/src/options.go	/^	escapedColon = 0$/;"	c
escapedComma	cache-plug/fzf/src/options.go	/^	escapedComma = 1$/;"	c
escapedPlus	cache-plug/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c
escapesConditionals	cache-plug/vim-polyglot/syntax/neomuttrc.vim	/^function! s:escapesConditionals(baseName, sequence, padding, conditional)$/;"	f
eval	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
evaluate	cache-plug/delimitMate/test/expand_cr.vim	/^let evaluate = 0$/;"	v
evaluate	cache-plug/delimitMate/test/expand_space.vim	/^let evaluate = 0$/;"	v
evaluateScrollOffset	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) evaluateScrollOffset(list []*Item, height int) int {$/;"	f
evaluate_expand	cache-plug/lightline.vim/autoload/lightline.vim	/^function! s:evaluate_expand(component) abort$/;"	f
evaluate_opts	cache-plug/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
event_attributes_value	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let event_attributes_value = {$/;"	v
event_handler_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let event_handler_attributes = {'onabort': [], 'onblur': [], 'oncanplay': [], 'oncanplaythrough': [], 'onchange': [], 'onclick': [], 'oncontextmenu': [], 'ondblclick': [], 'ondrag': [], 'ondragend': [], 'ondragenter': [], 'ondragleave': [], 'ondragover': [], 'ondragstart': [], 'ondrop': [], 'ondurationchange': [], 'onemptied': [], 'onended': [], 'onerror': [], 'onfocus': [], 'onformchange': [], 'onforminput': [], 'oninput': [], 'oninvalid': [], 'onkeydown': [], 'onkeypress': [], 'onkeyup': [], 'onload': [], 'onloadeddata': [], 'onloadedmetadata': [], 'onloadstart': [], 'onmousedown': [], 'onmousemove': [], 'onmouseout': [], 'onmouseover': [], 'onmouseup': [], 'onmousewheel': [], 'onpause': [], 'onplay': [], 'onplaying': [], 'onprogress': [], 'onratechange': [], 'onreadystatechange': [], 'onscroll': [], 'onseeked': [], 'onseeking': [], 'onselect': [], 'onshow': [], 'onstalled': [], 'onsubmit': [], 'onsuspend': [], 'ontimeupdate': [], 'onvolumechange': [], 'onwaiting': [], 'onselectstart': [], 'onselectchange': []}$/;"	v
except	cache-plug/vim-polyglot/scripts/build	/^def except(hash, *keys)$/;"	f
excmds	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
exec	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! s:exec(cmd, ...) abort$/;"	f
executable	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
execute	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:execute(cmd)$/;"	f
execute	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^function! s:execute(winid, cmd) abort$/;"	f
execute	cache-plug/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
executeCommand	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool) {$/;"	f
executeRegexp	cache-plug/fzf/src/options.go	/^var executeRegexp *regexp.Regexp$/;"	v
execute_term	cache-plug/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
execute_tmux	cache-plug/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
exists	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:exists(name, ...) "{{{$/;"	f
exists	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:exists(name) abort dict$/;"	f
exists_file	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:exists_file(bufnr) abort$/;"	f
exitCancel	cache-plug/fzf/src/constants.go	/^	exitCancel    = -1$/;"	c
exitError	cache-plug/fzf/src/constants.go	/^	exitError     = 2$/;"	c
exitInterrupt	cache-plug/fzf/src/constants.go	/^	exitInterrupt = 130$/;"	c
exitNoMatch	cache-plug/fzf/src/constants.go	/^	exitNoMatch   = 1$/;"	c
exitOk	cache-plug/fzf/src/constants.go	/^	exitOk        = 0$/;"	c
exit_handler	cache-plug/fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
exit_status	cache-plug/fzf/plugin/fzf.vim	/^  let exit_status = v:shell_error$/;"	v
expand	cache-plug/lightline.vim/autoload/lightline.vim	/^function! s:expand(components) abort$/;"	f
expand	cache-plug/lightline.vim/test/expand.vim	/^function! s:expand(...)$/;"	f
expand_all	cache-plug/vim-polyglot/scripts/build	/^def expand_all(pattern, all = false)$/;"	f	class:rules_to_code.rule_to_code
expect	cache-plug/delimitMate/test/expand_cr.vim	/^    let expect = 0$/;"	v
expect	cache-plug/delimitMate/test/expand_cr.vim	/^    let expect = 1$/;"	v
expect	cache-plug/delimitMate/test/expand_cr.vim	/^let expect = 0$/;"	v
expect	cache-plug/delimitMate/test/expand_space.vim	/^    let expect = 0$/;"	v
expect	cache-plug/delimitMate/test/expand_space.vim	/^    let expect = 1$/;"	v
expect	cache-plug/delimitMate/test/expand_space.vim	/^let expect = 0$/;"	v
expected	cache-plug/delimitMate/test/expand_cr.vim	/^    let expected = []$/;"	v
expected	cache-plug/delimitMate/test/expand_space.vim	/^    let expected = []$/;"	v
expected	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 1, 'name': 'GitGutterLineRemovedFirstLine'}]$/;"	v
expected	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 2, 'name': 'GitGutterLineRemoved'}]$/;"	v
exports	cache-plug/coc.nvim/build/index.js	/^    module2 = {exports: {}};$/;"	p	class:module2
extend	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
extend_opts	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
extendedMatch	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]int) {$/;"	f
extract	cache-plug/vim-polyglot/scripts/build	/^def extract(packages)$/;"	f	class:rules_to_code.rule_to_code
extractColor	cache-plug/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]ansiOffset, *ansiState) {$/;"	f
extract_identifier	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:extract_identifier(word) abort$/;"	f
f1Help	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:f1Help(filePath, line, character, cont)$/;"	f
fail	cache-plug/fzf/bin/fzf-tmux	/^fail() {$/;"	f
fd	cache-plug/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) fd() int {$/;"	f
feed	cache-plug/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f
fennel_check_for_string_worker	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:fennel_check_for_string_worker()$/;"	f
fennel_indent_pos	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:fennel_indent_pos()$/;"	f
file_options	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
file_source	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
file_split_prefix	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
filename	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:filename(bufnr) abort$/;"	f
filename	cache-plug/vim-polyglot/indent/sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	cache-plug/vim-polyglot/indent/sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	cache-plug/vim-polyglot/indent/sql.vim	/^let filename = 'sqlanywhere'$/;"	v
filename	cache-plug/vim-polyglot/syntax/sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	cache-plug/vim-polyglot/syntax/sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	cache-plug/vim-polyglot/syntax/sql.vim	/^let filename = 'sqloracle'$/;"	v
filetypedetect	cache-plug/vim-polyglot/extras/filetype.vim	/^augroup filetypedetect$/;"	a
filetypedetect	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^augroup filetypedetect$/;"	a
fill	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, onMove func()) FillReturn {$/;"	f
fill	cache-plug/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, n ColorPair, r rune) {$/;"	f
fillString	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair) FillReturn {$/;"	f
fill_quickfix	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(list, ...)$/;"	f
filter	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! s:filter(list, id) abort$/;"	f
fin	cache-plug/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f
find	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
findAnsiStart	cache-plug/fzf/src/ansi.go	/^func findAnsiStart(str string) int {$/;"	f
findFirstMatch	cache-plug/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f
findLastMatch	cache-plug/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f
findOffset	cache-plug/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f
findOffset	cache-plug/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f
findWorkspace	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:findWorkspace(dir, cont)$/;"	f
find_block	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:find_block(current_mode)$/;"	f
find_completion_start	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_completion_start() abort$/;"	f
find_current_signs	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:find_current_signs(bufnr) abort$/;"	f
find_following_block	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:find_following_block(linum) abort$/;"	f
find_index	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
find_indices	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
find_last_index	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
find_last_pos	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:find_last_pos(lnum, text, match)$/;"	f
find_open_window	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
find_opening_paren	cache-plug/vim-polyglot/indent/cython.vim	/^function! s:find_opening_paren(lnum, col)$/;"	f
find_opening_paren	cache-plug/vim-polyglot/indent/python.vim	/^function! s:find_opening_paren(lnum, col)$/;"	f
find_pred_block	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:find_pred_block(linum) abort$/;"	f
find_root_by	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_root_by(search_dir, d) abort$/;"	f
find_root_by_spec_and_src	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! s:find_root_by_spec_and_src(d) abort$/;"	f
find_start_of_block	cache-plug/vim-polyglot/indent/cython.vim	/^function! s:find_start_of_block(lnum, types, skip, multiple) abort$/;"	f
find_start_of_block	cache-plug/vim-polyglot/indent/python.vim	/^function! s:find_start_of_block(lnum, types, skip, multiple) abort$/;"	f
find_start_of_multiline_statement	cache-plug/vim-polyglot/indent/cython.vim	/^function! s:find_start_of_multiline_statement(lnum)$/;"	f
find_start_of_multiline_statement	cache-plug/vim-polyglot/indent/python.vim	/^function! s:find_start_of_multiline_statement(lnum)$/;"	f
findall	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:findall(text, rx) abort$/;"	f
finish_reconciling	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:finish_reconciling() abort$/;"	f
firstKey	cache-plug/fzf/src/options.go	/^func firstKey(keymap map[int]string) int {$/;"	f
first_line	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
fish	cache-plug/fzf/test/test_go.rb	/^    def fish$/;"	f
fish#Complete	cache-plug/vim-polyglot/autoload/fish.vim	/^function! fish#Complete(findstart, base)$/;"	f
fish#Fold	cache-plug/vim-polyglot/autoload/fish.vim	/^function! fish#Fold()$/;"	f
fish#Format	cache-plug/vim-polyglot/autoload/fish.vim	/^function! fish#Format()$/;"	f
fish#Indent	cache-plug/vim-polyglot/autoload/fish.vim	/^function! fish#Indent()$/;"	f
fish#errorformat	cache-plug/vim-polyglot/autoload/fish.vim	/^function! fish#errorformat()$/;"	f
fix_beginfigs	cache-plug/vim-polyglot/ftplugin/mp.vim	/^  function! s:fix_beginfigs()$/;"	f
fix_file_references	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:fix_file_references(filepath, hunk_diff)$/;"	f
fix_quotes	cache-plug/vim-polyglot/scripts/import_vim	/^def fix_quotes(a)$/;"	f
flatten	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
flow_elements	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let flow_elements = phrasing_elements + ['p', 'hr', 'pre', 'ul', 'ol', 'dl', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hgroup', 'address', 'blockquote', 'ins', 'del', 'element', 'object', 'main', 'map', 'noscript', 'section', 'nav', 'article', 'aside', 'header', 'footer', 'video', 'audio', 'figure', 'table', 'template', 'form', 'fieldset', 'menu', 'canvas', 'details']$/;"	v
flush	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f
fname_prefix	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
fnameescape	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
focus	cache-plug/fzf/test/test_go.rb	/^  def focus$/;"	f	class:Tmux
foldable	cache-plug/vim-polyglot/syntax/crystal.vim	/^function! s:foldable(...) abort$/;"	f
foldable	cache-plug/vim-polyglot/syntax/ruby.vim	/^function! s:foldable(...) abort$/;"	f
folded	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:folded()$/;"	f
foldl	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
foldl1	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
foldr	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
foldr1	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
foobar	cache-plug/vim-polyglot/tests/indent/2.1/test.js	/^function foobar() {$/;"	f
foobar	cache-plug/vim-polyglot/tests/indent/4.1/test.js	/^function foobar() {$/;"	f
format	cache-plug/vim-prettier/autoload/prettier/job/runner.vim	/^function! s:format(cmd, startSelection, endSelection) abort$/;"	f
format_cmd	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
format_excmd	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
format_for_log	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:format_for_log(data) abort$/;"	f
format_mark	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
format_win	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
fortran_free_source	cache-plug/vim-polyglot/syntax/sinda.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	cache-plug/vim-polyglot/syntax/tak.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	cache-plug/vim-polyglot/syntax/trasys.vim	/^let fortran_free_source=1$/;"	v
friendly_name	cache-plug/vim-gitgutter/test/runner.vim	/^  let friendly_name = FriendlyName(test)$/;"	v
fsdn	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:fsdn(signature, cont)$/;"	f
fsharp#OnCursorMove	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#OnCursorMove()$/;"	f
fsharp#OnFSProjSave	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#OnFSProjSave()$/;"	f
fsharp#documentation	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#documentation(filePath, line, character, cont)$/;"	f
fsharp#loadProject	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#loadProject(...)$/;"	f
fsharp#loadWorkspaceAuto	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#loadWorkspaceAuto()$/;"	f
fsharp#openFsi	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#openFsi(returnFocus)$/;"	f
fsharp#quitFsi	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#quitFsi()$/;"	f
fsharp#reloadProjects	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#reloadProjects()$/;"	f
fsharp#resetFsi	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#resetFsi()$/;"	f
fsharp#sendAllToFsi	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#sendAllToFsi()$/;"	f
fsharp#sendFsi	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#sendFsi(text)$/;"	f
fsharp#sendLineToFsi	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#sendLineToFsi()$/;"	f
fsharp#sendSelectionToFsi	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#sendSelectionToFsi() range$/;"	f
fsharp#showF1Help	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#showF1Help()$/;"	f
fsharp#showSignature	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#showSignature()$/;"	f
fsharp#showTooltip	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#showTooltip()$/;"	f
fsharp#toSnakeCase	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#toSnakeCase(str)$/;"	f
fsharp#toggleFsi	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#toggleFsi()$/;"	f
fsharp#updateFSAC	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! fsharp#updateFSAC(...)$/;"	f
fugitive	cache-plug/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#BlameComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameSyntax	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#BufReadCmd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus() abort$/;"	f
fugitive#BufWriteCmd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#Cd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#CommitComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P, ...) abort$/;"	f
fugitive#CommonDir	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommonDir(dir) abort$/;"	f
fugitive#Complete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteForWorkingDir	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort$/;"	f
fugitive#CompleteObject	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#Cwindow	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#DiffClose	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DiffClose() abort$/;"	f
fugitive#Diffsplit	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, args) abort$/;"	f
fugitive#EditComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Expand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#FetchComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P, ...) abort$/;"	f
fugitive#FileReadCmd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GitVersion	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#GrepComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#Init	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Init() abort$/;"	f
fugitive#LogCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P, ...) abort$/;"	f
fugitive#MessageCfile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#Object	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, args) abort$/;"	f
fugitive#PagerFor	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PagerFor(argv, ...) abort$/;"	f
fugitive#Path	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#Prepare	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Prepare(...) abort$/;"	f
fugitive#PrepareDirEnvArgv	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvArgv(...) abort$/;"	f
fugitive#PullComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P, ...) abort$/;"	f
fugitive#PushComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P, ...) abort$/;"	f
fugitive#ReadCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#ReadComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P, ...) abort$/;"	f
fugitive#ReloadStatus	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#RemoteUrl	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#Resume	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Resume() abort$/;"	f
fugitive#RevParse	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P, ...) abort$/;"	f
fugitive#SourceCmd	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#StatusCfile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#StatusCfile() abort$/;"	f
fugitive#Statusline	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#WqCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#buffer	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#delete	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#detect	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#filereadable	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#head	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#isdirectory	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive_blame	cache-plug/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_diff	cache-plug/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_job	cache-plug/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_job$/;"	a
fugitive_status	cache-plug/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	cache-plug/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
func	cache-plug/lightline.vim/autoload/lightline.vim	/^function! s:func(name) abort$/;"	f
funcs.buf_add_highlight	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_add_highlight(bufnr, srcId, hlGroup, line, colStart, colEnd) abort$/;"	f
funcs.buf_attach	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_attach(...)$/;"	f
funcs.buf_clear_namespace	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_clear_namespace(bufnr, srcId, startLine, endLine) abort$/;"	f
funcs.buf_del_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_del_var(bufnr, name)$/;"	f
funcs.buf_detach	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_detach()$/;"	f
funcs.buf_get_changedtick	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_changedtick(bufnr)$/;"	f
funcs.buf_get_lines	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_lines(bufnr, start, end, strict) abort$/;"	f
funcs.buf_get_mark	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_mark(bufnr, name)$/;"	f
funcs.buf_get_name	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_name(bufnr)$/;"	f
funcs.buf_get_option	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_option(bufnr, name)$/;"	f
funcs.buf_get_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_var(bufnr, name)$/;"	f
funcs.buf_is_valid	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_is_valid(bufnr)$/;"	f
funcs.buf_line_count	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_line_count(bufnr) abort$/;"	f
funcs.buf_set_lines	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_lines(bufnr, start, end, strict, ...) abort$/;"	f
funcs.buf_set_name	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_name(bufnr, name) abort$/;"	f
funcs.buf_set_option	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_option(bufnr, name, val)$/;"	f
funcs.buf_set_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_var(bufnr, name, val)$/;"	f
funcs.call_atomic	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_atomic(calls)$/;"	f
funcs.call_dict_function	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_dict_function(dict, method, args) abort$/;"	f
funcs.call_function	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_function(method, args) abort$/;"	f
funcs.command	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command(command) abort$/;"	f
funcs.command_output	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command_output(cmd)$/;"	f
funcs.create_namespace	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.create_namespace(name) abort$/;"	f
funcs.del_current_line	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_current_line(line)$/;"	f
funcs.del_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_var(name) abort$/;"	f
funcs.err_write	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_write(str)$/;"	f
funcs.err_writeln	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_writeln(str)$/;"	f
funcs.eval	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.eval(expr) abort$/;"	f
funcs.feedkeys	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.feedkeys(keys, mode, escape_csi)$/;"	f
funcs.get_api_info	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_api_info()$/;"	f
funcs.get_current_buf	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_buf()$/;"	f
funcs.get_current_line	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_line()$/;"	f
funcs.get_current_tabpage	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_tabpage()$/;"	f
funcs.get_current_win	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_win()$/;"	f
funcs.get_mode	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_mode()$/;"	f
funcs.get_option	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_option(name)$/;"	f
funcs.get_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_var(var)$/;"	f
funcs.get_vvar	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_vvar(var)$/;"	f
funcs.list_bufs	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_bufs()$/;"	f
funcs.list_runtime_paths	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_runtime_paths()$/;"	f
funcs.list_tabpages	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_tabpages()$/;"	f
funcs.list_wins	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_wins() abort$/;"	f
funcs.out_write	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.out_write(str)$/;"	f
funcs.set_client_info	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_client_info(...) abort$/;"	f
funcs.set_current_buf	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_buf(bufnr) abort$/;"	f
funcs.set_current_dir	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_dir(dir) abort$/;"	f
funcs.set_current_line	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_line(line)$/;"	f
funcs.set_current_tabpage	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_tabpage(tabnr) abort$/;"	f
funcs.set_current_win	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_win(win_id) abort$/;"	f
funcs.set_option	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_option(name, value) abort$/;"	f
funcs.set_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_var(name, value) abort$/;"	f
funcs.strwidth	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.strwidth(str)$/;"	f
funcs.subscribe	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.subscribe(...) abort$/;"	f
funcs.tabpage_del_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_del_var(tabnr, name)$/;"	f
funcs.tabpage_get_number	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_number(id)$/;"	f
funcs.tabpage_get_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_var(tabnr, name)$/;"	f
funcs.tabpage_get_win	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_win(tabnr)$/;"	f
funcs.tabpage_is_valid	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_is_valid(tabnr)$/;"	f
funcs.tabpage_list_wins	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_list_wins(tabnr)$/;"	f
funcs.tabpage_set_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_set_var(tabnr, name, value)$/;"	f
funcs.unsubscribe	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.unsubscribe(...) abort$/;"	f
funcs.win_close	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_close(win_id, ...) abort$/;"	f
funcs.win_del_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_del_var(win_id, name) abort$/;"	f
funcs.win_get_buf	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_buf(winid)$/;"	f
funcs.win_get_cursor	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_cursor(win_id) abort$/;"	f
funcs.win_get_height	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_height(win_id) abort$/;"	f
funcs.win_get_number	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_number(win_id) abort$/;"	f
funcs.win_get_option	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_option(win_id, name) abort$/;"	f
funcs.win_get_position	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_position(win_id) abort$/;"	f
funcs.win_get_tabpage	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_tabpage(win_id) abort$/;"	f
funcs.win_get_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_var(win_id, name) abort$/;"	f
funcs.win_get_width	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_width(win_id) abort$/;"	f
funcs.win_is_valid	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_is_valid(win_id) abort$/;"	f
funcs.win_set_buf	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_buf(win_id, buf_id) abort$/;"	f
funcs.win_set_cursor	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_cursor(win_id, pos) abort$/;"	f
funcs.win_set_height	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_height(win_id, height) abort$/;"	f
funcs.win_set_option	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_option(win_id, name, value) abort$/;"	f
funcs.win_set_var	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_var(win_id, name, value) abort$/;"	f
funcs.win_set_width	cache-plug/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_width(win_id, width) abort$/;"	f
function	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
function	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
function	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
function_range_at	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:function_range_at(linum) abort$/;"	f
fzf	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
fzf	cache-plug/fzf/plugin/fzf.vim	/^      let fzf.buf = term_start([&shell, &shellcmdflag, command], term_opts)$/;"	v
fzf	cache-plug/fzf/plugin/fzf.vim	/^      let fzf.temps.batchfile = s:fzf_tempname().'.bat'$/;"	v
fzf	cache-plug/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/cache.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/constants.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/core.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/history.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/item.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/merger.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/options.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/reader.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/result.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	cache-plug/fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf!	cache-plug/fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#complete	cache-plug/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#exec	cache-plug/fzf/plugin/fzf.vim	/^function! fzf#exec(...)$/;"	f
fzf#install	cache-plug/fzf/plugin/fzf.vim	/^function! fzf#install()$/;"	f
fzf#run	cache-plug/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	cache-plug/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_buflisted_sorted	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_buflisted_sorted()$/;"	f
fzf#vim#_format_buffer	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_format_buffer(b)$/;"	f
fzf#vim#_lines	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_recent_files	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_recent_files()$/;"	f
fzf#vim#_uniq	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...)$/;"	f
fzf#vim#buffer_lines	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#colors	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...)$/;"	f
fzf#vim#complete	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, has_column, ...)$/;"	f
fzf#vim#helptags	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#lines	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#locate	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	cache-plug/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf.on_exit	cache-plug/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf_buffers	cache-plug/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_call	cache-plug/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
fzf_expand	cache-plug/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
fzf_fnamemodify	cache-plug/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
fzf_getcwd	cache-plug/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
fzf_gitignore#run	cache-plug/vim-polyglot/autoload/fzf_gitignore.vim	/^function! fzf_gitignore#run() abort$/;"	f
fzf_popd	cache-plug/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_restore_colors	cache-plug/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
fzf_tempname	cache-plug/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
fzf_tmux	cache-plug/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
fzf_vim_term	cache-plug/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
g"	plugin/bepo.vim	/^noremap g" g0$/;"	m
g:BufonlyLoaded	cache-plug/vim-bufonly/plugin/bufonly.vim	/^let g:BufonlyLoaded = 1$/;"	v
g:Ferm_SpecialDelimiters	cache-plug/vim-polyglot/syntax/ferm.vim	/^    let   g:Ferm_SpecialDelimiters = g:fermSpecialDelimiters$/;"	v
g:NERDCustomDelimiters	cache-plug/vim-polyglot/ftplugin/caddyfile.vim	/^	let g:NERDCustomDelimiters = {'caddyfile': s:delimiters}$/;"	v
g:NERDCustomDelimiters	cache-plug/vim-polyglot/ftplugin/hcl.vim	/^        let g:NERDCustomDelimiters.hcl = s:delims$/;"	v
g:NERDCustomDelimiters	cache-plug/vim-polyglot/ftplugin/hcl.vim	/^    let g:NERDCustomDelimiters = { 'hcl': s:delims }$/;"	v
g:NERDDelimiterMap	cache-plug/vim-polyglot/ftplugin/caddyfile.vim	/^		let g:NERDDelimiterMap.caddyfile = s:delimiters$/;"	v
g:NERDDelimiterMap	cache-plug/vim-polyglot/ftplugin/hcl.vim	/^        let g:NERDDelimiterMap.hcl = s:delims$/;"	v
g:__gutentags_vim_is_leaving	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:ada#Comment	cache-plug/vim-polyglot/autoload/ada.vim	/^let g:ada#Comment	   = "\\\\v^(\\"[^\\"]*\\"|'.'|[^\\"']){-}\\\\zs\\\\s*--.*"$/;"	v
g:ada#Ctags_Kinds	cache-plug/vim-polyglot/autoload/ada.vim	/^let g:ada#Ctags_Kinds = {$/;"	v
g:ada#DotWordRegex	cache-plug/vim-polyglot/autoload/ada.vim	/^let g:ada#DotWordRegex	   = '\\a\\w*\\(\\_s*\\.\\_s*\\a\\w*\\)*'$/;"	v
g:ada#Keywords	cache-plug/vim-polyglot/autoload/ada.vim	/^	let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	cache-plug/vim-polyglot/autoload/ada.vim	/^       let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	cache-plug/vim-polyglot/autoload/ada.vim	/^    let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	cache-plug/vim-polyglot/autoload/ada.vim	/^let g:ada#Keywords	   = []$/;"	v
g:ada#WordRegex	cache-plug/vim-polyglot/autoload/ada.vim	/^let g:ada#WordRegex	   = '\\a\\w*'$/;"	v
g:ada_default_compiler	cache-plug/vim-polyglot/ftplugin/ada.vim	/^      let g:ada_default_compiler = 'decada'$/;"	v
g:ada_default_compiler	cache-plug/vim-polyglot/ftplugin/ada.vim	/^      let g:ada_default_compiler = 'gnat'$/;"	v
g:aria_attributes_complete	cache-plug/vim-polyglot/autoload/htmlcomplete.vim	/^  let g:aria_attributes_complete = 1$/;"	v
g:autoloaded_fugitive	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:bmenu_max_pathlen	cache-plug/vim-polyglot/extras/menu.vim	/^  let g:bmenu_max_pathlen = 35$/;"	v
g:buftabline_indicators	cache-plug/vim-buftabline/plugin/buftabline.vim	/^let g:buftabline_indicators = get(g:, 'buftabline_indicators', 0)$/;"	v
g:buftabline_numbers	cache-plug/vim-buftabline/plugin/buftabline.vim	/^let g:buftabline_numbers    = get(g:, 'buftabline_numbers',    0)$/;"	v
g:buftabline_plug_max	cache-plug/vim-buftabline/plugin/buftabline.vim	/^let g:buftabline_plug_max   = get(g:, 'buftabline_plug_max',  10)$/;"	v
g:buftabline_separators	cache-plug/vim-buftabline/plugin/buftabline.vim	/^let g:buftabline_separators = get(g:, 'buftabline_separators', 0)$/;"	v
g:buftabline_show	cache-plug/vim-buftabline/plugin/buftabline.vim	/^let g:buftabline_show       = get(g:, 'buftabline_show',       2)$/;"	v
g:c_syntax_for_h	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:c_syntax_for_h = 1$/;"	v
g:cabal_indent_section	cache-plug/vim-polyglot/indent/cabal.vim	/^  let g:cabal_indent_section = 2$/;"	v
g:cabal_indent_section	cache-plug/vim-polyglot/indent/cabal.vim	/^  let g:cabal_indent_section = 4$/;"	v
g:ch_syntax_for_h	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:ch_syntax_for_h = 1$/;"	v
g:clojure_align_multiline_strings	cache-plug/vim-polyglot/indent/clojure.vim	/^		let g:clojure_align_multiline_strings = 0$/;"	v
g:clojure_align_subforms	cache-plug/vim-polyglot/indent/clojure.vim	/^		let g:clojure_align_subforms = 0$/;"	v
g:clojure_fuzzy_indent	cache-plug/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent = 1$/;"	v
g:clojure_fuzzy_indent_blacklist	cache-plug/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_blacklist = ['-fn$', '\\v^with-%(meta|out-str|loading-context)$']$/;"	v
g:clojure_fuzzy_indent_patterns	cache-plug/vim-polyglot/indent/clojure.vim	/^		let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let']$/;"	v
g:clojure_maxlines	cache-plug/vim-polyglot/indent/clojure.vim	/^		let g:clojure_maxlines = 100$/;"	v
g:clojure_special_indent_words	cache-plug/vim-polyglot/indent/clojure.vim	/^		let g:clojure_special_indent_words = 'deftype,defrecord,reify,proxy,extend-type,extend-protocol,letfn'$/;"	v
g:cobol_inline_comment	cache-plug/vim-polyglot/syntax/cobol.vim	/^   let g:cobol_inline_comment=0$/;"	v
g:coc#_context	cache-plug/coc.nvim/autoload/coc.vim	/^let g:coc#_context = {'start': 0, 'preselect': -1,'candidates': []}$/;"	v
g:coc_global_extensions	cache-plug/coc.nvim/autoload/coc.vim	/^let g:coc_global_extensions = get(g:, 'coc_global_extensions', [])$/;"	v
g:coc_selected_text	cache-plug/coc.nvim/autoload/coc.vim	/^let g:coc_selected_text = ''$/;"	v
g:coc_service_initialized	cache-plug/coc.nvim/plugin/coc.vim	/^let g:coc_service_initialized = 0$/;"	v
g:coc_user_config	cache-plug/coc.nvim/autoload/coc.vim	/^let g:coc_user_config = get(g:, 'coc_user_config', {})$/;"	v
g:coc_vim_commands	cache-plug/coc.nvim/autoload/coc.vim	/^let g:coc_vim_commands = []$/;"	v
g:coc_workspace_initialized	cache-plug/coc.nvim/plugin/coc.vim	/^let g:coc_workspace_initialized = 0$/;"	v
g:colors_name	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^let g:colors_name = 'gruvbox8'$/;"	v
g:colors_name	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^let g:colors_name = 'gruvbox8_hard'$/;"	v
g:colors_name	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^let g:colors_name = 'gruvbox8_soft'$/;"	v
g:crystal#indent#block_continuation_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#block_continuation_regex =$/;"	v
g:crystal#indent#block_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#block_regex =$/;"	v
g:crystal#indent#bracket_continuation_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#bracket_continuation_regex =$/;"	v
g:crystal#indent#bracket_switch_continuation_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#bracket_switch_continuation_regex =$/;"	v
g:crystal#indent#continuation_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#continuation_regex =$/;"	v
g:crystal#indent#crystal_deindent_keywords	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#crystal_deindent_keywords =$/;"	v
g:crystal#indent#crystal_indent_keywords	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#crystal_indent_keywords =$/;"	v
g:crystal#indent#crystal_macro_deindent_keywords	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#crystal_macro_deindent_keywords =$/;"	v
g:crystal#indent#crystal_macro_indent_keywords	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#crystal_macro_indent_keywords =$/;"	v
g:crystal#indent#curr_line_callbacks	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#curr_line_callbacks = [$/;"	v
g:crystal#indent#dot_continuation_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#dot_continuation_regex = '\\.'.g:crystal#indent#eol$/;"	v
g:crystal#indent#end_end_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#end_end_regex =$/;"	v
g:crystal#indent#end_middle_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#end_middle_regex =$/;"	v
g:crystal#indent#end_start_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#end_start_regex =$/;"	v
g:crystal#indent#eol	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#eol = '\\ze\\s*\\%(#.*\\)\\=\\%(\\_$\\|;\\)'$/;"	v
g:crystal#indent#hanging_assignment_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#hanging_assignment_regex =$/;"	v
g:crystal#indent#leading_operator_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#leading_operator_regex = g:crystal#indent#sol.'\\.'$/;"	v
g:crystal#indent#link_attribute_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#link_attribute_regex =$/;"	v
g:crystal#indent#macro_end_end_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#macro_end_end_regex =$/;"	v
g:crystal#indent#macro_end_middle_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#macro_end_middle_regex =$/;"	v
g:crystal#indent#macro_end_start_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#macro_end_start_regex =$/;"	v
g:crystal#indent#macro_hanging_assignment_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#macro_hanging_assignment_regex =$/;"	v
g:crystal#indent#msl_callbacks	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#msl_callbacks = [$/;"	v
g:crystal#indent#non_bracket_continuation_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#non_bracket_continuation_regex =$/;"	v
g:crystal#indent#operator_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#operator_regex =$/;"	v
g:crystal#indent#prev_line_callbacks	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#prev_line_callbacks = [$/;"	v
g:crystal#indent#skip_expr	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#skip_expr =$/;"	v
g:crystal#indent#sol	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#sol = '\\%(\\_^\\|;\\)\\s*\\zs'$/;"	v
g:crystal#indent#syng_delim	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#syng_delim =$/;"	v
g:crystal#indent#syng_strcom	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#syng_strcom =$/;"	v
g:crystal#indent#syng_strcomdelim	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#syng_strcomdelim =$/;"	v
g:crystal#indent#syng_string	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#syng_string =$/;"	v
g:crystal#indent#type_declaration_regex	cache-plug/vim-polyglot/autoload/crystal/indent.vim	/^let g:crystal#indent#type_declaration_regex =$/;"	v
g:crystal_auto_format	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^let g:crystal_auto_format = get(g:, 'crystal_auto_format', 0)$/;"	v
g:crystal_compiler_command	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^let g:crystal_compiler_command = get(g:, 'crystal_compiler_command', 'crystal')$/;"	v
g:crystal_minlines	cache-plug/vim-polyglot/syntax/crystal.vim	/^    let g:crystal_minlines = 500$/;"	v
g:ctags_command	cache-plug/vim-polyglot/extras/menu.vim	/^    let g:ctags_command = "ctags -R ."$/;"	v
g:ctags_command	cache-plug/vim-polyglot/extras/menu.vim	/^    let g:ctags_command = "mc vim:ctags *.*"$/;"	v
g:cucumber_languages	cache-plug/vim-polyglot/syntax/cucumber.vim	/^let g:cucumber_languages = {$/;"	v
g:current_compiler	cache-plug/vim-polyglot/compiler/go.vim	/^let g:current_compiler = "go"$/;"	v
g:debchangelog_listbugs_severities	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^  let g:debchangelog_listbugs_severities = 'critical,grave,serious,important,normal,minor,wishlist'$/;"	v
g:delimitMate_eol_marker	cache-plug/delimitMate/test/eol_marker.vim	/^let g:delimitMate_eol_marker = ';'$/;"	v
g:delimitMate_eol_marker	cache-plug/delimitMate/test/first_buffer_no_ft.vim	/^let g:delimitMate_eol_marker = ';'$/;"	v
g:delimitMate_expand_cr	cache-plug/delimitMate/test/eol_marker.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_cr	cache-plug/delimitMate/test/expand_cr.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_cr	cache-plug/delimitMate/test/first_buffer_no_ft.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_space	cache-plug/delimitMate/test/expand_space.vim	/^let g:delimitMate_expand_space = 1$/;"	v
g:delimitMate_insert_eol_marker	cache-plug/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 0$/;"	v
g:delimitMate_insert_eol_marker	cache-plug/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 1$/;"	v
g:delimitMate_insert_eol_marker	cache-plug/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 2$/;"	v
g:delimitMate_matchpairs	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^let g:delimitMate_matchpairs = '(:),{:},[:],<:>,¿:?,¡:!,,::'$/;"	v
g:delimitMate_quotes	cache-plug/delimitMate/test/autoclose_quotes.vim	/^let g:delimitMate_quotes = '" '' ` « |'$/;"	v
g:did_changelog_ftplugin	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^let g:did_changelog_ftplugin = 1$/;"	v
g:did_cobol_ftplugin_functions	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^let g:did_cobol_ftplugin_functions = 1$/;"	v
g:did_coc_loaded	cache-plug/coc.nvim/plugin/coc.vim	/^let g:did_coc_loaded = 1$/;"	v
g:did_ocaml_switch	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  let g:did_ocaml_switch = 1$/;"	v
g:did_ruby_ftplugin_functions	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
g:eelixir_default_subtype	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:eelixir_default_subtype	cache-plug/vim-polyglot/syntax/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:elixir_indent_max_lookbehind	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^  let g:elixir_indent_max_lookbehind = 30$/;"	v
g:elixir_use_markdown_for_docs	cache-plug/vim-polyglot/syntax/elixir.vim	/^  let g:elixir_use_markdown_for_docs = 0$/;"	v
g:eregex_backward_delim	cache-plug/vim-polyglot/scripts/eregex.vim	/^  let g:eregex_backward_delim = '?'$/;"	v
g:eregex_force_case	cache-plug/vim-polyglot/scripts/eregex.vim	/^  let g:eregex_force_case = 0$/;"	v
g:eregex_forward_delim	cache-plug/vim-polyglot/scripts/eregex.vim	/^  let g:eregex_forward_delim = '\/'$/;"	v
g:erlang_folding	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^	let g:erlang_folding = 0$/;"	v
g:erlang_indent_searchpair_timeout	cache-plug/vim-polyglot/indent/erlang.vim	/^let g:erlang_indent_searchpair_timeout = 2000$/;"	v
g:erlang_keywordprg	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^	let g:erlang_keywordprg = 'erl -man'$/;"	v
g:erlang_unexpected_token_indent	cache-plug/vim-polyglot/indent/erlang.vim	/^  let g:erlang_unexpected_token_indent = -1$/;"	v
g:eruby_default_subtype	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:eruby_default_subtype	cache-plug/vim-polyglot/syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:fennel_align_multiline_strings	cache-plug/vim-polyglot/indent/fennel.vim	/^		let g:fennel_align_multiline_strings = 0$/;"	v
g:fennel_align_subforms	cache-plug/vim-polyglot/indent/fennel.vim	/^		let g:fennel_align_subforms = 0$/;"	v
g:fennel_fuzzy_indent	cache-plug/vim-polyglot/indent/fennel.vim	/^		let g:fennel_fuzzy_indent = 1$/;"	v
g:fennel_fuzzy_indent_blacklist	cache-plug/vim-polyglot/indent/fennel.vim	/^		let g:fennel_fuzzy_indent_blacklist = []$/;"	v
g:fennel_fuzzy_indent_patterns	cache-plug/vim-polyglot/indent/fennel.vim	/^		let g:fennel_fuzzy_indent_patterns = ['^def', '^let', '^while', '^if', '^fn$', '^var$', '^case$', '^for$', '^each$', '^local$', '^global$', '^match$', '^macro', '^lambda$']$/;"	v
g:fennel_maxlines	cache-plug/vim-polyglot/indent/fennel.vim	/^		let g:fennel_maxlines = 100$/;"	v
g:fennel_special_indent_words	cache-plug/vim-polyglot/indent/fennel.vim	/^		let g:fennel_special_indent_words = ''$/;"	v
g:filetype_asa	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:filetype_asa = "fizfuz"$/;"	v
g:filetype_asp	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:filetype_asp = "fizfuz"$/;"	v
g:filetype_fs	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:filetype_fs = "fizfuz"$/;"	v
g:filetype_idr	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:filetype_idr = "fizfuz"$/;"	v
g:filetype_m	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:filetype_m = "fizfuz"$/;"	v
g:filetype_pl	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:filetype_pl = "fizfuz"$/;"	v
g:filetype_pm	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:filetype_pm = "fizfuz"$/;"	v
g:filetype_t	cache-plug/vim-polyglot/tests/extensions.vim	/^let g:filetype_t = "fizfuz"$/;"	v
g:fsharp#languageserver_command	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let g:fsharp#languageserver_command =$/;"	v
g:ft_ignore_pat	cache-plug/vim-polyglot/extras/filetype.vim	/^  let g:ft_ignore_pat = '\\.\\(Z\\|gz\\|bz2\\|zip\\|tgz\\)$'$/;"	v
g:ft_ignore_pat	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  let g:ft_ignore_pat = '\\.\\(Z\\|gz\\|bz2\\|zip\\|tgz\\)$'$/;"	v
g:ftplugin_sql_objects	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_objects = 'function,procedure,event,' .$/;"	v
g:ftplugin_sql_omni_key	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_omni_key = '<C-C>'$/;"	v
g:ftplugin_sql_omni_key_left	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_omni_key_left = '<Left>'$/;"	v
g:ftplugin_sql_omni_key_right	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_omni_key_right = '<Right>'$/;"	v
g:ftplugin_sql_statements	cache-plug/vim-polyglot/ftplugin/sql.vim	/^    let g:ftplugin_sql_statements = 'create'$/;"	v
g:fugitive_git_executable	cache-plug/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'env ' . g:fugitive_git_executable$/;"	v
g:fugitive_git_executable	cache-plug/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	cache-plug/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:fullDefMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^let g:fullDefMatcher = '^\\s*' . s:defMatcher . '\\s\\+' . s:funcNameMatcher . '\\s*' . s:typeSpecMatcher . '\\?\\s*' . s:defArgMatcher . '\\?\\s*' . s:returnTypeMatcher . '\\?\\s*[={]'$/;"	v
g:fzf#vim#buffers	cache-plug/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:gitgutter_async	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_async                        = get(g:, 'gitgutter_async', 1)$/;"	v
g:gitgutter_close_preview_on_escape	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_close_preview_on_escape      = get(g:, 'gitgutter_close_preview_on_escape', 0)$/;"	v
g:gitgutter_diff_args	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_args                    = get(g:, 'gitgutter_diff_args', '')$/;"	v
g:gitgutter_diff_base	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_base                    = get(g:, 'gitgutter_diff_base', '')$/;"	v
g:gitgutter_diff_relative_to	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_relative_to             = get(g:, 'gitgutter_diff_relative_to', 'index')$/;"	v
g:gitgutter_enabled	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_enabled = get(g:, 'gitgutter_enabled', 1)$/;"	v
g:gitgutter_git_args	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_git_args                     = get(g:, 'gitgutter_git_args', '')$/;"	v
g:gitgutter_git_executable	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_git_executable = get(g:, 'gitgutter_git_executable', 'git')$/;"	v
g:gitgutter_grep	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^      let g:gitgutter_grep .= ' --color=never'$/;"	v
g:gitgutter_grep	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^    let g:gitgutter_grep = ''$/;"	v
g:gitgutter_grep	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_grep = get(g:, 'gitgutter_grep', default_grep)$/;"	v
g:gitgutter_highlight_linenrs	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_highlight_linenrs = get(g:, 'gitgutter_highlight_linenrs', 0)$/;"	v
g:gitgutter_highlight_lines	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_highlight_lines   = get(g:, 'gitgutter_highlight_lines', 0)$/;"	v
g:gitgutter_log	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_log                          = get(g:, 'gitgutter_log', 0)$/;"	v
g:gitgutter_map_keys	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_map_keys                     = get(g:, 'gitgutter_map_keys', 1)$/;"	v
g:gitgutter_max_signs	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', -1)$/;"	v
g:gitgutter_max_signs	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', 500)$/;"	v
g:gitgutter_preview_win_floating	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', 0)$/;"	v
g:gitgutter_preview_win_floating	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', 1)$/;"	v
g:gitgutter_preview_win_location	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_preview_win_location = get(g:, 'gitgutter_preview_win_location', 'bo')$/;"	v
g:gitgutter_set_sign_backgrounds	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_set_sign_backgrounds = get(g:, 'gitgutter_set_sign_backgrounds', 0)$/;"	v
g:gitgutter_show_msg_on_hunk_jumping	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_show_msg_on_hunk_jumping     = get(g:, 'gitgutter_show_msg_on_hunk_jumping', 1)$/;"	v
g:gitgutter_sign_added	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_added           = get(g:, 'gitgutter_sign_added', '+')$/;"	v
g:gitgutter_sign_allow_clobber	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_allow_clobber = 1$/;"	v
g:gitgutter_sign_allow_clobber	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_allow_clobber   = get(g:, 'gitgutter_sign_allow_clobber', 0)$/;"	v
g:gitgutter_sign_modified	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_modified        = get(g:, 'gitgutter_sign_modified', '~')$/;"	v
g:gitgutter_sign_modified_removed	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_modified_removed        = get(g:, 'gitgutter_sign_modified_removed', '~_')$/;"	v
g:gitgutter_sign_priority	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_priority     = get(g:, 'gitgutter_sign_priority', 10)$/;"	v
g:gitgutter_sign_removed	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_removed         = get(g:, 'gitgutter_sign_removed', '_')$/;"	v
g:gitgutter_sign_removed_above_and_below	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_removed_above_and_below = get(g:, 'gitgutter_sign_removed_above_and_below', '_¯')$/;"	v
g:gitgutter_sign_removed_first_line	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '_^')$/;"	v
g:gitgutter_sign_removed_first_line	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '‾')$/;"	v
g:gitgutter_signs	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_signs             = get(g:, 'gitgutter_signs', 1)$/;"	v
g:gitgutter_terminal_reports_focus	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_terminal_reports_focus       = get(g:, 'gitgutter_terminal_reports_focus', 1)$/;"	v
g:gitgutter_use_location_list	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_use_location_list            = get(g:, 'gitgutter_use_location_list', 0)$/;"	v
g:gutentags_add_ctrlp_root_markers	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_executable	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_executable_scala	plugin/gutentags.vim	/^let g:gutentags_ctags_executable_scala = 'stags --output tags.temp .'$/;"	v
g:gutentags_ctags_extra_args	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'])$/;"	v
g:gutentags_fake	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_info	plugin/gutentags.vim	/^let g:gutentags_project_info = []$/;"	v
g:gutentags_project_root	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']$/;"	v
g:gutentags_project_root	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	cache-plug/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:haml_self_closing_tags	cache-plug/vim-polyglot/indent/haml.vim	/^  let g:haml_self_closing_tags = 'base|link|meta|br|hr|img|input'$/;"	v
g:haml_self_closing_tags	cache-plug/vim-polyglot/indent/slim.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
g:haml_self_closing_tags	cache-plug/vim-polyglot/indent/slime.vim	/^  let g:haml_self_closing_tags = 'meta|link|img|hr|br'$/;"	v
g:haskell_backpack	plugin/haskell.vim	/^let g:haskell_backpack = 1                " to enable highlighting of backpack keywords$/;"	v
g:haskell_enable_arrowsyntax	plugin/haskell.vim	/^let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`$/;"	v
g:haskell_enable_pattern_synonyms	plugin/haskell.vim	/^let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`$/;"	v
g:haskell_enable_quantification	plugin/haskell.vim	/^let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`$/;"	v
g:haskell_enable_recursivedo	plugin/haskell.vim	/^let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`$/;"	v
g:haskell_enable_static_pointers	plugin/haskell.vim	/^let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`$/;"	v
g:haskell_enable_typeroles	plugin/haskell.vim	/^let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles$/;"	v
g:haskell_indent_case	cache-plug/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_case = 2$/;"	v
g:haskell_indent_do	cache-plug/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_do = 3$/;"	v
g:haskell_indent_guard	cache-plug/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_guard = 2$/;"	v
g:haskell_indent_if	cache-plug/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_if = 3$/;"	v
g:haskell_indent_in	cache-plug/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_in = 1$/;"	v
g:haskell_indent_let	cache-plug/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_let = 4$/;"	v
g:haskell_indent_where	cache-plug/vim-polyglot/indent/haskell.vim	/^  let g:haskell_indent_where = 6$/;"	v
g:html5_aria_attributes_complete	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_aria_attributes_complete = 1$/;"	v
g:html5_event_handler_attributes_complete	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_event_handler_attributes_complete = 1$/;"	v
g:html5_microdata_attributes_complete	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_microdata_attributes_complete = 1$/;"	v
g:html5_rdfa_attributes_complete	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let g:html5_rdfa_attributes_complete = 1$/;"	v
g:idris_indent_case	cache-plug/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_case = 5$/;"	v
g:idris_indent_case	cache-plug/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_case = 5$/;"	v
g:idris_indent_do	cache-plug/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_do = 3$/;"	v
g:idris_indent_do	cache-plug/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_do = 3$/;"	v
g:idris_indent_if	cache-plug/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_if = 3$/;"	v
g:idris_indent_if	cache-plug/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_if = 3$/;"	v
g:idris_indent_let	cache-plug/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_let = 4$/;"	v
g:idris_indent_let	cache-plug/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_let = 4$/;"	v
g:idris_indent_rewrite	cache-plug/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_rewrite = 8$/;"	v
g:idris_indent_rewrite	cache-plug/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_rewrite = 8$/;"	v
g:idris_indent_where	cache-plug/vim-polyglot/indent/idris.vim	/^  let g:idris_indent_where = 6$/;"	v
g:idris_indent_where	cache-plug/vim-polyglot/indent/idris2.vim	/^  let g:idris_indent_where = 6$/;"	v
g:indentLine_color_gui	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:indentLine_color_gui = '#504945'$/;"	v
g:indentLine_color_gui	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:indentLine_color_gui = '#d5c4a1'$/;"	v
g:indentLine_color_gui	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:indentLine_color_gui = '#504945'$/;"	v
g:indentLine_color_gui	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:indentLine_color_gui = '#d5c4a1'$/;"	v
g:indentLine_color_gui	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:indentLine_color_gui = '#504945'$/;"	v
g:indentLine_color_gui	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:indentLine_color_gui = '#d5c4a1'$/;"	v
g:indentLine_color_term	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:indentLine_color_term = 239$/;"	v
g:indentLine_color_term	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:indentLine_color_term = 187$/;"	v
g:indentLine_color_term	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:indentLine_color_term = 239$/;"	v
g:indentLine_color_term	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:indentLine_color_term = 187$/;"	v
g:indentLine_color_term	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:indentLine_color_term = 239$/;"	v
g:indentLine_color_term	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:indentLine_color_term = 180$/;"	v
g:io_fugitive	cache-plug/vim-fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:j_indent_definitions	cache-plug/vim-polyglot/indent/j.vim	/^  let g:j_indent_definitions = 0$/;"	v
g:jedi#popup_on_dot	plugin/python.vim	/^let g:jedi#popup_on_dot = 0$/;"	v
g:jsonnet_command	cache-plug/vim-polyglot/autoload/jsonnet.vim	/^  let g:jsonnet_command = "jsonnet"$/;"	v
g:jsonnet_fmt_command	cache-plug/vim-polyglot/autoload/jsonnet.vim	/^  let g:jsonnet_fmt_command = "jsonnetfmt"$/;"	v
g:jsonnet_fmt_fail_silently	cache-plug/vim-polyglot/autoload/jsonnet.vim	/^  let g:jsonnet_fmt_fail_silently = 1$/;"	v
g:jsonnet_fmt_options	cache-plug/vim-polyglot/autoload/jsonnet.vim	/^  let g:jsonnet_fmt_options = ''$/;"	v
g:jst_default_subtype	cache-plug/vim-polyglot/syntax/jst.vim	/^  let g:jst_default_subtype = "html"$/;"	v
g:julia#doc#juliapath	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^    let g:julia#doc#juliapath = 'julia'$/;"	v
g:julia#doc#juliapath	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^    let g:julia#doc#juliapath = get(pathlist, -1, 'julia')$/;"	v
g:julia#doc#juliapath	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^  let g:julia#doc#juliapath = get(g:, 'julia#doc#juliapath', 'julia')$/;"	v
g:ledger_main	cache-plug/vim-polyglot/compiler/ledger.vim	/^  let g:ledger_main = '%'$/;"	v
g:lightline	cache-plug/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'custom' }, 'component_raw': { 'custom': 1 } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': 'raw' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom', 'modified': 'Modified' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'custom' ] }, 'tab_component_function': { 'custom': 'Custom' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1' }, 'component_function': { 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'component_function': { 'custom3': 'Custom3' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'component_expand': { 'custom3': 'Custom3' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '0' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '0', 'custom2': '1', 'custom3': '1' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '1', 'custom2': '0', 'custom3': '0' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '1', 'custom2': '0', 'custom3': '1' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom1': '1', 'custom2': '1', 'custom3': '1' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom2': '1', 'custom3': '1' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3': 'Custom3' }, 'component_function_visible_condition': { 'custom3': '1' } }$/;"	v
g:lightline	cache-plug/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom2': 'Custom2' } }$/;"	v
g:lightline	plugin/lightline.vim	/^let g:lightline = {$/;"	v
g:lightline#colorscheme#16color#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let g:lightline#colorscheme#16color#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#OldHope#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let g:lightline#colorscheme#OldHope#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#PaperColor#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_dark#palette$/;"	v
g:lightline#colorscheme#PaperColor#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_light#palette$/;"	v
g:lightline#colorscheme#PaperColor_dark#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let g:lightline#colorscheme#PaperColor_dark#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#PaperColor_light#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let g:lightline#colorscheme#PaperColor_light#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let g:lightline#colorscheme#Tomorrow#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let g:lightline#colorscheme#Tomorrow_Night#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Blue#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Blue#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Bright#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Bright#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Eighties#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Eighties#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#ayu_dark#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let g:lightline#colorscheme#ayu_dark#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#ayu_light#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let g:lightline#colorscheme#ayu_light#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#ayu_mirage#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let g:lightline#colorscheme#ayu_mirage#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#darcula#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let g:lightline#colorscheme#darcula#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#default#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/default.vim	/^let g:lightline#colorscheme#default#palette = g:lightline#colorscheme#powerline#palette$/;"	v
g:lightline#colorscheme#deus#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let g:lightline#colorscheme#deus#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#jellybeans#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let g:lightline#colorscheme#jellybeans#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#landscape#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let g:lightline#colorscheme#landscape#palette = s:p$/;"	v
g:lightline#colorscheme#materia#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let g:lightline#colorscheme#materia#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#material#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let g:lightline#colorscheme#material#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#molokai#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let g:lightline#colorscheme#molokai#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#nord#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let g:lightline#colorscheme#nord#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#one#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let g:lightline#colorscheme#one#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#powerline#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let g:lightline#colorscheme#powerline#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#powerlineish#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let g:lightline#colorscheme#powerlineish#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#selenized_black#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let g:lightline#colorscheme#selenized_black#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#selenized_dark#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let g:lightline#colorscheme#selenized_dark#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#selenized_light#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let g:lightline#colorscheme#selenized_light#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#selenized_white#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let g:lightline#colorscheme#selenized_white#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#seoul256#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let g:lightline#colorscheme#seoul256#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#simpleblack#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let g:lightline#colorscheme#simpleblack#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#solarized#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let g:lightline#colorscheme#solarized#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#srcery_drk#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let g:lightline#colorscheme#srcery_drk#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#wombat#palette	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let g:lightline#colorscheme#wombat#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:liquid_default_subtype	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
g:liquid_default_subtype	cache-plug/vim-polyglot/syntax/liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
g:liquid_highlight_types	cache-plug/vim-polyglot/syntax/liquid.vim	/^  let g:liquid_highlight_types = []$/;"	v
g:llvm_ext_lli_executable	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^let g:llvm_ext_lli_executable = get(g:, 'llvm_ext_lli_executable', 'lli')$/;"	v
g:llvm_ext_no_mapping	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^let g:llvm_ext_no_mapping = get(g:, 'llvm_ext_no_mapping', 0)$/;"	v
g:loaded_autoload_fsharp	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let g:loaded_autoload_fsharp = 1$/;"	v
g:loaded_delimitMate	cache-plug/delimitMate/plugin/delimitMate.vim	/^let g:loaded_delimitMate = 1$/;"	v
g:loaded_fugitive	cache-plug/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_fzf	cache-plug/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_fzf_vim	cache-plug/fzf.vim/plugin/fzf.vim	/^let g:loaded_fzf_vim = 1$/;"	v
g:loaded_gitgutter	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let g:loaded_gitgutter = 1$/;"	v
g:loaded_gutentags	cache-plug/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_lightline	cache-plug/lightline.vim/plugin/lightline.vim	/^let g:loaded_lightline = 1$/;"	v
g:loaded_prettier	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:loaded_prettier = 1$/;"	v
g:loaded_sleuth	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  let g:loaded_sleuth = 1$/;"	v
g:main_syntax	cache-plug/vim-polyglot/syntax/dart.vim	/^  let g:main_syntax = 'dart'$/;"	v
g:main_syntax	cache-plug/vim-polyglot/syntax/gohtmltmpl.vim	/^  let g:main_syntax = 'html'$/;"	v
g:markdown_fenced_languages	cache-plug/vim-polyglot/syntax/rmd.vim	/^    let g:markdown_fenced_languages = []$/;"	v
g:mp_close_tag	cache-plug/vim-polyglot/indent/mp.vim	/^let g:mp_close_tag = ''$/;"	v
g:mp_open_tag	cache-plug/vim-polyglot/indent/mp.vim	/^let g:mp_open_tag = ''$/;"	v
g:mp_statement	cache-plug/vim-polyglot/indent/mp.vim	/^let g:mp_statement = ''$/;"	v
g:mustache_operators	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  let g:mustache_operators = 1$/;"	v
g:neocomplcache_omni_patterns	cache-plug/vim-polyglot/autoload/nim.vim	/^  let g:neocomplcache_omni_patterns = {}$/;"	v
g:neocomplcache_omni_patterns	cache-plug/vim-polyglot/autoload/nim.vim	/^let g:neocomplcache_omni_patterns['nim'] = '[^. *\\t]\\.\\w*'$/;"	v
g:neocomplete#sources#omni#input_patterns	cache-plug/vim-polyglot/autoload/nim.vim	/^  let g:neocomplete#sources#omni#input_patterns = {}$/;"	v
g:neocomplete#sources#omni#input_patterns	cache-plug/vim-polyglot/autoload/nim.vim	/^let g:neocomplete#sources#omni#input_patterns['nim'] = '[^. *\\t]\\.\\w*'$/;"	v
g:netrw_localrmdir	init.vim	/^let g:netrw_localrmdir='rm -r'$/;"	v
g:niji_dark_colours	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_dark_colours	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:nim_caas_enabled	cache-plug/vim-polyglot/autoload/nim.vim	/^  let g:nim_caas_enabled = 0$/;"	v
g:nim_completion_callbacks	cache-plug/vim-polyglot/autoload/nim.vim	/^let g:nim_completion_callbacks = {}$/;"	v
g:nim_log	cache-plug/vim-polyglot/autoload/nim.vim	/^let g:nim_log = []$/;"	v
g:nim_symbol_types	cache-plug/vim-polyglot/autoload/nim.vim	/^let g:nim_symbol_types = {$/;"	v
g:omni_syntax_group_exclude_lifelines	cache-plug/vim-polyglot/syntax/lifelines.vim	/^		let g:omni_syntax_group_exclude_lifelines = 'lifelinesError'$/;"	v
g:omni_syntax_group_exclude_mf	cache-plug/vim-polyglot/ftplugin/mf.vim	/^let g:omni_syntax_group_exclude_mf = 'mfTodoComment'$/;"	v
g:omni_syntax_group_exclude_mp	cache-plug/vim-polyglot/ftplugin/mp.vim	/^let g:omni_syntax_group_exclude_mp = 'mfTodoComment'$/;"	v
g:omni_syntax_group_include_mf	cache-plug/vim-polyglot/ftplugin/mf.vim	/^let g:omni_syntax_group_include_mf = 'mf\\w\\+'$/;"	v
g:omni_syntax_group_include_mp	cache-plug/vim-polyglot/ftplugin/mp.vim	/^let g:omni_syntax_group_include_mp = 'mf\\w\\+,mp\\w\\+'$/;"	v
g:ormolu_command	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^  let g:ormolu_command = "ormolu"$/;"	v
g:ormolu_disable	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^  let g:ormolu_disable = 0$/;"	v
g:ormolu_options	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^  let g:ormolu_options = [""]$/;"	v
g:ormolu_suppress_stderr	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^  let g:ormolu_suppress_stderr = 0$/;"	v
g:other_mf_macros	cache-plug/vim-polyglot/syntax/mp.vim	/^  let g:other_mf_macros = s:other_mf_macros$/;"	v
g:other_mf_macros	cache-plug/vim-polyglot/syntax/mp.vim	/^let g:other_mf_macros = 0 " cmbase.mf, logo.mf, ... neither$/;"	v
g:pandoc#syntax#codeblocks#embeds#langs	cache-plug/vim-polyglot/syntax/rmd.vim	/^let g:pandoc#syntax#codeblocks#embeds#langs = get(g:, 'pandoc#syntax#codeblocks#embeds#langs', ['r'])$/;"	v
g:php_syntax_extensions_disabled	cache-plug/vim-polyglot/syntax/php.vim	/^    let g:php_syntax_extensions_disabled = []$/;"	v
g:php_syntax_extensions_enabled	cache-plug/vim-polyglot/syntax/php.vim	/^    let g:php_syntax_extensions_enabled = ["bcmath", "bz2", "core", "curl", "date", "dom", "ereg", "gd", "gettext", "hash", "iconv", "json", "libxml", "mbstring", "mcrypt", "mhash", "mysql", "mysqli", "openssl", "pcre", "pdo", "pgsql", "phar", "reflection", "session", "simplexml", "soap", "sockets", "spl", "sqlite3", "standard", "tokenizer", "wddx", "xml", "xmlreader", "xmlwriter", "zip", "zlib"]$/;"	v
g:php_version_id	cache-plug/vim-polyglot/syntax/php.vim	/^  let g:php_version_id = 70300$/;"	v
g:plain_mf_macros	cache-plug/vim-polyglot/syntax/mp.vim	/^  let g:plain_mf_macros = s:plain_mf_macros$/;"	v
g:plain_mf_macros	cache-plug/vim-polyglot/syntax/mp.vim	/^let g:plain_mf_macros = 0 " plain.mf has no special meaning for MetaPost$/;"	v
g:plain_mf_modes	cache-plug/vim-polyglot/syntax/mp.vim	/^  let g:plain_mf_modes = s:plain_mf_modes$/;"	v
g:plain_mf_modes	cache-plug/vim-polyglot/syntax/mp.vim	/^let g:plain_mf_modes  = 0 " No METAFONT modes$/;"	v
g:plantuml_executable_script	cache-plug/vim-polyglot/ftplugin/plantuml.vim	/^  let g:plantuml_executable_script='plantuml'$/;"	v
g:polyglot_disabled_not_set	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  let g:polyglot_disabled_not_set = 1$/;"	v
g:polyglot_is_disabled	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^      let g:polyglot_is_disabled[pkg] = 1$/;"	v
g:polyglot_is_disabled	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^let g:polyglot_is_disabled = {}$/;"	v
g:prettier#autoformat	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#autoformat = get(g:, 'prettier#autoformat', 0)$/;"	v
g:prettier#autoformat_config_files	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#autoformat_config_files = get(g:, 'prettier#autoformat_config_files', [$/;"	v
g:prettier#autoformat_config_present	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#autoformat_config_present = get(g:, 'prettier#autoformat_config_present', 0)$/;"	v
g:prettier#autoformat_require_pragma	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#autoformat_require_pragma = get(g:, 'prettier#autoformat_require_pragma', 1)$/;"	v
g:prettier#config#arrow_parens	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#arrow_parens = get(g:,'prettier#config#arrow_parens', 'always')$/;"	v
g:prettier#config#bracket_spacing	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#bracket_spacing = get(g:,'prettier#config#bracket_spacing', 'true')$/;"	v
g:prettier#config#config_precedence	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#config_precedence = get(g:, 'prettier#config#config_precedence', 'file-override')$/;"	v
g:prettier#config#end_of_line	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#end_of_line = get(g:, 'prettier#config#end_of_line', 'lf')$/;"	v
g:prettier#config#html_whitespace_sensitivity	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#html_whitespace_sensitivity = get(g:, 'prettier#config#html_whitespace_sensitivity', 'css')$/;"	v
g:prettier#config#jsx_bracket_same_line	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#jsx_bracket_same_line = get(g:,'prettier#config#jsx_bracket_same_line', 'false')$/;"	v
g:prettier#config#parser	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#parser = get(g:,'prettier#config#parser', '')$/;"	v
g:prettier#config#print_width	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#print_width = get(g:, 'prettier#config#print_width', 'auto')$/;"	v
g:prettier#config#prose_wrap	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#prose_wrap = get(g:, 'prettier#config#prose_wrap', 'preserve')$/;"	v
g:prettier#config#require_pragma	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#require_pragma=  get(g:, 'prettier#config#require_pragma', 'false')$/;"	v
g:prettier#config#semi	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#semi = get(g:,'prettier#config#semi', 'true')$/;"	v
g:prettier#config#single_quote	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#single_quote = get(g:,'prettier#config#single_quote', 'false')$/;"	v
g:prettier#config#tab_width	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#tab_width = get(g:,'prettier#config#tab_width', 'auto')$/;"	v
g:prettier#config#trailing_comma	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#trailing_comma = get(g:,'prettier#config#trailing_comma', 'es5')$/;"	v
g:prettier#config#use_tabs	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#config#use_tabs = get(g:,'prettier#config#use_tabs', 'auto')$/;"	v
g:prettier#exec_cmd_async	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#exec_cmd_async = get(g:, 'prettier#exec_cmd_async', 0)$/;"	v
g:prettier#exec_cmd_path	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#exec_cmd_path = get(g:, 'prettier#exec_cmd_path', 0)$/;"	v
g:prettier#partial_format	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#partial_format = get(g:, 'prettier#partial_format', 0)$/;"	v
g:prettier#preset#config	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#preset#config = get(g:,'prettier#preset#config', 'default')$/;"	v
g:prettier#quickfix_auto_focus	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#quickfix_auto_focus = get(g:, 'prettier#quickfix_auto_focus', 1)$/;"	v
g:prettier#quickfix_enabled	cache-plug/vim-prettier/plugin/prettier.vim	/^let g:prettier#quickfix_enabled = get(g:, 'prettier#quickfix_enabled', 1)$/;"	v
g:ps1_efm_show_error_categories	cache-plug/vim-polyglot/compiler/powershell.vim	/^let g:ps1_efm_show_error_categories = get(g:, 'ps1_efm_show_error_categories', 0)$/;"	v
g:ps1_makeprg_cmd	cache-plug/vim-polyglot/compiler/powershell.vim	/^    let g:ps1_makeprg_cmd = ''$/;"	v
g:ps1_makeprg_cmd	cache-plug/vim-polyglot/compiler/powershell.vim	/^    let g:ps1_makeprg_cmd = 'powershell.exe'$/;"	v
g:ps1_makeprg_cmd	cache-plug/vim-polyglot/compiler/powershell.vim	/^    let g:ps1_makeprg_cmd = 'pwsh'$/;"	v
g:ps1_makeprg_cmd	cache-plug/vim-polyglot/compiler/powershell.vim	/^    let g:ps1_makeprg_cmd = 'pwsh.exe'$/;"	v
g:pug_self_closing_tags	cache-plug/vim-polyglot/indent/pug.vim	/^  let g:pug_self_closing_tags = 'meta|link|img|hr|br|input'$/;"	v
g:puppet_align_hashes	cache-plug/vim-polyglot/after/ftplugin/puppet.vim	/^    let g:puppet_align_hashes = 1$/;"	v
g:purescript_indent_case	cache-plug/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_case = 5$/;"	v
g:purescript_indent_do	cache-plug/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_do = 3$/;"	v
g:purescript_indent_dot	cache-plug/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_dot = 1$/;"	v
g:purescript_indent_if	cache-plug/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_if = 3$/;"	v
g:purescript_indent_in	cache-plug/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_in = 1$/;"	v
g:purescript_indent_let	cache-plug/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_let = 4$/;"	v
g:purescript_indent_where	cache-plug/vim-polyglot/indent/purescript.vim	/^  let g:purescript_indent_where = 6$/;"	v
g:python_pep8_indent_hang_closing	cache-plug/vim-polyglot/indent/cython.vim	/^    let g:python_pep8_indent_hang_closing = 0$/;"	v
g:python_pep8_indent_hang_closing	cache-plug/vim-polyglot/indent/python.vim	/^    let g:python_pep8_indent_hang_closing = 0$/;"	v
g:python_pep8_indent_multiline_string	cache-plug/vim-polyglot/indent/cython.vim	/^    let g:python_pep8_indent_multiline_string = 0$/;"	v
g:python_pep8_indent_multiline_string	cache-plug/vim-polyglot/indent/python.vim	/^    let g:python_pep8_indent_multiline_string = 0$/;"	v
g:python_pep8_indent_searchpair_timeout	cache-plug/vim-polyglot/indent/cython.vim	/^        let g:python_pep8_indent_searchpair_timeout = 0$/;"	v
g:python_pep8_indent_searchpair_timeout	cache-plug/vim-polyglot/indent/cython.vim	/^        let g:python_pep8_indent_searchpair_timeout = 150$/;"	v
g:python_pep8_indent_searchpair_timeout	cache-plug/vim-polyglot/indent/python.vim	/^        let g:python_pep8_indent_searchpair_timeout = 0$/;"	v
g:python_pep8_indent_searchpair_timeout	cache-plug/vim-polyglot/indent/python.vim	/^        let g:python_pep8_indent_searchpair_timeout = 150$/;"	v
g:qf_disable_statusline	cache-plug/lightline.vim/plugin/lightline.vim	/^let g:qf_disable_statusline = 1$/;"	v
g:ragel_default_subtype	cache-plug/vim-polyglot/syntax/ragel.vim	/^  let g:ragel_default_subtype = 'c'$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_ctermfgs	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_ctermfgs	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_guifgs	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rainbow_guifgs	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rbpt_colorpairs	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^        let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^        let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^        let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rbpt_colorpairs	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:rbpt_colorpairs = [['blue', '#458588'], ['magenta', '#b16286'],$/;"	v
g:rmd_fenced_languages	cache-plug/vim-polyglot/syntax/rmd.vim	/^    let g:rmd_fenced_languages = deepcopy(g:markdown_fenced_languages)$/;"	v
g:rmd_fenced_languages	cache-plug/vim-polyglot/syntax/rmd.vim	/^  let g:rmd_fenced_languages = ['r']$/;"	v
g:rmd_syn_hl_chunk	cache-plug/vim-polyglot/syntax/rmd.vim	/^let g:rmd_syn_hl_chunk = get(g:, 'g:rmd_syn_hl_chunk', 0)$/;"	v
g:rmd_syn_hl_citations	cache-plug/vim-polyglot/syntax/rmd.vim	/^let g:rmd_syn_hl_citations = get(g:, 'rmd_syn_hl_citations', 1)$/;"	v
g:rmd_syn_hl_yaml	cache-plug/vim-polyglot/syntax/rmd.vim	/^let g:rmd_syn_hl_yaml = get(g:, 'rmd_syn_hl_yaml', 1)$/;"	v
g:rst_fold_enabled	cache-plug/vim-polyglot/ftplugin/rst.vim	/^  let g:rst_fold_enabled = 0$/;"	v
g:rst_syntax_code_list	cache-plug/vim-polyglot/syntax/rst.vim	/^        let g:rst_syntax_code_list[s:elem] = [s:elem]$/;"	v
g:rst_syntax_code_list	cache-plug/vim-polyglot/syntax/rst.vim	/^    let g:rst_syntax_code_list = {$/;"	v
g:rst_syntax_code_list	cache-plug/vim-polyglot/syntax/rst.vim	/^    let g:rst_syntax_code_list = {}$/;"	v
g:ruby_default_path	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^      let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# "." ? "" : v:val')$/;"	v
g:ruby_default_path	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^      let g:ruby_default_path = s:query_path($HOME)$/;"	v
g:ruby_indent_access_modifier_style	cache-plug/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_access_modifier_style = 'normal'$/;"	v
g:ruby_indent_assignment_style	cache-plug/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_assignment_style = 'hanging'$/;"	v
g:ruby_indent_block_style	cache-plug/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_block_style = 'do'$/;"	v
g:ruby_indent_hanging_elements	cache-plug/vim-polyglot/indent/ruby.vim	/^  let g:ruby_indent_hanging_elements = 1$/;"	v
g:ruby_version_paths	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^      let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))$/;"	v
g:ruby_version_paths	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let g:ruby_version_paths = {}$/;"	v
g:rubycomplete_buffer_loading	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_classes_in_global	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_include_object	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
g:rubycomplete_rails	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:rustfmt_autosave	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_autosave = 0$/;"	v
g:rustfmt_autosave	plugin/rust.vim	/^let g:rustfmt_autosave = 1$/;"	v
g:rustfmt_command	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_command = "rustfmt"$/;"	v
g:rustfmt_emit_files	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_emit_files = s:rustfmt_version >= "0.8.2"$/;"	v
g:rustfmt_fail_silently	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_fail_silently = 0$/;"	v
g:rustfmt_file_lines	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_file_lines = s:rustfmt_help =~# "--file-lines JSON"$/;"	v
g:rustfmt_options	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^    let g:rustfmt_options = ""$/;"	v
g:smt2_solver_command	cache-plug/vim-polyglot/ftplugin/smt2.vim	/^        let g:smt2_solver_command = "boolector"$/;"	v
g:smt2_solver_command	cache-plug/vim-polyglot/ftplugin/smt2.vim	/^        let g:smt2_solver_command = "z3"$/;"	v
g:smt2_solver_version_switch	cache-plug/vim-polyglot/ftplugin/smt2.vim	/^    let g:smt2_solver_version_switch = "--version"$/;"	v
g:svelte_indent_script	cache-plug/vim-polyglot/indent/svelte.vim	/^  let g:svelte_indent_script = 1$/;"	v
g:svelte_indent_style	cache-plug/vim-polyglot/indent/svelte.vim	/^  let g:svelte_indent_style = 1$/;"	v
g:syntastic_nim_checkers	cache-plug/vim-polyglot/compiler/nim.vim	/^let g:syntastic_nim_checkers = ['nim']$/;"	v
g:tagbar_type_puppet	cache-plug/vim-polyglot/ftplugin/puppet_tagbar.vim	/^    let g:tagbar_type_puppet.kind2scope = {$/;"	v
g:tagbar_type_puppet	cache-plug/vim-polyglot/ftplugin/puppet_tagbar.vim	/^    let g:tagbar_type_puppet.scope2kind = {$/;"	v
g:tagbar_type_puppet	cache-plug/vim-polyglot/ftplugin/puppet_tagbar.vim	/^    let g:tagbar_type_puppet.sro = '__'$/;"	v
g:tagbar_type_puppet	cache-plug/vim-polyglot/ftplugin/puppet_tagbar.vim	/^let g:tagbar_type_puppet = {$/;"	v
g:tagbar_type_puppet	cache-plug/vim-polyglot/ftplugin/puppet_tagbar.vim	/^let g:tagbar_type_puppet.deffile = puppet#ctags#OptionFile()$/;"	v
g:tagbar_type_rust	cache-plug/vim-polyglot/ftplugin/rust/tagbar.vim	/^    let g:tagbar_type_rust = {$/;"	v
g:tagbar_type_rust	cache-plug/vim-polyglot/ftplugin/rust/tagbar.vim	/^    let g:tagbar_type_rust.deffile = expand('<sfile>:p:h:h:h') . '\/ctags\/rust.ctags'$/;"	v
g:tagbar_type_scala	cache-plug/vim-polyglot/ftplugin/scala/tagbar.vim	/^  let g:tagbar_type_scala.deffile = expand('<sfile>:p:h:h:h') . '\/ctags\/scala.ctags'$/;"	v
g:tagbar_type_scala	cache-plug/vim-polyglot/ftplugin/scala/tagbar.vim	/^let g:tagbar_type_scala = {$/;"	v
g:tagbar_type_typescript	cache-plug/vim-polyglot/ftplugin/typescript.vim	/^  let g:tagbar_type_typescript.deffile = expand('<sfile>:p:h:h') . '\/ctags\/typescript.ctags'$/;"	v
g:tagbar_type_typescript	cache-plug/vim-polyglot/ftplugin/typescript.vim	/^let g:tagbar_type_typescript = {$/;"	v
g:terminal_ansi_colors	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_ansi_colors = ['#282828', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^  let g:terminal_ansi_colors = ['#fbf1c7', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_ansi_colors = ['#1d2021', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^  let g:terminal_ansi_colors = ['#f9f5d7', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_ansi_colors = ['#32302f', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_ansi_colors	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^  let g:terminal_ansi_colors = ['#f2e5bc', '#cc241d', '#98971a', '#d79921',$/;"	v
g:terminal_color_0	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_0 = '#282828'$/;"	v
g:terminal_color_0	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_0 = '#fbf1c7'$/;"	v
g:terminal_color_0	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_0 = '#1d2021'$/;"	v
g:terminal_color_0	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_0 = '#f9f5d7'$/;"	v
g:terminal_color_0	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_0 = '#32302f'$/;"	v
g:terminal_color_0	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_0 = '#f2e5bc'$/;"	v
g:terminal_color_1	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_1	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_1 = '#cc241d'$/;"	v
g:terminal_color_10	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_10 = '#b8bb26'$/;"	v
g:terminal_color_10	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_10 = '#79740e'$/;"	v
g:terminal_color_10	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_10 = '#b8bb26'$/;"	v
g:terminal_color_10	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_10 = '#79740e'$/;"	v
g:terminal_color_10	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_10 = '#b8bb26'$/;"	v
g:terminal_color_10	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_10 = '#79740e'$/;"	v
g:terminal_color_11	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_11 = '#fabd2f'$/;"	v
g:terminal_color_11	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_11 = '#b57614'$/;"	v
g:terminal_color_11	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_11 = '#fabd2f'$/;"	v
g:terminal_color_11	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_11 = '#b57614'$/;"	v
g:terminal_color_11	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_11 = '#fabd2f'$/;"	v
g:terminal_color_11	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_11 = '#b57614'$/;"	v
g:terminal_color_12	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_12 = '#83a598'$/;"	v
g:terminal_color_12	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_12 = '#076678'$/;"	v
g:terminal_color_12	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_12 = '#83a598'$/;"	v
g:terminal_color_12	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_12 = '#076678'$/;"	v
g:terminal_color_12	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_12 = '#83a598'$/;"	v
g:terminal_color_12	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_12 = '#076678'$/;"	v
g:terminal_color_13	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_13 = '#d3869b'$/;"	v
g:terminal_color_13	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_13 = '#8f3f71'$/;"	v
g:terminal_color_13	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_13 = '#d3869b'$/;"	v
g:terminal_color_13	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_13 = '#8f3f71'$/;"	v
g:terminal_color_13	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_13 = '#d3869b'$/;"	v
g:terminal_color_13	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_13 = '#8f3f71'$/;"	v
g:terminal_color_14	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_14 = '#8ec07c'$/;"	v
g:terminal_color_14	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_14 = '#427b58'$/;"	v
g:terminal_color_14	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_14 = '#8ec07c'$/;"	v
g:terminal_color_14	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_14 = '#427b58'$/;"	v
g:terminal_color_14	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_14 = '#8ec07c'$/;"	v
g:terminal_color_14	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_14 = '#427b58'$/;"	v
g:terminal_color_15	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_15 = '#ebdbb2'$/;"	v
g:terminal_color_15	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_15 = '#3c3836'$/;"	v
g:terminal_color_15	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_15 = '#ebdbb2'$/;"	v
g:terminal_color_15	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_15 = '#3c3836'$/;"	v
g:terminal_color_15	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_15 = '#ebdbb2'$/;"	v
g:terminal_color_15	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_15 = '#3c3836'$/;"	v
g:terminal_color_2	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_2	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_2 = '#98971a'$/;"	v
g:terminal_color_3	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_3	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_3 = '#d79921'$/;"	v
g:terminal_color_4	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_4	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_4 = '#458588'$/;"	v
g:terminal_color_5	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_5	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_5 = '#b16286'$/;"	v
g:terminal_color_6	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_6	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_6 = '#689d6a'$/;"	v
g:terminal_color_7	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_7 = '#a89984'$/;"	v
g:terminal_color_7	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_7 = '#7c6f64'$/;"	v
g:terminal_color_7	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_7 = '#a89984'$/;"	v
g:terminal_color_7	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_7 = '#7c6f64'$/;"	v
g:terminal_color_7	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_7 = '#a89984'$/;"	v
g:terminal_color_7	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_7 = '#7c6f64'$/;"	v
g:terminal_color_8	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_8	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_8 = '#928374'$/;"	v
g:terminal_color_9	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:terminal_color_9 = '#fb4934'$/;"	v
g:terminal_color_9	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:terminal_color_9 = '#9d0006'$/;"	v
g:terminal_color_9	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:terminal_color_9 = '#fb4934'$/;"	v
g:terminal_color_9	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:terminal_color_9 = '#9d0006'$/;"	v
g:terminal_color_9	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:terminal_color_9 = '#fb4934'$/;"	v
g:terminal_color_9	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:terminal_color_9 = '#9d0006'$/;"	v
g:terraform_binary_path	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^  let g:terraform_binary_path='terraform'$/;"	v
g:testname	cache-plug/vim-gitgutter/test/runner.vim	/^let g:testname = expand('%')$/;"	v
g:tex_indent_brace	cache-plug/vim-polyglot/indent/tex.vim	/^    let g:tex_indent_brace = 1$/;"	v
g:tex_indent_items	cache-plug/vim-polyglot/indent/tex.vim	/^    let g:tex_indent_items = 1$/;"	v
g:tex_itemize_env	cache-plug/vim-polyglot/indent/tex.vim	/^        let g:tex_itemize_env = 'itemize\\|description\\|enumerate\\|thebibliography'$/;"	v
g:tex_items	cache-plug/vim-polyglot/indent/tex.vim	/^        let g:tex_items = '\\\\bibitem\\|\\\\item'$/;"	v
g:tex_items	cache-plug/vim-polyglot/indent/tex.vim	/^    let g:tex_items = ''$/;"	v
g:tex_items	cache-plug/vim-polyglot/indent/tex.vim	/^let g:tex_items = '^\\s*' . substitute(g:tex_items, '^\\(\\^\\\\s\\*\\)*', '', '')$/;"	v
g:tex_max_scan_line	cache-plug/vim-polyglot/indent/tex.vim	/^    let g:tex_max_scan_line = 60$/;"	v
g:tex_noindent_env	cache-plug/vim-polyglot/indent/tex.vim	/^    let g:tex_noindent_env = 'document\\|verbatim\\|lstlisting'$/;"	v
g:typescript_compiler_binary	cache-plug/vim-polyglot/compiler/typescript.vim	/^  let g:typescript_compiler_binary = 'tsc'$/;"	v
g:typescript_compiler_options	cache-plug/vim-polyglot/compiler/typescript.vim	/^    let g:typescript_compiler_options = ''$/;"	v
g:typescript_compiler_options	cache-plug/vim-polyglot/compiler/typescript.vim	/^    let g:typescript_compiler_options = g:syntastic_typescript_tsc_args$/;"	v
g:v_highlight_array_whitespace_error	cache-plug/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_array_whitespace_error = 1$/;"	v
g:v_highlight_chan_whitespace_error	cache-plug/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_chan_whitespace_error = 1$/;"	v
g:v_highlight_fields	cache-plug/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_fields = 1$/;"	v
g:v_highlight_function_calls	cache-plug/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_function_calls = 1$/;"	v
g:v_highlight_space_tab_error	cache-plug/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_space_tab_error = 1$/;"	v
g:v_highlight_trailing_whitespace_error	cache-plug/vim-polyglot/syntax/vlang.vim	/^  let g:v_highlight_trailing_whitespace_error = 1$/;"	v
g:vhdl_indent_genportmap	cache-plug/vim-polyglot/indent/vhdl.vim	/^  let g:vhdl_indent_genportmap = 1$/;"	v
g:vhdl_indent_rhsassign	cache-plug/vim-polyglot/indent/vhdl.vim	/^  let g:vhdl_indent_rhsassign = 1$/;"	v
g:vim_json_syntax_conceal	cache-plug/vim-polyglot/ftplugin/json.vim	/^	let g:vim_json_syntax_conceal = 1$/;"	v
g:vim_json_syntax_concealcursor	cache-plug/vim-polyglot/ftplugin/json.vim	/^	let g:vim_json_syntax_concealcursor = ""$/;"	v
g:vim_json_warnings	cache-plug/vim-polyglot/ftplugin/json.vim	/^	let g:vim_json_warnings = 1$/;"	v
g:vimshell_escape_colors	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^      let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^    let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^      let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^    let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^      let g:vimshell_escape_colors = [$/;"	v
g:vimshell_escape_colors	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^    let g:vimshell_escape_colors = [$/;"	v
g:vue_pre_processors	cache-plug/vim-polyglot/syntax/vue.vim	/^  let g:vue_pre_processors = []$/;"	v
g:xmldata_aria	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let g:xmldata_aria = {$/;"	v
g:xmldata_html5	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let g:xmldata_html5 = {$/;"	v
g:xmldata_xsd	cache-plug/vim-polyglot/autoload/xml/xsd.vim	/^let g:xmldata_xsd = {$/;"	v
g<C-]>	cache-plug/vim-polyglot/ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#Jump_Tag ('','stjump')<cr>$/;"	m
g<C-]>	cache-plug/vim-polyglot/ftplugin/ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#List_Tag ()<cr>$/;"	m
gB	plugin/bepo.vim	/^noremap gB :exe "silent! tabfirst"<CR>$/;"	m
gO	cache-plug/vim-polyglot/ftplugin/help.vim	/^  nnoremap <silent><buffer> gO :call <sid>show_toc()<cr>$/;"	m
gb	plugin/bepo.vim	/^noremap gb gT$/;"	m
gc	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gc  <Plug>(crystal-show-context)$/;"	m
gd	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gd  <Plug>(crystal-jump-to-definition)$/;"	m
gd	plugin/coc.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gd	plugin/scala.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gdb_minlines	cache-plug/vim-polyglot/syntax/gdb.vim	/^  let gdb_minlines = 10$/;"	v
genFunctions	cache-plug/vim-polyglot/syntax/neomuttrc.vim	/^function! s:genFunctions(functions)$/;"	f
gen_filter_keys	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:gen_filter_keys(line) abort$/;"	f
generate_fallback	cache-plug/vim-polyglot/scripts/build	/^def generate_fallback$/;"	f	class:rules_to_code.rule_to_code.detect_filetypes_str.detect_filetypes.show_warnings
generate_ftdetect	cache-plug/vim-polyglot/scripts/build	/^def generate_ftdetect(packages, heuristics)$/;"	f	class:rules_to_code.rule_to_code
generate_packages_entries	cache-plug/vim-polyglot/scripts/import_vim	/^def generate_packages_entries(filetypes, comments)$/;"	f
generate_plugins	cache-plug/vim-polyglot/scripts/build	/^def generate_plugins(packages)$/;"	f	class:rules_to_code.rule_to_code.detect_filetypes_str.detect_filetypes
generate_suffix_groups	cache-plug/vim-polyglot/syntax/hostconf.vim	/^function s:generate_suffix_groups(list_of_order_of_orders, context, trailing_context)$/;"	f
generate_tests	cache-plug/vim-polyglot/scripts/build	/^def generate_tests(packages)$/;"	f	class:rules_to_code.rule_to_code
generate_tests	cache-plug/vim-polyglot/scripts/import_vim	/^def generate_tests(autocommands)$/;"	f
generate_wildignore_options	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
get	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:get(...) "{{{$/;"	f
get	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:get(name, default) "{{{$/;"	f
getAuthor	cache-plug/vim-polyglot/ftplugin/debchangelog.vim	/^function! s:getAuthor(zonestart, zoneend)$/;"	f
getBytes	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() []byte {$/;"	f
getBytesInternal	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) []byte {$/;"	f
getCharPosition	cache-plug/vim-prettier/autoload/prettier/utils/buffer.vim	/^function! s:getCharPosition(line, col) abort$/;"	f
getEnv	cache-plug/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f
getField	cache-plug/vim-polyglot/ftplugin/debcontrol.vim	/^function! s:getField(f, lnum)$/;"	f
getHLStack	cache-plug/vim-polyglot/indent/haskell.vim	/^function! s:getHLStack(line, col)$/;"	f
getIncIndent	cache-plug/vim-polyglot/indent/plantuml.vim	/^function! s:getIncIndent() abort$/;"	f
getNesting	cache-plug/vim-polyglot/indent/haskell.vim	/^function! s:getNesting(hlstack)$/;"	f
get_256color	cache-plug/vim-polyglot/syntax/dircolors.vim	/^function! s:get_256color(colors) abort$/;"	f
get_background_colors	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_background_colors(group) abort$/;"	f
get_base_indent	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:get_base_indent(lnum, text)$/;"	f
get_char	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:get_char(...) "{{{$/;"	f
get_color	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
get_color	cache-plug/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
get_comments	cache-plug/vim-polyglot/scripts/import_vim	/^def get_comments$/;"	f
get_complete_buffer	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:get_complete_buffer()$/;"	f
get_ctags_executable	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
get_cursorline	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:get_cursorline(topline, lines, scrolloff, width, height) abort$/;"	f
get_echorizer	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:get_echorizer(str) abort$/;"	f
get_foreground_colors	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_colors(group) abort$/;"	f
get_foreground_fallback_colors	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_fallback_colors(type)$/;"	f
get_fsi_command	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:get_fsi_command()$/;"	f
get_func_identifiers	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:get_func_identifiers(line) abort$/;"	f
get_git_root	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
get_height	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! s:get_height(lines, config) abort$/;"	f
get_hi_str	cache-plug/vim-polyglot/syntax/dircolors.vim	/^function! s:get_hi_str(color, place) abort$/;"	f
get_hl	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_hl(group, what, mode) abort$/;"	f
get_identifiers	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:get_identifiers(line) abort$/;"	f
get_indentexpr	cache-plug/vim-polyglot/indent/vue.vim	/^function! s:get_indentexpr(language)$/;"	f
get_last_status	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:get_last_status() abort$/;"	f
get_line_trimmed	cache-plug/vim-polyglot/indent/reason.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
get_line_trimmed	cache-plug/vim-polyglot/indent/rust.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
get_options	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:get_options(winid) abort$/;"	f
get_paragraph_start	cache-plug/vim-polyglot/indent/rst.vim	/^function! s:get_paragraph_start()$/;"	f
get_save_pos	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:get_save_pos(...)$/;"	f
get_shiftwidth	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  func! s:get_shiftwidth(indents) abort$/;"	f
get_syn_name	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:get_syn_name() "{{{$/;"	f
get_tag	cache-plug/vim-polyglot/after/indent/html.vim	/^func! s:get_tag(tagname)$/;"	f
get_tag	cache-plug/vim-polyglot/indent/html.vim	/^func! s:get_tag(tagname)$/;"	f
get_topline	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:get_topline(topline, lines, forward, height, width) abort$/;"	f
get_transaction_extents	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:get_transaction_extents(lnum) abort$/;"	f
get_visual_selection	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:get_visual_selection()$/;"	f
get_win_opts	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:get_win_opts(winid) abort$/;"	f
getch	cache-plug/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f
getch	cache-plug/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f
getmapchars	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:getmapchars(function)$/;"	f
getpos	cache-plug/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
gg	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^  normal gg$/;"	m
gi	plugin/coc.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gi	plugin/scala.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
git_diff	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff(...)$/;"	f
git_diff_staged	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff_staged(...)$/;"	f
git_supports_command_line_config_override	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:git_supports_command_line_config_override() abort$/;"	f
git_version	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:git_version()$/;"	f
gitdiffcached	cache-plug/vim-polyglot/ftplugin/gitcommit.vim	/^function! s:gitdiffcached(bang,gitdir,...)$/;"	f
gitgutter	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^augroup gitgutter$/;"	a
gitgutter#all	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#all(force) abort$/;"	f
gitgutter#async#available	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#available()$/;"	f
gitgutter#async#execute	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#execute(cmd, bufnr, handler) abort$/;"	f
gitgutter#buffer_disable	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_disable() abort$/;"	f
gitgutter#buffer_enable	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_enable() abort$/;"	f
gitgutter#buffer_toggle	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_toggle() abort$/;"	f
gitgutter#debug#debug	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#debug()$/;"	f
gitgutter#debug#log	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#log(message, ...) abort$/;"	f
gitgutter#diff#handler	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#handler(bufnr, diff) abort$/;"	f
gitgutter#diff#hunk_diff	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#hunk_diff(bufnr, full_diff, ...)$/;"	f
gitgutter#diff#parse_diff	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_diff(diff) abort$/;"	f
gitgutter#diff#parse_hunk	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_hunk(line) abort$/;"	f
gitgutter#diff#process_hunks	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunks(bufnr, hunks) abort$/;"	f
gitgutter#diff#run_diff	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#run_diff(bufnr, from, preserve_full_diff) abort$/;"	f
gitgutter#diff_highlight#common_prefix	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_prefix(a, b)$/;"	f
gitgutter#diff_highlight#common_suffix	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#common_suffix(a, b, start)$/;"	f
gitgutter#diff_highlight#lcs	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#lcs(s1, s2)$/;"	f
gitgutter#diff_highlight#process	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! gitgutter#diff_highlight#process(hunk_body)$/;"	f
gitgutter#diff_highlight#split	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^  function! gitgutter#diff_highlight#split(str, delimiter)$/;"	f
gitgutter#disable	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#disable() abort$/;"	f
gitgutter#enable	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#enable() abort$/;"	f
gitgutter#fold#disable	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#disable()$/;"	f
gitgutter#fold#enable	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#enable()$/;"	f
gitgutter#fold#foldtext	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#foldtext()$/;"	f
gitgutter#fold#is_changed	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#is_changed()$/;"	f
gitgutter#fold#level	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#level(lnum)$/;"	f
gitgutter#fold#toggle	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#toggle()$/;"	f
gitgutter#highlight#define_highlights	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_highlights() abort$/;"	f
gitgutter#highlight#define_sign_text_highlights	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text_highlights() abort$/;"	f
gitgutter#highlight#define_signs	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_signs() abort$/;"	f
gitgutter#highlight#line_disable	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_disable() abort$/;"	f
gitgutter#highlight#line_enable	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_enable() abort$/;"	f
gitgutter#highlight#line_toggle	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_toggle() abort$/;"	f
gitgutter#highlight#linenr_disable	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_disable() abort$/;"	f
gitgutter#highlight#linenr_enable	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_enable() abort$/;"	f
gitgutter#highlight#linenr_toggle	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_toggle() abort$/;"	f
gitgutter#hunk#cursor_in_hunk	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#cursor_in_hunk(hunk) abort$/;"	f
gitgutter#hunk#fix_file_references	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^  function! gitgutter#hunk#fix_file_references(filepath, hunk_diff)$/;"	f
gitgutter#hunk#hunks	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#hunks(bufnr) abort$/;"	f
gitgutter#hunk#in_hunk	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#in_hunk(lnum)$/;"	f
gitgutter#hunk#increment_lines_added	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_added(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_modified	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_modified(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_removed	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_removed(bufnr, count) abort$/;"	f
gitgutter#hunk#next_hunk	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#next_hunk(count) abort$/;"	f
gitgutter#hunk#prev_hunk	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#prev_hunk(count) abort$/;"	f
gitgutter#hunk#preview	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#preview() abort$/;"	f
gitgutter#hunk#reset	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#reset(bufnr) abort$/;"	f
gitgutter#hunk#set_hunks	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#set_hunks(bufnr, hunks) abort$/;"	f
gitgutter#hunk#stage	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#stage(...) abort$/;"	f
gitgutter#hunk#summary	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#summary(bufnr) abort$/;"	f
gitgutter#hunk#text_object	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#text_object(inner) abort$/;"	f
gitgutter#hunk#undo	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#undo() abort$/;"	f
gitgutter#process_buffer	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#process_buffer(bufnr, force) abort$/;"	f
gitgutter#quickfix	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#quickfix()$/;"	f
gitgutter#setup_maps	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#setup_maps()$/;"	f
gitgutter#sign#clear_signs	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#clear_signs(bufnr) abort$/;"	f
gitgutter#sign#disable	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#disable() abort$/;"	f
gitgutter#sign#enable	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#enable() abort$/;"	f
gitgutter#sign#reset	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#reset()$/;"	f
gitgutter#sign#toggle	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#toggle() abort$/;"	f
gitgutter#sign#update_signs	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#update_signs(bufnr, modified_lines) abort$/;"	f
gitgutter#toggle	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#toggle() abort$/;"	f
gitgutter#utility#cd_cmd	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#cd_cmd(bufnr, cmd) abort$/;"	f
gitgutter#utility#extension	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#extension(bufnr) abort$/;"	f
gitgutter#utility#file	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file(bufnr)$/;"	f
gitgutter#utility#get_diff_base	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#get_diff_base(bufnr)$/;"	f
gitgutter#utility#getbufvar	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#getbufvar(buffer, varname, ...)$/;"	f
gitgutter#utility#has_repo_path	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#has_repo_path(bufnr)$/;"	f
gitgutter#utility#is_active	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_active(bufnr) abort$/;"	f
gitgutter#utility#repo_path	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#repo_path(bufnr, shellesc) abort$/;"	f
gitgutter#utility#set_repo_path	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#set_repo_path(bufnr, continuation) abort$/;"	f
gitgutter#utility#setbufvar	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#setbufvar(buffer, varname, val)$/;"	f
gitgutter#utility#shellescape	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shellescape(arg) abort$/;"	f
gitgutter#utility#supports_overscore_sign	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#supports_overscore_sign()$/;"	f
gitgutter#utility#system	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#system(cmd, ...) abort$/;"	f
gitgutter#utility#warn	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn(message) abort$/;"	f
gitgutter#utility#warn_once	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn_once(bufnr, message, key) abort$/;"	f
gitgutter#utility#windows	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#windows()$/;"	f
global_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, event_handler_attributes)$/;"	v
global_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, microdata_attributes)$/;"	v
global_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, rdfa_attributes)$/;"	v
global_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, {'role': role})$/;"	v
global_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let global_attributes = extend(core_attributes, xml_attributes)$/;"	v
global_states_and_properties	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let global_states_and_properties = {$/;"	v
go	cache-plug/fzf/test/test_go.rb	/^  def go(args)$/;"	f
go#config#AddtagsSkipUnexported	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#AddtagsSkipUnexported() abort$/;"	f
go#config#AddtagsTransform	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#AddtagsTransform() abort$/;"	f
go#config#AlternateMode	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#AlternateMode() abort$/;"	f
go#config#AsmfmtAutosave	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#AsmfmtAutosave() abort$/;"	f
go#config#AutoSameids	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#AutoSameids() abort$/;"	f
go#config#AutoTypeInfo	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#AutoTypeInfo() abort$/;"	f
go#config#BinPath	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#BinPath() abort$/;"	f
go#config#BuildTags	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#BuildTags() abort$/;"	f
go#config#CodeCompletionEnabled	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#CodeCompletionEnabled() abort$/;"	f
go#config#CodeCompletionIcase	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#CodeCompletionIcase() abort$/;"	f
go#config#Debug	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#Debug() abort$/;"	f
go#config#DebugAddress	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugAddress() abort$/;"	f
go#config#DebugBreakpointSignText	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugBreakpointSignText() abort$/;"	f
go#config#DebugCommands	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugCommands() abort$/;"	f
go#config#DebugLogOutput	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugLogOutput() abort$/;"	f
go#config#DebugMappings	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugMappings() abort$/;"	f
go#config#DebugWindows	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DebugWindows() abort$/;"	f
go#config#DeclsIncludes	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DeclsIncludes() abort$/;"	f
go#config#DeclsMode	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DeclsMode() abort$/;"	f
go#config#DefMode	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DefMode() abort$/;"	f
go#config#DefReuseBuffer	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DefReuseBuffer() abort$/;"	f
go#config#DiagnosticsEnabled	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DiagnosticsEnabled() abort$/;"	f
go#config#DiagnosticsLevel	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DiagnosticsLevel() abort$/;"	f
go#config#DocMaxHeight	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DocMaxHeight() abort$/;"	f
go#config#DocPopupWindow	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DocPopupWindow() abort$/;"	f
go#config#DocUrl	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#DocUrl() abort$/;"	f
go#config#EchoCommandInfo	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#EchoCommandInfo() abort$/;"	f
go#config#EchoGoInfo	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#EchoGoInfo() abort$/;"	f
go#config#ErrcheckBin	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ErrcheckBin() abort$/;"	f
go#config#FillStructMode	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#FillStructMode() abort$/;"	f
go#config#FmtAutosave	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtAutosave() abort$/;"	f
go#config#FmtCommand	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtCommand() abort$/;"	f
go#config#FmtExperimental	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtExperimental() abort$/;"	f
go#config#FmtFailSilently	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtFailSilently() abort$/;"	f
go#config#FmtOptions	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#FmtOptions() abort$/;"	f
go#config#FoldEnable	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#FoldEnable(...) abort$/;"	f
go#config#GolintBin	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GolintBin() abort$/;"	f
go#config#GoplsAnalyses	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsAnalyses() abort$/;"	f
go#config#GoplsCompleteUnimported	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsCompleteUnimported() abort$/;"	f
go#config#GoplsDeepCompletion	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsDeepCompletion() abort$/;"	f
go#config#GoplsEnabled	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsEnabled() abort$/;"	f
go#config#GoplsGofumpt	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsGofumpt() abort$/;"	f
go#config#GoplsLocal	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsLocal() abort$/;"	f
go#config#GoplsMatcher	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsMatcher() abort$/;"	f
go#config#GoplsOptions	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsOptions() abort$/;"	f
go#config#GoplsSettings	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsSettings() abort$/;"	f
go#config#GoplsStaticCheck	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsStaticCheck() abort$/;"	f
go#config#GoplsTempModfile	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsTempModfile() abort$/;"	f
go#config#GoplsUsePlaceholders	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GoplsUsePlaceholders() abort$/;"	f
go#config#GorenameBin	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GorenameBin() abort$/;"	f
go#config#GorenamePrefill	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GorenamePrefill() abort$/;"	f
go#config#GuruScope	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#GuruScope() abort$/;"	f
go#config#HighlightArrayWhitespaceError	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightArrayWhitespaceError() abort$/;"	f
go#config#HighlightBuildConstraints	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightBuildConstraints() abort$/;"	f
go#config#HighlightChanWhitespaceError	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightChanWhitespaceError() abort$/;"	f
go#config#HighlightDebug	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightDebug() abort$/;"	f
go#config#HighlightDiagnosticErrors	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticErrors() abort$/;"	f
go#config#HighlightDiagnosticWarnings	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticWarnings() abort$/;"	f
go#config#HighlightExtraTypes	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightExtraTypes() abort$/;"	f
go#config#HighlightFields	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFields() abort$/;"	f
go#config#HighlightFormatStrings	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFormatStrings() abort$/;"	f
go#config#HighlightFunctionCalls	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFunctionCalls() abort$/;"	f
go#config#HighlightFunctionParameters	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFunctionParameters() abort$/;"	f
go#config#HighlightFunctions	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightFunctions() abort$/;"	f
go#config#HighlightGenerateTags	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightGenerateTags() abort$/;"	f
go#config#HighlightOperators	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightOperators() abort$/;"	f
go#config#HighlightSpaceTabError	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightSpaceTabError() abort$/;"	f
go#config#HighlightStringSpellcheck	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightStringSpellcheck() abort$/;"	f
go#config#HighlightTrailingWhitespaceError	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightTrailingWhitespaceError() abort$/;"	f
go#config#HighlightTypes	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightTypes() abort$/;"	f
go#config#HighlightVariableAssignments	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightVariableAssignments() abort$/;"	f
go#config#HighlightVariableDeclarations	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#HighlightVariableDeclarations() abort$/;"	f
go#config#ImplementsMode	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ImplementsMode() abort$/;"	f
go#config#ImportsAutosave	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ImportsAutosave() abort$/;"	f
go#config#ImportsMode	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ImportsMode() abort$/;"	f
go#config#InfoMode	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#InfoMode() abort$/;"	f
go#config#ListAutoclose	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListAutoclose() abort$/;"	f
go#config#ListHeight	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListHeight() abort$/;"	f
go#config#ListType	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListType() abort$/;"	f
go#config#ListTypeCommands	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ListTypeCommands() abort$/;"	f
go#config#LspLog	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#LspLog() abort$/;"	f
go#config#MetalinterAutosave	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterAutosave() abort$/;"	f
go#config#MetalinterAutosaveEnabled	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterAutosaveEnabled() abort$/;"	f
go#config#MetalinterCommand	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterCommand() abort$/;"	f
go#config#MetalinterDeadline	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterDeadline() abort$/;"	f
go#config#MetalinterEnabled	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#MetalinterEnabled() abort$/;"	f
go#config#ModFmtAutosave	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ModFmtAutosave() abort$/;"	f
go#config#PlayBrowserCommand	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#PlayBrowserCommand() abort$/;"	f
go#config#PlayOpenBrowser	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#PlayOpenBrowser() abort$/;"	f
go#config#ReferrersMode	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#ReferrersMode() abort$/;"	f
go#config#RenameCommand	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#RenameCommand() abort$/;"	f
go#config#SearchBinPathFirst	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SearchBinPathFirst() abort$/;"	f
go#config#SetAsmfmtAutosave	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetAsmfmtAutosave(value) abort$/;"	f
go#config#SetAutoSameids	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetAutoSameids(value) abort$/;"	f
go#config#SetAutoTypeInfo	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetAutoTypeInfo(value) abort$/;"	f
go#config#SetBuildTags	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetBuildTags(value) abort$/;"	f
go#config#SetDebugDiag	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetDebugDiag(value) abort$/;"	f
go#config#SetFmtAutosave	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetFmtAutosave(value) abort$/;"	f
go#config#SetGuruScope	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetGuruScope(scope) abort$/;"	f
go#config#SetMetalinterAutosave	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetMetalinterAutosave(value) abort$/;"	f
go#config#SetModFmtAutosave	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetModFmtAutosave(value) abort$/;"	f
go#config#SetTemplateAutocreate	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetTemplateAutocreate(value) abort$/;"	f
go#config#SetTermCloseOnExit	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetTermCloseOnExit(value) abort$/;"	f
go#config#SetTermEnabled	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SetTermEnabled(value) abort$/;"	f
go#config#SnippetEngine	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#SnippetEngine() abort$/;"	f
go#config#StatuslineDuration	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#StatuslineDuration() abort$/;"	f
go#config#TemplateAutocreate	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateAutocreate() abort$/;"	f
go#config#TemplateFile	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateFile() abort$/;"	f
go#config#TemplateTestFile	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateTestFile() abort$/;"	f
go#config#TemplateUsePkg	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TemplateUsePkg() abort$/;"	f
go#config#TermCloseOnExit	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermCloseOnExit() abort$/;"	f
go#config#TermEnabled	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermEnabled() abort$/;"	f
go#config#TermHeight	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermHeight() abort$/;"	f
go#config#TermMode	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermMode() abort$/;"	f
go#config#TermReuse	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermReuse() abort$/;"	f
go#config#TermWidth	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TermWidth() abort$/;"	f
go#config#TestShowName	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TestShowName() abort$/;"	f
go#config#TestTimeout	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TestTimeout() abort$/;"	f
go#config#TextobjIncludeFunctionDoc	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TextobjIncludeFunctionDoc() abort$/;"	f
go#config#TextobjIncludeVariable	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#TextobjIncludeVariable() abort$/;"	f
go#config#Updatetime	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#Updatetime() abort$/;"	f
go#config#VersionWarning	cache-plug/vim-polyglot/autoload/go/config.vim	/^function! go#config#VersionWarning() abort$/;"	f
goto_col	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:goto_col(pos, min_spaces) abort$/;"	f
goto_definition	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:goto_definition() abort$/;"	f
goto_original_window	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:goto_original_window()$/;"	f
gr	plugin/coc.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gr	plugin/scala.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
graphic_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let graphic_role = [$/;"	v
graphql#has_syntax_group	cache-plug/vim-polyglot/autoload/graphql.vim	/^function! graphql#has_syntax_group(group) abort$/;"	f
graphql#javascript_tags	cache-plug/vim-polyglot/autoload/graphql.vim	/^function! graphql#javascript_tags() abort$/;"	f
grep_version	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:grep_version()$/;"	f
grey_colour	cache-plug/coc.nvim/autoload/coc/color.vim	/^fun! s:grey_colour(n)$/;"	f
grey_level	cache-plug/coc.nvim/autoload/coc/color.vim	/^fun! s:grey_level(n)$/;"	f
grey_number	cache-plug/coc.nvim/autoload/coc/color.vim	/^fun! s:grey_number(x)$/;"	f
groovy_minlines	cache-plug/vim-polyglot/syntax/groovy.vim	/^  let groovy_minlines = 10$/;"	v
group_by	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
gs	plugin/bepo.vim	/^noremap gs gk$/;"	m
gsa	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gsa <Plug>(crystal-spec-run-all)$/;"	m
gsc	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gsc <Plug>(crystal-spec-run-current)$/;"	m
gss	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^  nmap <buffer>gss <Plug>(crystal-spec-switch)$/;"	m
gsub	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
gt	plugin/bepo.vim	/^noremap gt gj$/;"	m
guess	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  func! s:guess(lines) abort$/;"	f
gutentags#add_job	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	cache-plug/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	cache-plug/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	cache-plug/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave_pre	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#remove_job	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	cache-plug/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	cache-plug/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
gy	plugin/coc.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
gy	plugin/scala.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
gÉ	plugin/bepo.vim	/^noremap gÉ :exe "silent! tablast"<CR>$/;"	m
gé	plugin/bepo.vim	/^noremap gé gt$/;"	m
h	plugin/bepo.vim	/^noremap h r$/;"	m
handle_double_hunk	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:handle_double_hunk(modified_lines)$/;"	f
handle_with	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:handle_with(start_lnum, start_col, context)$/;"	f
has	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
hasPreviewAction	cache-plug/fzf/src/terminal.go	/^func hasPreviewAction(opts *Options) bool {$/;"	f
hasPreviewFlags	cache-plug/fzf/src/terminal.go	/^func hasPreviewFlags(template string) (slot bool, plus bool, query bool) {$/;"	f
hasPreviewWindow	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f
hasPreviewer	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f
has_any	cache-plug/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
has_common_items	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
has_fresh_changes	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! s:has_fresh_changes(bufnr) abort$/;"	f
has_index	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
has_vimproc	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:has_vimproc() abort$/;"	f
has_webapi	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:has_webapi()$/;"	f
hash	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:hash(str) abort$/;"	f
haskelltips	plugin/haskell.vim	/^augroup haskelltips$/;"	a
haxe_minlines	cache-plug/vim-polyglot/syntax/haxe.vim	/^  let haxe_minlines = 5000$/;"	v
header	cache-plug/delimitMate/test/expand_cr.vim	/^    let header = empty(header) ? item[1:] : 'Lines should match.'$/;"	v
header	cache-plug/delimitMate/test/expand_cr.vim	/^  let header = ''$/;"	v
header	cache-plug/delimitMate/test/expand_cr.vim	/^let header = ''$/;"	v
health#coc#check	cache-plug/coc.nvim/autoload/health/coc.vim	/^function! health#coc#check() abort$/;"	f
help	cache-plug/fzf/bin/fzf-tmux	/^help() {$/;"	f
help	cache-plug/fzf/install	/^help() {$/;"	f
help	cache-plug/fzf/src/options.go	/^func help(code int) {$/;"	f
help	cache-plug/fzf/uninstall	/^help() {$/;"	f
helptag_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
hi	cache-plug/lightline.vim/test/highlight.vim	/^function! s:hi(name)$/;"	f
hi	cache-plug/lightline.vim/test/link.vim	/^function! s:hi(name)$/;"	f
hi	cache-plug/vim-polyglot/syntax/go.vim	/^function! s:hi()$/;"	f
highlight_keys	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
highlight_name_for_change	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:highlight_name_for_change(text) abort$/;"	f
highlight_types	cache-plug/vim-polyglot/syntax/spup.vim	/^    let highlight_types = 1$/;"	v
history	cache-plug/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, extra, bang)$/;"	f
history_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
history_source	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
hog_minlines	cache-plug/vim-polyglot/syntax/hog.vim	/^    let hog_minlines = 100$/;"	v
html_no_rendering	cache-plug/vim-polyglot/syntax/spyce.vim	/^let html_no_rendering = 1    " do not render <b>,<i>, etc...$/;"	v
htmlcomplete#CheckDoctype	cache-plug/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
htmlcomplete#CompleteTags	cache-plug/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#DetectOmniFlavor	cache-plug/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#DetectOmniFlavor()$/;"	f
htmlcomplete#LoadAria	cache-plug/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadAria() " {{{$/;"	f
htmlcomplete#LoadData	cache-plug/vim-polyglot/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
hunk_op	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:hunk_op(op, ...)$/;"	f
hw_subversion	cache-plug/vim-polyglot/syntax/hollywood.vim	/^  let hw_subversion = 0$/;"	v
hw_version	cache-plug/vim-polyglot/syntax/hollywood.vim	/^  let hw_version = 8$/;"	v
i	cache-plug/vim-gitgutter/test/runner.vim	/^      let i += 1$/;"	v
i	cache-plug/vim-gitgutter/test/runner.vim	/^    let i = 0$/;"	v
i	cache-plug/vim-polyglot/syntax/plantuml.vim	/^  let i = i + 1$/;"	v
i	cache-plug/vim-polyglot/syntax/plantuml.vim	/^let i = 1$/;"	v
i	cache-plug/vim-polyglot/syntax/xpm.vim	/^   let i = i + 1$/;"	v
i	cache-plug/vim-polyglot/syntax/xpm.vim	/^let i      = 1$/;"	v
i	cache-plug/vim-polyglot/syntax/xpm2.vim	/^    let i = i + 1$/;"	v
i	cache-plug/vim-polyglot/syntax/xpm2.vim	/^  let i      = 1$/;"	v
i(	cache-plug/delimitMate/test/eol_marker.vim	/^normal i($/;"	m
iM	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
icon_minlines	cache-plug/vim-polyglot/syntax/icon.vim	/^  let icon_minlines = 15$/;"	v
iconv	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
iconv	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
idris_response	cache-plug/vim-polyglot/ftplugin/idris.vim	/^let idris_response = 0$/;"	v
idris_response	cache-plug/vim-polyglot/ftplugin/idris2.vim	/^let idris_response = 0$/;"	v
ie	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  onoremap <silent> <buffer> ie :<C-U>call <SID>wrap_inside()<CR>$/;"	m
if	plugin/coc.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
ignored_region	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:ignored_region()$/;"	f
ignored_region	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:ignored_region()$/;"	f
im	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
import	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:import(name, ...) abort dict$/;"	f
import_autocommands	cache-plug/vim-polyglot/scripts/import_vim	/^def import_autocommands$/;"	f
in_hunk_preview_window	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:in_hunk_preview_window()$/;"	f
increase	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:increase(...)$/;"	f
indent	cache-plug/vim-polyglot/scripts/build	/^def indent(str, amount)$/;"	f
indentGuard	cache-plug/vim-polyglot/indent/haskell.vim	/^function! s:indentGuard(pos, prevline)$/;"	f
indentMatching	cache-plug/vim-polyglot/indent/haskell.vim	/^function! s:indentMatching(char)$/;"	f
indent_like_block	cache-plug/vim-polyglot/indent/cython.vim	/^function! s:indent_like_block(lnum)$/;"	f
indent_like_block	cache-plug/vim-polyglot/indent/python.vim	/^function! s:indent_like_block(lnum)$/;"	f
indent_like_opening_paren	cache-plug/vim-polyglot/indent/cython.vim	/^function! s:indent_like_opening_paren(lnum)$/;"	f
indent_like_opening_paren	cache-plug/vim-polyglot/indent/python.vim	/^function! s:indent_like_opening_paren(lnum)$/;"	f
indent_like_previous_line	cache-plug/vim-polyglot/indent/cython.vim	/^function! s:indent_like_previous_line(lnum)$/;"	f
indent_like_previous_line	cache-plug/vim-polyglot/indent/python.vim	/^function! s:indent_like_previous_line(lnum)$/;"	f
indent_to_innermost_parentheses	cache-plug/vim-polyglot/indent/dtd.vim	/^function s:indent_to_innermost_parentheses(line, end)$/;"	f
indexAt	cache-plug/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f
infoDefault	cache-plug/fzf/src/options.go	/^	infoDefault infoStyle = iota$/;"	c
infoHidden	cache-plug/fzf/src/options.go	/^	infoHidden$/;"	c
infoInline	cache-plug/fzf/src/options.go	/^	infoInline$/;"	c
infoStyle	cache-plug/fzf/src/options.go	/^type infoStyle int$/;"	t
init	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:init() "{{{$/;"	f
init	cache-plug/fzf/src/ansi.go	/^func init() {$/;"	f
init	cache-plug/fzf/src/constants.go	/^func init() {$/;"	f
init	cache-plug/fzf/src/options.go	/^func init() {$/;"	f
init	cache-plug/fzf/src/pattern.go	/^func init() {$/;"	f
init	cache-plug/fzf/src/pattern_test.go	/^func init() {$/;"	f
init	cache-plug/fzf/src/terminal.go	/^func init() {$/;"	f
init	cache-plug/fzf/src/tui/tui.go	/^func init() {$/;"	f
initPalette	cache-plug/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f
initPlatform	cache-plug/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f
initPlatform	cache-plug/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f
initScreen	cache-plug/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() {$/;"	f
initTheme	cache-plug/fzf/src/tui/tui.go	/^func initTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool) {$/;"	f
initialDelay	cache-plug/fzf/src/constants.go	/^	initialDelay      = 20 * time.Millisecond$/;"	c
initialDelayTac	cache-plug/fzf/src/constants.go	/^	initialDelayTac   = 100 * time.Millisecond$/;"	c
initialize	cache-plug/fzf/test/test_go.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
inject_code	cache-plug/vim-polyglot/scripts/build	/^def inject_code(path, code)$/;"	f	class:rules_to_code.rule_to_code
inject_snippet	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
input2	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^    let input2 = substitute(input, '(', s:l, 'g')$/;"	v
input2	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^    let input2 = substitute(input2, ')', s:r, 'g')$/;"	v
input_q	cache-plug/delimitMate/test/autoclose_quotes.vim	/^    let input_q = substitute(input,"'" , escape(escape(quote, '"'), '\\'), 'g')$/;"	v
insidePlantUMLTags	cache-plug/vim-polyglot/indent/plantuml.vim	/^function! s:insidePlantUMLTags(lnum) abort$/;"	f
interpretCode	cache-plug/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) *ansiState {$/;"	f
intersect	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
is24	cache-plug/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f
isAlphabet	cache-plug/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f
isAscii	cache-plug/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f
isExecuteAction	cache-plug/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f
isInBlock	cache-plug/vim-polyglot/indent/haskell.vim	/^function! s:isInBlock(hlstack)$/;"	f
isNumeric	cache-plug/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f
isPreviewEnabled	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) isPreviewEnabled() bool {$/;"	f
isSYN	cache-plug/vim-polyglot/indent/haskell.vim	/^function! s:isSYN(grp, line, col)$/;"	f
is_added	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_added(from_count, to_count) abort$/;"	f
is_available	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^function! s:is_available() abort$/;"	f
is_bash	cache-plug/vim-polyglot/syntax/initng.vim	/^let is_bash = 1$/;"	v
is_bash	cache-plug/vim-polyglot/syntax/upstart.vim	/^let is_bash = 1$/;"	v
is_blocking	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:is_blocking() abort$/;"	f
is_closing_tag	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_closing_tag(syntax)$/;"	f
is_comment	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_comment(syntax)$/;"	f
is_concealed	cache-plug/vim-polyglot/indent/cython.vim	/^    function! s:is_concealed(line, col)$/;"	f
is_concealed	cache-plug/vim-polyglot/indent/python.vim	/^    function! s:is_concealed(line, col)$/;"	f
is_cr_expansion	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:is_cr_expansion(...) " {{{$/;"	f
is_dedented_already	cache-plug/vim-polyglot/indent/cython.vim	/^function! s:is_dedented_already(current, base)$/;"	f
is_dedented_already	cache-plug/vim-polyglot/indent/python.vim	/^function! s:is_dedented_already(current, base)$/;"	f
is_empty_matchpair	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:is_empty_matchpair() "{{{$/;"	f
is_empty_quotes	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:is_empty_quotes() "{{{$/;"	f
is_excluded_ft	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:is_excluded_ft(ft) "{{{$/;"	f
is_file_buffer	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:is_file_buffer(bufnr) abort$/;"	f
is_forbidden	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:is_forbidden(char) "{{{$/;"	f
is_jsx_backticks	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_backticks(syntax)$/;"	f
is_jsx_brace	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_brace(syntax)$/;"	f
is_jsx_comment	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_comment(syntax)$/;"	f
is_jsx_element	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_element(syntax)$/;"	f
is_jsx_expression	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_expression(syntax)$/;"	f
is_jsx_region	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_jsx_region(syntax)$/;"	f
is_jump	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:is_jump(...) "{{{$/;"	f
is_method_special_case	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:is_method_special_case(position)$/;"	f
is_modified	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified(from_count, to_count) abort$/;"	f
is_modified_and_added	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_added(from_count, to_count) abort$/;"	f
is_modified_and_removed	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_removed(from_count, to_count) abort$/;"	f
is_opening_tag	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_opening_tag(syntax)$/;"	f
is_paren	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:is_paren()$/;"	f
is_paren	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:is_paren()$/;"	f
is_parent_element	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:is_parent_element(pos, element_count)$/;"	f
is_python_string	cache-plug/vim-polyglot/indent/cython.vim	/^function! s:is_python_string(lnum, ...)$/;"	f
is_python_string	cache-plug/vim-polyglot/indent/python.vim	/^function! s:is_python_string(lnum, ...)$/;"	f
is_reader_conditional_special_case	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:is_reader_conditional_special_case(position)$/;"	f
is_removed	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_removed(from_count, to_count) abort$/;"	f
is_section_delim	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:is_section_delim(line, func_delim) abort$/;"	f
is_smart_quote	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:is_smart_quote(char) "{{{$/;"	f
is_space_expansion	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:is_space_expansion() " {{{$/;"	f
is_string_comment	cache-plug/vim-polyglot/indent/reason.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
is_string_comment	cache-plug/vim-polyglot/indent/rust.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
is_string_or_comment	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:is_string_or_comment(line, col)$/;"	f
itemLine	cache-plug/fzf/src/terminal.go	/^type itemLine struct {$/;"	t
item_count	cache-plug/fzf/test/test_go.rb	/^          def item_count$/;"	f	class:Tmux.until
itemsnumber	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^let itemsnumber = len(split(g:delimitMate_matchpairs, '.:.\\zs,\\ze.:.'))$/;"	v
itemsnumber	cache-plug/delimitMate/test/autoclose_quotes.vim	/^let itemsnumber = len(split(g:delimitMate_quotes, ' '))$/;"	v
iter	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forward bool, pattern []rune, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f
iÉ	plugin/bepo.vim	/^onoremap iÉ iW$/;"	m
ié	plugin/bepo.vim	/^onoremap ié iw$/;"	m
j	plugin/bepo.vim	/^noremap j t$/;"	m
java_highlight_all	cache-plug/vim-polyglot/syntax/java.vim	/^  let java_highlight_all=1$/;"	v
java_minlines	cache-plug/vim-polyglot/syntax/java.vim	/^  let java_minlines = 10$/;"	v
job	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^    let job = term_getjob(bufnr)$/;"	v
job_id	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^    let job_id = termopen(a:cmd, {$/;"	v
job_id	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:job_id(job)$/;"	f
joinTokens	cache-plug/fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) string {$/;"	f
joinUndo	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:joinUndo() "{{{$/;"	f
join_posix_lines	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
jproperties_lines	cache-plug/vim-polyglot/syntax/jproperties.vim	/^	let jproperties_lines = 256$/;"	v
jproperties_show_messages	cache-plug/vim-polyglot/syntax/jproperties.vim	/^	let jproperties_show_messages = 0$/;"	v
jproperties_strict_syntax	cache-plug/vim-polyglot/syntax/jproperties.vim	/^	let jproperties_strict_syntax = 0$/;"	v
jsonnet#CheckBinPath	cache-plug/vim-polyglot/autoload/jsonnet.vim	/^function! jsonnet#CheckBinPath(binName)$/;"	f
jsonnet#Format	cache-plug/vim-polyglot/autoload/jsonnet.vim	/^function! jsonnet#Format()$/;"	f
jsonnet#System	cache-plug/vim-polyglot/autoload/jsonnet.vim	/^function! jsonnet#System(str, ...)$/;"	f
jsx_comment	cache-plug/vim-polyglot/after/ftplugin/jsx.vim	/^augroup jsx_comment$/;"	a
jsx_comment	cache-plug/vim-polyglot/after/ftplugin/tsx.vim	/^augroup jsx_comment$/;"	a
jsx_indent_backticks	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_backticks(lnum)$/;"	f
jsx_indent_closing_tag	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_closing_tag(lnum)$/;"	f
jsx_indent_comment	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_comment(lnum)$/;"	f
jsx_indent_element	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_element(lnum)$/;"	f
jsx_indent_trail_punct	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:jsx_indent_trail_punct(lnum)$/;"	f
jsx_pretty#comment#update_commentstring	cache-plug/vim-polyglot/autoload/jsx_pretty/comment.vim	/^function! jsx_pretty#comment#update_commentstring(original)$/;"	f
jsx_pretty#indent#get	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function! jsx_pretty#indent#get(js_indent)$/;"	f
julia#doc#complete	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#complete(ArgLead, CmdLine, CursorPos) abort$/;"	f
julia#doc#keywordprg	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#keywordprg(word) abort$/;"	f
julia#doc#lookup	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#lookup(keyword, ...) abort$/;"	f
julia#doc#open	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#open(keyword) abort$/;"	f
julia#doc#prompt	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! julia#doc#prompt() abort$/;"	f
julia#function_assign2block	cache-plug/vim-polyglot/autoload/julia.vim	/^function! julia#function_assign2block()$/;"	f
julia#function_block2assign	cache-plug/vim-polyglot/autoload/julia.vim	/^function! julia#function_block2assign()$/;"	f
julia#gotodefinition	cache-plug/vim-polyglot/autoload/julia.vim	/^function! julia#gotodefinition()$/;"	f
julia#idundercursor	cache-plug/vim-polyglot/autoload/julia.vim	/^function! julia#idundercursor()$/;"	f
julia#set_syntax_version	cache-plug/vim-polyglot/autoload/julia.vim	/^function! julia#set_syntax_version(jvers)$/;"	f
julia#toggle_deprecated_syntax	cache-plug/vim-polyglot/autoload/julia.vim	/^function! julia#toggle_deprecated_syntax()$/;"	f
julia#toggle_function_blockassign	cache-plug/vim-polyglot/autoload/julia.vim	/^function! julia#toggle_function_blockassign()$/;"	f
julia_blocks#init_mappings	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#init_mappings()$/;"	f
julia_blocks#move_N	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_N()$/;"	f
julia_blocks#move_P	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_P()$/;"	f
julia_blocks#move_n	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_n()$/;"	f
julia_blocks#move_p	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#move_p()$/;"	f
julia_blocks#moveblock_N	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_N()$/;"	f
julia_blocks#moveblock_P	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_P()$/;"	f
julia_blocks#moveblock_n	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_n()$/;"	f
julia_blocks#moveblock_p	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#moveblock_p()$/;"	f
julia_blocks#owrapper_move	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#owrapper_move(oper, function, toend, backwards)$/;"	f
julia_blocks#owrapper_select	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#owrapper_select(oper, function) ", toend, backwards)$/;"	f
julia_blocks#remove_mappings	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#remove_mappings()$/;"	f
julia_blocks#select_a	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#select_a(...)$/;"	f
julia_blocks#select_i	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#select_i()$/;"	f
julia_blocks#select_reset	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function julia_blocks#select_reset()$/;"	f
julia_blocks#vwrapper_move	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#vwrapper_move(function)$/;"	f
julia_blocks#vwrapper_select	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#vwrapper_select(function)$/;"	f
julia_blocks#whereami	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! julia_blocks#whereami()$/;"	f
julia_latex_symbols#get_dict	cache-plug/vim-polyglot/autoload/julia_latex_symbols.vim	/^function! julia_latex_symbols#get_dict()$/;"	f
jump	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
jump	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^function! s:jump(command,count)$/;"	f
jumpAcceptEnabled	cache-plug/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c
jumpDisabled	cache-plug/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c
jumpEnabled	cache-plug/fzf/src/terminal.go	/^	jumpEnabled$/;"	c
jumpMode	cache-plug/fzf/src/terminal.go	/^type jumpMode int$/;"	t
jump_to_identifier_at	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:jump_to_identifier_at(linum, ident) abort$/;"	f
jump_to_impl	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! s:jump_to_impl(impl) abort$/;"	f
justify_equal_spacing	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
k	plugin/bepo.vim	/^noremap k s$/;"	m
key	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^        let key = matchstr(s:filetype, "[^=]*")$/;"	v
keyMatch	cache-plug/fzf/src/terminal.go	/^func keyMatch(key int, event tui.Event) bool {$/;"	f
key_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
keyword	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:keyword(expr)$/;"	f
kill	cache-plug/fzf/test/test_go.rb	/^  def kill$/;"	f	class:Tmux
killPreview	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) killPreview(code int) {$/;"	f
l	plugin/bepo.vim	/^noremap l c$/;"	m
landmark_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let landmark_role = [$/;"	v
landmark_role	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let landmark_role = ['application', 'banner', 'complementary', 'contentinfo', 'form', 'main', 'navigation', 'search']$/;"	v
lang_tag	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let lang_tag = [$/;"	v
langonly	cache-plug/vim-polyglot/extras/menu.vim	/^	let langonly = substitute(s:lang, '_.*', "", "")$/;"	v
lastChunk	cache-plug/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f
layoutDefault	cache-plug/fzf/src/options.go	/^	layoutDefault layoutType = iota$/;"	c
layoutReverse	cache-plug/fzf/src/options.go	/^	layoutReverse$/;"	c
layoutReverseList	cache-plug/fzf/src/options.go	/^	layoutReverseList$/;"	c
layoutType	cache-plug/fzf/src/options.go	/^type layoutType int$/;"	t
lcs	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:lcs(s1, s2)$/;"	f
ledger#align_amount_at_cursor	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#align_amount_at_cursor() abort$/;"	f
ledger#align_commodity	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#align_commodity() abort$/;"	f
ledger#autocomplete_and_align	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#autocomplete_and_align() abort$/;"	f
ledger#declared_accounts	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#declared_accounts(...) abort$/;"	f
ledger#entry	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#entry() abort$/;"	f
ledger#filter_items	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#filter_items(list, keyword) abort$/;"	f
ledger#find_in_tree	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#find_in_tree(tree, levels) abort$/;"	f
ledger#output	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#output(report) abort$/;"	f
ledger#reconcile	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#reconcile(file, account, target_amount) abort$/;"	f
ledger#register	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#register(file, args) abort$/;"	f
ledger#report	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#report(file, args) abort$/;"	f
ledger#show_balance	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#show_balance(file, ...) abort$/;"	f
ledger#transaction_date_set	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#transaction_date_set(lnum, type, ...) abort$/;"	f
ledger#transaction_from_lnum	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#transaction_from_lnum(lnum) abort$/;"	f
ledger#transaction_state_set	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#transaction_state_set(lnum, char) abort$/;"	f
ledger#transaction_state_toggle	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#transaction_state_toggle(lnum, ...) abort$/;"	f
ledger#transactions	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! ledger#transactions(...) abort$/;"	f
ledger_cmd	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:ledger_cmd(file, args) abort$/;"	f
levenshtein_distance	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
lex	cache-plug/vim-polyglot/indent/dtd.vim	/^function s:lex(input, start, ...)$/;"	f
lex1	cache-plug/vim-polyglot/indent/dtd.vim	/^function s:lex1(input, start, ...)$/;"	f
lightline	cache-plug/lightline.vim/plugin/lightline.vim	/^augroup lightline$/;"	a
lightline#colorscheme	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#colorscheme() abort$/;"	f
lightline#colorscheme#background	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^  function! lightline#colorscheme#background() abort$/;"	f
lightline#colorscheme#fill	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#fill(p) abort$/;"	f
lightline#colorscheme#flatten	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#flatten(p) abort$/;"	f
lightline#colortable#gui2cui	cache-plug/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#gui2cui(rgb, fallback) abort$/;"	f
lightline#colortable#gui2cui_palette	cache-plug/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#gui2cui_palette(palette) abort$/;"	f
lightline#colortable#name_to_rgb	cache-plug/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#name_to_rgb(name) abort$/;"	f
lightline#concatenate	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#concatenate(xs, right) abort$/;"	f
lightline#disable	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#disable() abort$/;"	f
lightline#enable	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#enable() abort$/;"	f
lightline#error	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#error(msg) abort$/;"	f
lightline#highlight	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#highlight(...) abort$/;"	f
lightline#init	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#init() abort$/;"	f
lightline#link	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#link(...) abort$/;"	f
lightline#mode	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#mode() abort$/;"	f
lightline#onetab	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#onetab(n, active) abort$/;"	f
lightline#palette	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#palette() abort$/;"	f
lightline#statusline	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#statusline(inactive) abort$/;"	f
lightline#tab#filename	cache-plug/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#filename(n) abort$/;"	f
lightline#tab#modified	cache-plug/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#modified(n) abort$/;"	f
lightline#tab#readonly	cache-plug/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#readonly(n) abort$/;"	f
lightline#tab#tabnum	cache-plug/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#tabnum(n) abort$/;"	f
lightline#tabline	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#tabline() abort$/;"	f
lightline#tabs	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#tabs() abort$/;"	f
lightline#toggle	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#toggle() abort$/;"	f
lightline#update	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#update() abort$/;"	f
lightline#update_disable	cache-plug/lightline.vim/autoload/lightline.vim	/^function! lightline#update_disable() abort$/;"	f
likely	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! s:likely(str) abort$/;"	f
line	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^    let line = getline('.')$/;"	v
line	cache-plug/lightline.vim/autoload/lightline.vim	/^function! s:line(tabline, inactive) abort$/;"	f
lineLens	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:lineLens(projectPath, cont)$/;"	f
line_adjustment_for_current_hunk	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:line_adjustment_for_current_hunk() abort$/;"	f
line_handler	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
linechars	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
linenr	cache-plug/delimitMate/test/autoclose_quotes.vim	/^  let linenr += 1$/;"	v
linenr	cache-plug/delimitMate/test/autoclose_quotes.vim	/^let linenr = 0$/;"	v
lines	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	cache-plug/delimitMate/test/autoclose_quotes.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	cache-plug/delimitMate/test/expand_cr.vim	/^  let lines = getline(1, line('$'))$/;"	v
lines	cache-plug/delimitMate/test/expand_cr.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	cache-plug/delimitMate/test/expand_space.vim	/^  let lines = getline(1, line('$'))$/;"	v
lines	cache-plug/delimitMate/test/expand_space.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	cache-plug/fzf/plugin/fzf.vim	/^  let lines = s:collect(a:temps)$/;"	v
lines	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:lines(str) abort$/;"	f
link_fzf_in_path	cache-plug/fzf/install	/^link_fzf_in_path() {$/;"	f
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['amphtml']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['apple-touch-icon', 'apple-touch-icon-precomposed', 'apple-touch-startup-image']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['canonical']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['chrome-webstore-item']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['hub']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['import']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['manifest']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['pgpkey']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['search']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['sitemap']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['webmention']$/;"	v
linkreltypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linkreltypes = linktypes$/;"	v
linktypes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let linktypes = ['alternate', 'author', 'bookmark', 'dns-prefetch', 'external', 'help', 'icon', 'license', 'next', 'nofollow', 'noreferrer', 'noopener', 'pingback', 'preconnect', 'prefetch', 'preload', 'prerender', 'prev', 'search', 'stylesheet', 'tag']$/;"	v
listSyntax	cache-plug/vim-polyglot/indent/plantuml.vim	/^function! s:listSyntax(syntaxKeyword) abort$/;"	f
listtype	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! s:listtype(listtype) abort$/;"	f
live_region_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let live_region_attributes = {$/;"	v
livescript_compiler	cache-plug/vim-polyglot/compiler/ls.vim	/^  let livescript_compiler = 'lsc'$/;"	v
livescript_compiler	cache-plug/vim-polyglot/ftplugin/ls.vim	/^  let livescript_compiler = 'lsc'$/;"	v
livescript_make_options	cache-plug/vim-polyglot/compiler/ls.vim	/^  let livescript_make_options = ''$/;"	v
lnum	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let lnum = search('^\\s*(\\*:o\\?caml:', 'n')$/;"	v
load	cache-plug/lightline.vim/autoload/lightline/colortable.vim	/^function! s:load() abort$/;"	f
load	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:load(arg)$/;"	f
load	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:load(...) abort dict$/;"	f
load_buffer	cache-plug/coc.nvim/autoload/coc/list.vim	/^function! s:load_buffer(name) abort$/;"	f
load_data	cache-plug/vim-polyglot/scripts/build	/^def load_data()$/;"	f
load_heuristics	cache-plug/vim-polyglot/scripts/build	/^def load_heuristics$/;"	f
load_languages	cache-plug/vim-polyglot/scripts/build	/^def load_languages$/;"	f
load_packages	cache-plug/vim-polyglot/scripts/build	/^def load_packages$/;"	f
loaded_eregex	cache-plug/vim-polyglot/scripts/eregex.vim	/^let loaded_eregex=1$/;"	v
lquote	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:lquote(char) "{{{$/;"	f
main	cache-plug/fzf/main.go	/^func main() {$/;"	f
main	cache-plug/fzf/main.go	/^package main$/;"	p
main_syntax	cache-plug/vim-polyglot/syntax/ansible.vim	/^  let main_syntax = 'yaml'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/aptconf.vim	/^  let main_syntax = 'aptconf'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/aspperl.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/aspvbs.vim	/^  let main_syntax = 'aspvbs'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/blade.vim	/^    let main_syntax = 'blade'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/css.vim	/^  let main_syntax = 'css'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/docker-compose.vim	/^    let main_syntax = 'yaml'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/ecrystal.vim	/^  let main_syntax = 'ecrystal'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/eelixir.vim	/^  let main_syntax = 'eelixir'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/elixir.vim	/^  let main_syntax = "elixir"$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/emblem.vim	/^  let main_syntax = 'emblem'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/ferm.vim	/^  let main_syntax = 'ferm'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/groovy.vim	/^  let main_syntax='groovy'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/gsp.vim	/^  let main_syntax = 'gsp'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/haml.vim	/^  let main_syntax = 'haml'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/haxe.vim	/^  let main_syntax='haxe'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/helm.vim	/^  let main_syntax = 'yaml'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/html.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/htmldjango.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/htmlm4.vim	/^  let main_syntax='htmlm4'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/java.vim	/^  let main_syntax='java'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/jinja2.vim	/^  let main_syntax = 'jinja2'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/json.vim	/^  let main_syntax = 'json'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/jsp.vim	/^  let main_syntax = 'jsp'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/jst.vim	/^  let main_syntax = 'jst'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/liquid.vim	/^  let main_syntax = 'liquid'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/lite.vim	/^  let main_syntax = 'lite'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/lua.vim	/^  let main_syntax = 'lua'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/m4.vim	/^  let main_syntax='m4'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/mako.vim	/^  let main_syntax = b:mako_outer_lang$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/mason.vim	/^	let main_syntax = 'mason'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/msql.vim	/^  let main_syntax = 'msql'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/ora.vim	/^  let main_syntax = 'ora'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/pdf.vim	/^    let main_syntax = 'pdf'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/php.vim	/^  let main_syntax = 'php'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/plp.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/pug.vim	/^  let main_syntax = 'pug'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/qml.vim	/^  let main_syntax = 'qml'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/scala.vim	/^  let main_syntax = 'scala'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/scss.vim	/^  let main_syntax = 'scss'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/slim.vim	/^  let main_syntax = 'slim'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/slime.vim	/^  let main_syntax = 'slime'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/smarty.vim	/^  let main_syntax = 'smarty'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/spyce.vim	/^  let main_syntax='spyce'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/stylus.vim	/^  let main_syntax = 'css'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/svg.vim	/^  let main_syntax = 'svg'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/texinfo.vim	/^  let main_syntax = 'texinfo'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/tf.vim	/^  let main_syntax = 'tf'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/tpp.vim	/^  let main_syntax = 'tpp'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/typescript.vim	/^  let main_syntax = 'typescript'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/typescriptreact.vim	/^  let main_syntax = 'typescriptreact'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/uc.vim	/^  let main_syntax='uc'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/velocity.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/webmacro.vim	/^  let main_syntax = 'webmacro'$/;"	v
main_syntax	cache-plug/vim-polyglot/syntax/wml.vim	/^  let main_syntax = 'wml'$/;"	v
makeSpace	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f
makeSpinner	cache-plug/fzf/src/terminal.go	/^func makeSpinner(unicode bool) []string {$/;"	f
manual_update_tags	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
map	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! s:map(mode, flags, map) abort$/;"	f
map_accum	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
map_aux	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_aux(function)$/;"	f
map_move	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_move(function, toend, backwards)$/;"	f
map_select	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:map_select(function)$/;"	f
mark_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
matchChunk	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f
match_count	cache-plug/fzf/test/test_go.rb	/^          def match_count$/;"	f	class:Tmux.until
match_expr_on_line	cache-plug/vim-polyglot/indent/cython.vim	/^function! s:match_expr_on_line(expr, lnum, start, ...)$/;"	f
match_expr_on_line	cache-plug/vim-polyglot/indent/python.vim	/^function! s:match_expr_on_line(expr, lnum, start, ...)$/;"	f
match_one	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:match_one(patterns, string)$/;"	f
match_one	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:match_one(patterns, string)$/;"	f
match_pairs	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:match_pairs(open, close, stopat)$/;"	f
match_pairs	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:match_pairs(open, close, stopat)$/;"	f
matchit	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:matchit()$/;"	f
maxInputBuffer	cache-plug/fzf/src/tui/light.go	/^	maxInputBuffer  = 10 * 1024$/;"	c
maxItems	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f
maxMulti	cache-plug/fzf/src/constants.go	/^	maxMulti          = math.MaxInt32$/;"	c
maxPartitions	cache-plug/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c
maxPatternLength	cache-plug/fzf/src/constants.go	/^	maxPatternLength  = 300$/;"	c
max_by	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
max_firstline	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:max_firstline(lines, height, width) abort$/;"	f
mel_minlines	cache-plug/vim-polyglot/syntax/mel.vim	/^  let mel_minlines=15$/;"	v
merge	cache-plug/fzf/src/tui/tui.go	/^func (p ColorPair) merge(other ColorPair, except Color) ColorPair {$/;"	f
merge_opts	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
mergedGet	cache-plug/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f
mergerCacheMax	cache-plug/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c
message	cache-plug/lightline.vim/test/error.vim	/^function! s:message() abort$/;"	f
metadata_elements	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let metadata_elements = ['link', 'style', 'meta', 'script', 'noscript', 'command']$/;"	v
microdata_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let microdata_attributes = {'itemid': [], 'itemscope': ['itemscope', ''], 'itemtype': [], 'itemprop': [], 'itemref': []}$/;"	v
microdata_attributes_value	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let microdata_attributes_value = {$/;"	v
minHeight	cache-plug/fzf/src/terminal.go	/^	minHeight = 4$/;"	c
minItem	cache-plug/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: -1}}$/;"	v
minRank	cache-plug/fzf/src/result.go	/^func minRank() Result {$/;"	f
minWidth	cache-plug/fzf/src/terminal.go	/^	minWidth  = 4$/;"	c
min_btns_width	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:min_btns_width(buttons) abort$/;"	f
min_by	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
mouseSequence	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f
move	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f
move	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f
move_around	cache-plug/vim-polyglot/ftplugin/mf.vim	/^function! s:move_around(count, what, flags, visual)$/;"	f
move_around	cache-plug/vim-polyglot/ftplugin/mp.vim	/^function! s:move_around(count, what, flags, visual)$/;"	f
move_before_begin	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:move_before_begin()$/;"	f
move_to_following_block	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:move_to_following_block() abort$/;"	f
move_to_pred_block	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:move_to_pred_block() abort$/;"	f
moveto_block_delim	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:moveto_block_delim(toend, backwards, ...)$/;"	f
moveto_currentblock_end	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:moveto_currentblock_end()$/;"	f
mupad_cmdextversion	cache-plug/vim-polyglot/syntax/mupad.vim	/^  let mupad_cmdextversion = 2$/;"	v
mv_DEtools	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_DEtools    = 1$/;"	v
mv_Galois	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_Galois     = 1$/;"	v
mv_GaussInt	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_GaussInt   = 1$/;"	v
mv_LREtools	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_LREtools   = 1$/;"	v
mv_combinat	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_combinat   = 1$/;"	v
mv_combstruct	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_combstruct = 1$/;"	v
mv_difforms	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_difforms   = 1$/;"	v
mv_finance	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_finance    = 1$/;"	v
mv_genfunc	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_genfunc    = 1$/;"	v
mv_geometry	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_geometry   = 1$/;"	v
mv_grobner	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_grobner    = 1$/;"	v
mv_group	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_group      = 1$/;"	v
mv_inttrans	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_inttrans   = 1$/;"	v
mv_liesymm	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_liesymm    = 1$/;"	v
mv_linalg	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_linalg     = 1$/;"	v
mv_logic	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_logic      = 1$/;"	v
mv_networks	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_networks   = 1$/;"	v
mv_numapprox	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_numapprox  = 1$/;"	v
mv_numtheory	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_numtheory  = 1$/;"	v
mv_orthopoly	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_orthopoly  = 1$/;"	v
mv_padic	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_padic      = 1$/;"	v
mv_plots	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_plots      = 1$/;"	v
mv_plottools	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_plottools  = 1$/;"	v
mv_powseries	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_powseries  = 1$/;"	v
mv_process	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_process    = 1$/;"	v
mv_simplex	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_simplex    = 1$/;"	v
mv_stats	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_stats      = 1$/;"	v
mv_student	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_student    = 1$/;"	v
mv_sumtools	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_sumtools   = 1$/;"	v
mv_tensor	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_tensor     = 1$/;"	v
mv_totorder	cache-plug/vim-polyglot/syntax/maple.vim	/^  let mv_totorder   = 1$/;"	v
mygroup	plugin/coc.vim	/^augroup mygroup$/;"	a
mygroup	plugin/scala.vim	/^augroup mygroup$/;"	a
n	cache-plug/vim-polyglot/syntax/xpm.vim	/^	 let n = 1		" n = color index$/;"	v
n	cache-plug/vim-polyglot/syntax/xpm.vim	/^	 let n = n + 1$/;"	v
n	cache-plug/vim-polyglot/syntax/xpm.vim	/^let n      = 0$/;"	v
n	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let n = 1			" n = color index$/;"	v
n	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let n = n + 1$/;"	v
n	cache-plug/vim-polyglot/syntax/xpm2.vim	/^  let n      = 0$/;"	v
nearest_cargo	cache-plug/vim-polyglot/autoload/cargo.vim	/^function! s:nearest_cargo(...) abort$/;"	f
netrw_bepo_fix	plugin/netrw.vim	/^augroup netrw_bepo_fix$/;"	a
new	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:new(plugin_name) abort$/;"	f
newItem	cache-plug/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f
newRange	cache-plug/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f
new_shell	cache-plug/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBash
new_shell	cache-plug/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestFish
new_shell	cache-plug/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestZsh
next	cache-plug/fzf/src/history.go	/^func (h *History) next() string {$/;"	f
nextInt	cache-plug/fzf/src/options.go	/^func nextInt(args []string, i *int, message string) int {$/;"	f
nextString	cache-plug/fzf/src/options.go	/^func nextString(args []string, i *int, message string) string {$/;"	f
next_section	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:next_section(stop_func_begin) abort$/;"	f
next_sign_id	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:next_sign_id() abort$/;"	f
nim#init	cache-plug/vim-polyglot/autoload/nim.vim	/^fun! nim#init() abort$/;"	f
nim_highlight_builtins	cache-plug/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_builtins     = 1$/;"	v
nim_highlight_builtins	cache-plug/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_builtins = 1$/;"	v
nim_highlight_exceptions	cache-plug/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_exceptions   = 1$/;"	v
nim_highlight_exceptions	cache-plug/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_exceptions = 1$/;"	v
nim_highlight_numbers	cache-plug/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_numbers      = 1$/;"	v
nim_highlight_numbers	cache-plug/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_numbers = 1$/;"	v
nim_highlight_space_errors	cache-plug/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_space_errors = 1$/;"	v
nim_highlight_special_vars	cache-plug/vim-polyglot/syntax/nim.vim	/^  let nim_highlight_special_vars = 1$/;"	v
noInfoLine	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) noInfoLine() bool {$/;"	f
normalize	cache-plug/lightline.vim/autoload/lightline.vim	/^function! s:normalize(result) abort$/;"	f
normalizeRune	cache-plug/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f
normalized	cache-plug/fzf/src/algo/normalize.go	/^var normalized map[rune]rune = map[rune]rune{$/;"	v
not_git_dir	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:not_git_dir(bufnr) abort$/;"	f
notag	cache-plug/vim-polyglot/ftplugin/pdf.vim	/^function! s:notag()$/;"	f
notify	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! s:notify(method, args) dict$/;"	f
notifyOnCont	cache-plug/fzf/src/terminal_unix.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f
notifyOnCont	cache-plug/fzf/src/terminal_windows.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f
notifyOnResize	cache-plug/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f
notifyOnResize	cache-plug/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f
notifyStop	cache-plug/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f
notifyStop	cache-plug/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f
nqc_minlines	cache-plug/vim-polyglot/syntax/nqc.vim	/^    let nqc_minlines = 15	    " mostly for () constructs$/;"	v
nqc_minlines	cache-plug/vim-polyglot/syntax/nqc.vim	/^    let nqc_minlines = 50	    " #if 0 constructs can be long$/;"	v
nr	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:nr(x) abort$/;"	f
nr2byte	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
nr2enc_char	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
nr2hex	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
nsplit	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
numPartitionsMultiplier	cache-plug/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c
numericPrefix	cache-plug/fzf/src/terminal.go	/^var numericPrefix *regexp.Regexp$/;"	v
nvim_create_keymap	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:nvim_create_keymap(winid) abort$/;"	f
nvim_get_botline	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:nvim_get_botline(topline, height, width, bufnr) abort$/;"	f
nvim_job_exit_wrapper	cache-plug/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
nvim_job_out_wrapper	cache-plug/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
obsolete	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^function! s:obsolete(var)$/;"	f
obsolete_gitgutter_signs_to_remove	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:obsolete_gitgutter_signs_to_remove(bufnr, new_gitgutter_signs_line_numbers) abort$/;"	f
offsetPollTries	cache-plug/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c
offsetRegexp	cache-plug/fzf/src/tui/light.go	/^var offsetRegexp *regexp.Regexp = regexp.MustCompile("(.*)\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v
offsetRegexpBegin	cache-plug/fzf/src/tui/light.go	/^var offsetRegexpBegin *regexp.Regexp = regexp.MustCompile("^\\x1b\\\\[[0-9]+;[0-9]+R")$/;"	v
old_syntax	cache-plug/vim-polyglot/after/syntax/haskell.vim	/^let old_syntax = b:current_syntax$/;"	v
onClose	cache-plug/vim-prettier/autoload/prettier/job/async/vim.vim	/^function! s:onClose(channel, startSelection, endSelection, bufferName) abort$/;"	f
onError	cache-plug/vim-prettier/autoload/prettier/job/async/vim.vim	/^function! s:onError(msg) abort$/;"	f
onExit	cache-plug/vim-prettier/autoload/prettier/job/async/neovim.vim	/^function! s:onExit(status, info, out, err) abort$/;"	f
on_async_response	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! s:on_async_response(id, resp, isErr) dict$/;"	f
on_begin	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:on_begin()$/;"	f
on_bufenter	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^function! s:on_bufenter()$/;"	f
on_end	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:on_end()$/;"	f
on_exit	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! s:on_exit(name, code) abort$/;"	f
on_exit	cache-plug/coc.nvim/autoload/coc/task.vim	/^function! s:on_exit(id, code) abort$/;"	f
on_exit_nvim	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_nvim(_job_id, exit_code, _event) dict abort$/;"	f
on_exit_vim	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_vim(channel) dict abort$/;"	f
on_stderr	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! s:on_stderr(name, msgs)$/;"	f
on_stderr	cache-plug/coc.nvim/autoload/coc/task.vim	/^function! s:on_stderr(id, msgs)$/;"	f
on_stderr_nvim	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_nvim(_job_id, data, _event) dict abort$/;"	f
on_stderr_vim	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_vim(channel, _data) dict abort$/;"	f
on_stdout	cache-plug/coc.nvim/autoload/coc/task.vim	/^function! s:on_stdout(id, msgs)$/;"	f
on_stdout_nvim	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_nvim(_job_id, data, _event) dict abort$/;"	f
on_stdout_vim	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_vim(_channel, data) dict abort$/;"	f
oneline_comments	cache-plug/vim-polyglot/syntax/spup.vim	/^    let oneline_comments = 2$/;"	v
open	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
open	cache-plug/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
openTtyIn	cache-plug/fzf/src/tui/light_unix.go	/^func openTtyIn() *os.File {$/;"	f
openTtyIn	cache-plug/fzf/src/tui/light_windows.go	/^func openTtyIn() *os.File {$/;"	f
open_browser	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:open_browser(url) abort$/;"	f
open_hunk_preview_window	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:open_hunk_preview_window()$/;"	f
optString	cache-plug/fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f
option	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:option(name)$/;"	f
option_init	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:option_init(name, default) "{{{$/;"	f
optionalNextString	cache-plug/fzf/src/options.go	/^func optionalNextString(args []string, i *int) (bool, string) {$/;"	f
optionalNumeric	cache-plug/fzf/src/options.go	/^func optionalNumeric(args []string, i *int, defaultValue int) int {$/;"	f
optionalRunes	cache-plug/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f
optionalblock	cache-plug/vim-polyglot/indent/cobol.vim	/^function! s:optionalblock(lnum,ind,blocks,clauses)$/;"	f
opts	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^  let opts['sink*'] = remove(opts, 'sink')$/;"	v
opts	cache-plug/fzf/plugin/fzf.vim	/^    let opts['sink*'] = remove(opts, 'sink')$/;"	v
optsFor	cache-plug/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f
or	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:or(xs) abort$/;"	f
origin	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f
ormolu	cache-plug/vim-ormolu/ftplugin/haskell/ormolu-haskell.vim	/^augroup ormolu-haskell$/;"	a
osascript	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! s:osascript(...) abort$/;"	f
output	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f
output	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:output(text)$/;"	f
output2	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^    let output2 = substitute(output, '(', s:l, 'g')$/;"	v
output2	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^    let output2 = substitute(output2, ')', s:r, 'g')$/;"	v
output_q	cache-plug/delimitMate/test/autoclose_quotes.vim	/^    let output_q = substitute(output,"'" , escape(escape(quote, '"'), '\\'), 'g')$/;"	v
overflow	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f
overflow32	cache-plug/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c
overflow64	cache-plug/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c
override	cache-plug/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f
p	cache-plug/fzf.vim/plugin/fzf.vim	/^function! s:p(...)$/;"	f
pad_between_letters	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
pad_both_sides	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
pad_left	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
pad_right	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
padding_by_displaywidth	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
parseAlgo	cache-plug/fzf/src/options.go	/^func parseAlgo(str string) algo.Algo {$/;"	f
parseBorder	cache-plug/fzf/src/options.go	/^func parseBorder(str string, optional bool) tui.BorderShape {$/;"	f
parseHeight	cache-plug/fzf/src/options.go	/^func parseHeight(str string) sizeSpec {$/;"	f
parseInfoStyle	cache-plug/fzf/src/options.go	/^func parseInfoStyle(str string) infoStyle {$/;"	f
parseKeyChords	cache-plug/fzf/src/options.go	/^func parseKeyChords(str string, message string) map[int]string {$/;"	f
parseKeymap	cache-plug/fzf/src/options.go	/^func parseKeymap(keymap map[int][]action, str string) {$/;"	f
parseLayout	cache-plug/fzf/src/options.go	/^func parseLayout(str string) layoutType {$/;"	f
parseMargin	cache-plug/fzf/src/options.go	/^func parseMargin(opt string, margin string) [4]sizeSpec {$/;"	f
parseOptions	cache-plug/fzf/src/options.go	/^func parseOptions(opts *Options, allArgs []string) {$/;"	f
parsePlaceholder	cache-plug/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f
parsePreviewWindow	cache-plug/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) {$/;"	f
parsePrompt	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) parsePrompt(prompt string) (func(), int) {$/;"	f
parseSize	cache-plug/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) sizeSpec {$/;"	f
parseTerms	cache-plug/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f
parseTheme	cache-plug/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) *tui.ColorTheme {$/;"	f
parseTiebreak	cache-plug/fzf/src/options.go	/^func parseTiebreak(str string) []criterion {$/;"	f
parseToggleSort	cache-plug/fzf/src/options.go	/^func parseToggleSort(keymap map[int][]action, str string) {$/;"	f
parse_errors	cache-plug/vim-polyglot/autoload/zig/fmt.vim	/^function! s:parse_errors(filename, content) abort$/;"	f
parse_remote	cache-plug/vim-polyglot/scripts/build	/^def parse_remote(remote)$/;"	f
part_of_diff	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:part_of_diff(hunk_diff, first, last)$/;"	f
partialResult	cache-plug/fzf/src/matcher.go	/^type partialResult struct {$/;"	t
partition	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
passed	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^    let passed = line == eval(output2)$/;"	v
passed	cache-plug/delimitMate/test/expand_cr.vim	/^  let passed = lines == expected$/;"	v
passed	cache-plug/delimitMate/test/expand_space.vim	/^  let passed = lines == expected$/;"	v
paste	cache-plug/fzf/test/test_go.rb	/^  def paste(str)$/;"	f	class:Tmux
path	cache-plug/vim-polyglot/ftplugin/awk.vim	/^  let path = substitute(path, ':', ',', 'g')$/;"	v
path	cache-plug/vim-polyglot/ftplugin/awk.vim	/^  let path = substitute(path, '^\\.\\=:\\|:\\.\\=$\\|:\\.\\=:', ',,', 'g') " POSIX cwd$/;"	v
path	cache-plug/vim-polyglot/ftplugin/awk.vim	/^  let path = system("gawk 'BEGIN { printf ENVIRON[\\"AWKPATH\\"] }'")$/;"	v
pathlist	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^    let pathlist = sort(glob($LOCALAPPDATA . '\\Julia-*\\bin\\julia.exe', 1, 1))$/;"	v
pattern	cache-plug/lightline.vim/test/highlight.vim	/^function! s:pattern(xs, ...) abort$/;"	f
pattern	cache-plug/vim-polyglot/syntax/cucumber.vim	/^function! s:pattern(key)$/;"	f
pattern_to_condition	cache-plug/vim-polyglot/scripts/build	/^def pattern_to_condition(rule)$/;"	f
patterns_to_vim_patterns	cache-plug/vim-polyglot/scripts/build	/^def patterns_to_vim_patterns(patterns)$/;"	f
perlpath	cache-plug/vim-polyglot/ftplugin/perl.vim	/^	    let perlpath = system("perl -e 'print join(q\/,\/,@INC)'")$/;"	v
perlpath	cache-plug/vim-polyglot/ftplugin/perl.vim	/^	    let perlpath = system('perl -e "print join(q\/,\/,@INC)"')$/;"	v
perlpath	cache-plug/vim-polyglot/ftplugin/perl.vim	/^	let perlpath = ".,,"$/;"	v
perlpath	cache-plug/vim-polyglot/ftplugin/perl.vim	/^	let perlpath = substitute(perlpath,',.$',',,','')$/;"	v
perlpath	cache-plug/vim-polyglot/ftplugin/raku.vim	/^                let perlpath = system("perl6 -e  '@*INC.join(q\/,\/).say'")$/;"	v
perlpath	cache-plug/vim-polyglot/ftplugin/raku.vim	/^                let perlpath = system('perl6 -e  "@*INC.join(q\/,\/).say"')$/;"	v
perlpath	cache-plug/vim-polyglot/ftplugin/raku.vim	/^            let perlpath = ".,,"$/;"	v
perlpath	cache-plug/vim-polyglot/ftplugin/raku.vim	/^            let perlpath = substitute(perlpath,',.$',',,','')$/;"	v
perlpath	cache-plug/vim-polyglot/ftplugin/raku.vim	/^        let perlpath = ".,,"$/;"	v
permutations	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
permute_suffixes	cache-plug/vim-polyglot/syntax/hostconf.vim	/^function s:permute_suffixes(list)$/;"	f
php_folding	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_folding = 0$/;"	v
php_html_in_heredoc	cache-plug/vim-polyglot/syntax/php.vim	/^    let php_html_in_heredoc=1$/;"	v
php_html_in_heredoc	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_html_in_heredoc=0$/;"	v
php_html_in_nowdoc	cache-plug/vim-polyglot/syntax/php.vim	/^    let php_html_in_nowdoc=1$/;"	v
php_html_in_nowdoc	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_html_in_nowdoc=0$/;"	v
php_html_in_strings	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_html_in_strings=0$/;"	v
php_html_load	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_html_load=1$/;"	v
php_phpdoc_folding	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_phpdoc_folding = 0$/;"	v
php_sql_heredoc	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_sql_heredoc=1$/;"	v
php_sql_nowdoc	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_sql_nowdoc=1$/;"	v
php_sync_method	cache-plug/vim-polyglot/syntax/php.vim	/^    let php_sync_method=-1$/;"	v
php_sync_method	cache-plug/vim-polyglot/syntax/php.vim	/^    let php_sync_method=php_minlines$/;"	v
php_xml_heredoc	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_xml_heredoc=0$/;"	v
php_xml_nowdoc	cache-plug/vim-polyglot/syntax/php.vim	/^  let php_xml_nowdoc=0$/;"	v
phrasing_elements	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let phrasing_elements = ['a', 'em', 'strong', 'small', 'mark', 'abbr', 'dfn', 'i', 'b', 'u', 'code', 'var', 'samp', 'kbd', 'sup', 'sub', 'q', 'cite', 'span', 'bdo', 'bdi', 'br', 'wbr', 'ins', 'del', 'img', 'picture', 'embed', 'object', 'iframe', 'map', 'area', 'script', 'noscript', 'ruby', 'video', 'audio', 'input', 'textarea', 'select', 'button', 'label', 'output', 'datalist', 'keygen', 'progress', 'command', 'canvas', 'time', 'meter', 'data', 'content', 'shadow']$/;"	v
placeCursor	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f
placeholder	cache-plug/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v
placeholderFlags	cache-plug/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	t
pluck	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
plugin	cache-plug/vim-polyglot/ftplugin/crystal.vim	/^augroup plugin-ft-crystal$/;"	a
plugin_name	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:plugin_name() abort dict$/;"	f
polyglot	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  augroup polyglot-sleuth$/;"	a
polyglot	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^augroup polyglot-observer | augroup END$/;"	a
polyglot	cache-plug/vim-polyglot/plugin/polyglot.vim	/^    augroup polyglot-sensible$/;"	a
polyglot#detect#Asa	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Asa(...)$/;"	f
polyglot#detect#Asp	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Asp(...)$/;"	f
polyglot#detect#Bas	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Bas(...)$/;"	f
polyglot#detect#Fs	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Fs(...)$/;"	f
polyglot#detect#H	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#H(...)$/;"	f
polyglot#detect#Html	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Html(...)$/;"	f
polyglot#detect#Idr	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Idr(...)$/;"	f
polyglot#detect#Inp	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Inp(...)$/;"	f
polyglot#detect#Lidr	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Lidr(...)$/;"	f
polyglot#detect#M	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#M(...)$/;"	f
polyglot#detect#Pl	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Pl(...)$/;"	f
polyglot#detect#Pm	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Pm(...)$/;"	f
polyglot#detect#Re	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Re(...)$/;"	f
polyglot#detect#T	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#T(...)$/;"	f
polyglot#detect#Tt2	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^func! polyglot#detect#Tt2(...)$/;"	f
polyglot#ft#BindzoneCheck	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#BindzoneCheck(default)$/;"	f
polyglot#ft#CSH	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#CSH()$/;"	f
polyglot#ft#Check_inp	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#Check_inp()$/;"	f
polyglot#ft#DtraceCheck	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#DtraceCheck()$/;"	f
polyglot#ft#EuphoriaCheck	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#EuphoriaCheck()$/;"	f
polyglot#ft#FTRules	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTRules()$/;"	f
polyglot#ft#FTVB	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTVB(alt)$/;"	f
polyglot#ft#FTasm	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTasm()$/;"	f
polyglot#ft#FTasmsyntax	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTasmsyntax()$/;"	f
polyglot#ft#FTbtm	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTbtm()$/;"	f
polyglot#ft#FTchange	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTchange()$/;"	f
polyglot#ft#FTe	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTe()$/;"	f
polyglot#ft#FTent	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTent()$/;"	f
polyglot#ft#FTheader	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTheader()$/;"	f
polyglot#ft#FThtml	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FThtml()$/;"	f
polyglot#ft#FTidl	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTidl()$/;"	f
polyglot#ft#FTinc	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTinc()$/;"	f
polyglot#ft#FTlpc	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTlpc()$/;"	f
polyglot#ft#FTm	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTm()$/;"	f
polyglot#ft#FTmm	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTmm()$/;"	f
polyglot#ft#FTmms	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTmms()$/;"	f
polyglot#ft#FTnroff	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTnroff()$/;"	f
polyglot#ft#FTperl	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTperl()$/;"	f
polyglot#ft#FTpl	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTpl()$/;"	f
polyglot#ft#FTprogress_asm	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTprogress_asm()$/;"	f
polyglot#ft#FTprogress_cweb	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTprogress_cweb()$/;"	f
polyglot#ft#FTprogress_pascal	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTprogress_pascal()$/;"	f
polyglot#ft#FTr	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTr()$/;"	f
polyglot#ft#FTtex	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTtex()$/;"	f
polyglot#ft#FTxml	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTxml()$/;"	f
polyglot#ft#FTy	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#FTy()$/;"	f
polyglot#ft#McSetf	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#McSetf()$/;"	f
polyglot#ft#ProtoCheck	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#ProtoCheck(default)$/;"	f
polyglot#ft#Redif	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#Redif()$/;"	f
polyglot#ft#SQL	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#SQL()$/;"	f
polyglot#ft#SetFileTypeSH	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#SetFileTypeSH(name)$/;"	f
polyglot#ft#SetFileTypeShell	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^func polyglot#ft#SetFileTypeShell(name)$/;"	f
polyglot#shebang#Detect	cache-plug/vim-polyglot/autoload/polyglot/shebang.vim	/^func! polyglot#shebang#Detect()$/;"	f
polyglot#shebang#VimDetect	cache-plug/vim-polyglot/autoload/polyglot/shebang.vim	/^func! polyglot#shebang#VimDetect()$/;"	f
polyglot#sleuth#GlobForFiletype	cache-plug/vim-polyglot/autoload/polyglot/sleuth.vim	/^func! polyglot#sleuth#GlobForFiletype(type)$/;"	f
pony	cache-plug/vim-polyglot/indent/pony.vim	/^augroup pony$/;"	a
pony#ClearTrailingSpace	cache-plug/vim-polyglot/autoload/pony.vim	/^function! pony#ClearTrailingSpace(all, alt, ...)$/;"	f
pony#Indent	cache-plug/vim-polyglot/autoload/pony.vim	/^function! pony#Indent()$/;"	f
pop	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:pop(list) abort$/;"	f
populate_hunk_preview_window	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:populate_hunk_preview_window(header, body)$/;"	f
popup	cache-plug/fzf/plugin/fzf.vim	/^function! s:popup(opts) abort$/;"	f
popup_cursor	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:popup_cursor(n) abort$/;"	f
popup_position	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:popup_position(config) abort$/;"	f
popup_support	cache-plug/fzf/plugin/fzf.vim	/^function! s:popup_support()$/;"	f
popup_visible	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:popup_visible(id) abort$/;"	f
posArray	cache-plug/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f
posDown	cache-plug/fzf/src/options.go	/^	posDown$/;"	c
posLeft	cache-plug/fzf/src/options.go	/^	posLeft$/;"	c
posRight	cache-plug/fzf/src/options.go	/^	posRight$/;"	c
posUp	cache-plug/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c
postProcessOptions	cache-plug/fzf/src/options.go	/^func postProcessOptions(opts *Options) {$/;"	f
postscr_level	cache-plug/vim-polyglot/syntax/postscr.vim	/^  let postscr_level = 2$/;"	v
ppwiz_highlight_defs	cache-plug/vim-polyglot/syntax/ppwiz.vim	/^    let ppwiz_highlight_defs = 1$/;"	v
ppwiz_with_html	cache-plug/vim-polyglot/syntax/ppwiz.vim	/^    let ppwiz_with_html = 1$/;"	v
prepare	cache-plug/fzf/test/test_go.rb	/^  def prepare$/;"	f
prepend_opts	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
present	cache-plug/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
prettier#Autoformat	cache-plug/vim-prettier/autoload/prettier.vim	/^function! prettier#Autoformat(...) abort$/;"	f
prettier#IsConfigPresent	cache-plug/vim-prettier/autoload/prettier.vim	/^function! prettier#IsConfigPresent(config_files) abort$/;"	f
prettier#Prettier	cache-plug/vim-prettier/autoload/prettier.vim	/^function! prettier#Prettier(...) abort$/;"	f
prettier#PrettierCli	cache-plug/vim-prettier/autoload/prettier.vim	/^function! prettier#PrettierCli(user_input) abort$/;"	f
prettier#PrettierCliPath	cache-plug/vim-prettier/autoload/prettier.vim	/^function! prettier#PrettierCliPath() abort$/;"	f
prettier#bridge#parser#onError	cache-plug/vim-prettier/autoload/prettier/bridge/parser.vim	/^function! prettier#bridge#parser#onError(out, autoFocus) abort$/;"	f
prettier#job#async#neovim#run	cache-plug/vim-prettier/autoload/prettier/job/async/neovim.vim	/^function! prettier#job#async#neovim#run(cmd, startSelection, endSelection) abort$/;"	f
prettier#job#async#vim#run	cache-plug/vim-prettier/autoload/prettier/job/async/vim.vim	/^function! prettier#job#async#vim#run(cmd, startSelection, endSelection) abort$/;"	f
prettier#job#runner#onError	cache-plug/vim-prettier/autoload/prettier/job/runner.vim	/^function! prettier#job#runner#onError(errors) abort$/;"	f
prettier#job#runner#run	cache-plug/vim-prettier/autoload/prettier/job/runner.vim	/^function! prettier#job#runner#run(cmd, startSelection, endSelection, async) abort$/;"	f
prettier#logging#error#log	cache-plug/vim-prettier/autoload/prettier/logging/error.vim	/^function! prettier#logging#error#log(...) abort$/;"	f
prettier#presets#fb#config	cache-plug/vim-prettier/autoload/prettier/presets/fb.vim	/^function! prettier#presets#fb#config() abort$/;"	f
prettier#resolver#config#resolve	cache-plug/vim-prettier/autoload/prettier/resolver/config.vim	/^function! prettier#resolver#config#resolve(config, hasSelection, start, end) abort$/;"	f
prettier#resolver#executable#getPath	cache-plug/vim-prettier/autoload/prettier/resolver/executable.vim	/^function! prettier#resolver#executable#getPath() abort$/;"	f
prettier#resolver#preset#resolve	cache-plug/vim-prettier/autoload/prettier/resolver/preset.vim	/^function! prettier#resolver#preset#resolve(fileTypeConfigOverwrites) abort$/;"	f
prettier#utils#buffer#createBufferFromUpdatedLines	cache-plug/vim-prettier/autoload/prettier/utils/buffer.vim	/^function! prettier#utils#buffer#createBufferFromUpdatedLines(lines, start, end) abort$/;"	f
prettier#utils#buffer#getCharRange	cache-plug/vim-prettier/autoload/prettier/utils/buffer.vim	/^function! prettier#utils#buffer#getCharRange(startSelection, endSelection) abort$/;"	f
prettier#utils#buffer#replace	cache-plug/vim-prettier/autoload/prettier/utils/buffer.vim	/^function! prettier#utils#buffer#replace(lines, startSelection, endSelection) abort$/;"	f
prettier#utils#buffer#replaceAndSave	cache-plug/vim-prettier/autoload/prettier/utils/buffer.vim	/^function! prettier#utils#buffer#replaceAndSave(lines, startSelection, endSelection) abort$/;"	f
prettier#utils#buffer#willUpdatedLinesChangeBuffer	cache-plug/vim-prettier/autoload/prettier/utils/buffer.vim	/^function! prettier#utils#buffer#willUpdatedLinesChangeBuffer(lines, start, end) abort$/;"	f
prettier#utils#quickfix#close	cache-plug/vim-prettier/autoload/prettier/utils/quickfix.vim	/^function! prettier#utils#quickfix#close() abort$/;"	f
prettier#utils#quickfix#open	cache-plug/vim-prettier/autoload/prettier/utils/quickfix.vim	/^function! prettier#utils#quickfix#open(errors, focus) abort$/;"	f
prettier#utils#shim#shiftwidth	cache-plug/vim-prettier/autoload/prettier/utils/shim.vim	/^function! prettier#utils#shim#shiftwidth() abort$/;"	f
prev_default_command	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^    let prev_default_command = $FZF_DEFAULT_COMMAND$/;"	v
prev_ends_with	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:prev_ends_with(context, expr)$/;"	f
prev_lnum	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:prev_lnum(lnum)$/;"	f
prev_non_connected_line	cache-plug/vim-polyglot/indent/applescript.vim	/^func! s:prev_non_connected_line(line)$/;"	f
prev_section	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:prev_section(stop_func_begin) abort$/;"	f
prev_starts_with	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:prev_starts_with(context, expr)$/;"	f
prevgood	cache-plug/vim-polyglot/indent/bst.vim	/^function! s:prevgood(lnum)$/;"	f
prevgood	cache-plug/vim-polyglot/indent/cobol.vim	/^function! s:prevgood(lnum)$/;"	f
preview	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:preview(hunk_diff)$/;"	f
previewCancelWait	cache-plug/fzf/src/constants.go	/^	previewCancelWait = 500 * time.Millisecond$/;"	c
previewChunkDelay	cache-plug/fzf/src/constants.go	/^	previewChunkDelay = 100 * time.Millisecond$/;"	c
previewDelayed	cache-plug/fzf/src/constants.go	/^	previewDelayed    = 500 * time.Millisecond$/;"	c
previewOpts	cache-plug/fzf/src/options.go	/^type previewOpts struct {$/;"	t
previewRequest	cache-plug/fzf/src/terminal.go	/^type previewRequest struct {$/;"	t
previewResult	cache-plug/fzf/src/terminal.go	/^type previewResult struct {$/;"	t
preview_color	cache-plug/vim-polyglot/syntax/dircolors.vim	/^function! s:preview_color(linenr) abort$/;"	f
previewed	cache-plug/fzf/src/terminal.go	/^type previewed struct {$/;"	t
previewer	cache-plug/fzf/src/terminal.go	/^type previewer struct {$/;"	t
previous	cache-plug/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f
prevnonblanknoncomment	cache-plug/vim-polyglot/indent/css.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	cache-plug/vim-polyglot/indent/ld.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	cache-plug/vim-polyglot/indent/scss.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	cache-plug/vim-polyglot/indent/stylus.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	cache-plug/vim-polyglot/indent/tcl.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
printAll	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f
printHeader	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f
printHighlighted	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, colBase tui.ColorPair, colMatch tui.ColorPair, current bool, match bool) int {$/;"	f
printInfo	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f
printItem	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, i int, current bool) {$/;"	f
printList	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f
printPreview	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f
printPreviewDelayed	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) printPreviewDelayed() {$/;"	f
printPrompt	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f
printString	cache-plug/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair) {$/;"	f
print_and	cache-plug/vim-polyglot/scripts/build	/^def print_and(list)$/;"	f	class:rules_to_code.rule_to_code
print_pattern	cache-plug/vim-polyglot/scripts/import_vim	/^def print_pattern(p)$/;"	f
prior_isk	cache-plug/vim-polyglot/syntax/rst.vim	/^    let prior_isk = &l:iskeyword$/;"	v
processTabs	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f
process_added	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_hunk	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_hunk(bufnr, hunk) abort$/;"	f
process_list	cache-plug/vim-polyglot/scripts/build	/^def process_list(list, extras)$/;"	f	class:rules_to_code.rule_to_code.detect_filetypes_str.detect_filetypes
process_modified	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_added	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_removed	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_removed(modifications, from_count, to_count, to_line) abort$/;"	f
process_options_file	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
process_removed	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_removed(modifications, from_count, to_count, to_line) abort$/;"	f
process_rtp	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^func! s:process_rtp(rtp)$/;"	f
product	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:product(lists) abort$/;"	f
progress	cache-plug/vim-polyglot/scripts/build	/^def progress$/;"	f
progressMinDuration	cache-plug/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c
project	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:project(projectPath, cont)$/;"	f
prompt	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:prompt(msg)$/;"	f
protector	cache-plug/fzf/src/protector/protector.go	/^package protector$/;"	p
protector	cache-plug/fzf/src/protector/protector_openbsd.go	/^package protector$/;"	p
puppet#align#AlignHashrockets	cache-plug/vim-polyglot/autoload/puppet/align.vim	/^function! puppet#align#AlignHashrockets(...) abort$/;"	f
puppet#align#IndentLevel	cache-plug/vim-polyglot/autoload/puppet/align.vim	/^function! puppet#align#IndentLevel(lnum)$/;"	f
puppet#align#LinesInBlock	cache-plug/vim-polyglot/autoload/puppet/align.vim	/^function! puppet#align#LinesInBlock(lnum)$/;"	f
puppet#ctags#OptionFile	cache-plug/vim-polyglot/autoload/puppet/ctags.vim	/^function! puppet#ctags#OptionFile()$/;"	f
puppet#ctags#Type	cache-plug/vim-polyglot/autoload/puppet/ctags.vim	/^function! puppet#ctags#Type()$/;"	f
puppet#format#Fallback	cache-plug/vim-polyglot/autoload/puppet/format.vim	/^function! puppet#format#Fallback(start_lnum, end_lnum) abort$/;"	f
puppet#format#Format	cache-plug/vim-polyglot/autoload/puppet/format.vim	/^function! puppet#format#Format() abort$/;"	f
puppet#format#Hashrocket	cache-plug/vim-polyglot/autoload/puppet/format.vim	/^function! puppet#format#Hashrocket(start_lnum, end_lnum) abort$/;"	f
puppet#format#Indention	cache-plug/vim-polyglot/autoload/puppet/format.vim	/^function! puppet#format#Indention(start_lnum, end_lnum) abort$/;"	f
push	cache-plug/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f
push	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
pushd	cache-plug/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
python#utils#fix_qflist	cache-plug/vim-polyglot/autoload/python/utils.vim	/^function! python#utils#fix_qflist() " {{{$/;"	f
pythontips	plugin/python.vim	/^augroup pythontips$/;"	a
queryCache	cache-plug/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t
queryCacheMax	cache-plug/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c
query_path	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! s:query_path(root) abort$/;"	f
quickfix_populate	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:quickfix_populate(data) abort$/;"	f
quickfix_toggle	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:quickfix_toggle(...) abort$/;"	f
quoteEntry	cache-plug/fzf/src/terminal.go	/^func quoteEntry(entry string) string {$/;"	f
quoteEntryCmd	cache-plug/fzf/src/terminal.go	/^func quoteEntryCmd(entry string) string {$/;"	f
quotes	cache-plug/delimitMate/test/autoclose_quotes.vim	/^  let quotes = split(g:delimitMate_quotes, '\\s')$/;"	v
r	plugin/bepo.vim	/^noremap r l$/;"	m
randResult	cache-plug/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f
rangeEllipsis	cache-plug/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c
rdfa_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let rdfa_attributes = {'about': [], 'content': [], 'datatype': [], 'prefix': [], 'profile': [], 'property': [], 'resource': [], 'rel': relrev, 'rev': relrev, 'typeof': [], 'vocab': []}$/;"	v
rdfa_attributes_value	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let rdfa_attributes_value = {$/;"	v
readFiles	cache-plug/fzf/src/reader.go	/^func (r *Reader) readFiles() bool {$/;"	f
readFromCommand	cache-plug/fzf/src/reader.go	/^func (r *Reader) readFromCommand(shell *string, command string) bool {$/;"	f
readFromStdin	cache-plug/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f
readerBufferSize	cache-plug/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c
readerPollIntervalMax	cache-plug/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c
readerPollIntervalMin	cache-plug/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c
readerPollIntervalStep	cache-plug/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c
readonce	cache-plug/fzf/test/test_go.rb	/^  def readonce$/;"	f	class:TestBase
redraw	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) redraw() {$/;"	f
reduce_line	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
referrerpolicy	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let referrerpolicy = ['no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin', 'unsafe-url']$/;"	v
refresh	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) refresh() {$/;"	f
regex_extra	cache-plug/vim-polyglot/ftplugin/sql.vim	/^                let regex_extra = '\\\\w*'$/;"	v
regex_extra	cache-plug/vim-polyglot/ftplugin/sql.vim	/^        let regex_extra = ''$/;"	v
relationship_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let relationship_attributes = {$/;"	v
reload	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^    let reload = 0$/;"	v
reload	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^    let reload = 1$/;"	v
reload	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^let reload = 1$/;"	v
reload	cache-plug/delimitMate/test/autoclose_quotes.vim	/^    let reload = 0$/;"	v
reload	cache-plug/delimitMate/test/autoclose_quotes.vim	/^    let reload = 1$/;"	v
reload	cache-plug/delimitMate/test/autoclose_quotes.vim	/^let reload = 1$/;"	v
relrev	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let relrev = ['chapter', 'contents', 'copyright', 'first', 'glossary', 'help', 'icon', 'index', 'last', 'license', 'meta', 'next', 'p3pv1', 'prev', 'role', 'section', 'stylesheet', 'subsection', 'start', 'top', 'up']$/;"	v
remove	cache-plug/fzf/uninstall	/^remove() {$/;"	f
remove_ansi_sequences	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
remove_continuation	cache-plug/vim-polyglot/indent/make.vim	/^function s:remove_continuation(line)$/;"	f
remove_continuation	cache-plug/vim-polyglot/indent/omake.vim	/^function s:remove_continuation(line)$/;"	f
remove_layout	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
remove_line	cache-plug/fzf/uninstall	/^remove_line() {$/;"	f
remove_signs	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:remove_signs(bufnr, sign_ids, all_signs) abort$/;"	f
renderPreviewSpinner	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewSpinner() {$/;"	f
renderPreviewText	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewText(unchanged bool) {$/;"	f
repair_posix_text	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
repeat	cache-plug/fzf/src/tui/light.go	/^func repeat(r rune, times int) string {$/;"	f
repeat	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:repeat(str,count)$/;"	f
repeated_find	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:repeated_find(ai_mode)$/;"	f
replace	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
replacePlaceholder	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) replacePlaceholder(template string, forcePlus bool, input string, list []*Item) string {$/;"	f
replacePlaceholder	cache-plug/fzf/src/terminal.go	/^func replacePlaceholder(template string, stripAnsi bool, delimiter Delimiter, printsep string, forcePlus bool, query string, allItems []*Item) string {$/;"	f
replace_first	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
repo_bare	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_config	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
repo_dir	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_find	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
repo_git_chomp	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
repo_list	cache-plug/vim-polyglot/autoload/db/adapter/ecto.vim	/^function! s:repo_list() abort$/;"	f
repo_prepare	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_prepare(...) dict abort$/;"	f
repo_rev_parse	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_translate	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
repo_tree	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
repo_user	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
reqClose	cache-plug/fzf/src/terminal.go	/^	reqClose$/;"	c
reqHeader	cache-plug/fzf/src/terminal.go	/^	reqHeader$/;"	c
reqInfo	cache-plug/fzf/src/terminal.go	/^	reqInfo$/;"	c
reqJump	cache-plug/fzf/src/terminal.go	/^	reqJump$/;"	c
reqList	cache-plug/fzf/src/terminal.go	/^	reqList$/;"	c
reqPreviewDelayed	cache-plug/fzf/src/terminal.go	/^	reqPreviewDelayed$/;"	c
reqPreviewDisplay	cache-plug/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c
reqPreviewEnqueue	cache-plug/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c
reqPreviewRefresh	cache-plug/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c
reqPrintQuery	cache-plug/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c
reqPrompt	cache-plug/fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c
reqQuit	cache-plug/fzf/src/terminal.go	/^	reqQuit$/;"	c
reqRedraw	cache-plug/fzf/src/terminal.go	/^	reqRedraw$/;"	c
reqRefresh	cache-plug/fzf/src/terminal.go	/^	reqRefresh$/;"	c
reqReinit	cache-plug/fzf/src/terminal.go	/^	reqReinit$/;"	c
reqReset	cache-plug/fzf/src/matcher.go	/^	reqReset$/;"	c
reqRetry	cache-plug/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c
request	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! s:request(method, args) dict$/;"	f
request_async	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! s:request_async(method, args, cb) dict$/;"	f
require_GetIntrinsic	cache-plug/coc.nvim/build/index.js	/^var require_GetIntrinsic = __commonJS((exports2, module2) => {$/;"	v
require_IsCallable	cache-plug/coc.nvim/build/index.js	/^var require_IsCallable = __commonJS((exports2, module2) => {$/;"	v
require_clean	cache-plug/coc.nvim/build/index.js	/^var require_clean = __commonJS((exports2, module2) => {$/;"	v
require_cmp	cache-plug/coc.nvim/build/index.js	/^var require_cmp = __commonJS((exports2, module2) => {$/;"	v
require_coerce	cache-plug/coc.nvim/build/index.js	/^var require_coerce = __commonJS((exports2, module2) => {$/;"	v
require_comparator	cache-plug/coc.nvim/build/index.js	/^var require_comparator = __commonJS((exports2, module2) => {$/;"	v
require_compare	cache-plug/coc.nvim/build/index.js	/^var require_compare = __commonJS((exports2, module2) => {$/;"	v
require_compare_build	cache-plug/coc.nvim/build/index.js	/^var require_compare_build = __commonJS((exports2, module2) => {$/;"	v
require_compare_loose	cache-plug/coc.nvim/build/index.js	/^var require_compare_loose = __commonJS((exports2, module2) => {$/;"	v
require_constants2	cache-plug/coc.nvim/build/index.js	/^var require_constants2 = __commonJS((exports2, module2) => {$/;"	v
require_debug2	cache-plug/coc.nvim/build/index.js	/^var require_debug2 = __commonJS((exports2, module2) => {$/;"	v
require_deep_extend	cache-plug/coc.nvim/build/index.js	/^var require_deep_extend = __commonJS((exports2, module2) => {$/;"	v
require_define_properties	cache-plug/coc.nvim/build/index.js	/^var require_define_properties = __commonJS((exports2, module2) => {$/;"	v
require_diff	cache-plug/coc.nvim/build/index.js	/^var require_diff = __commonJS((exports2, module2) => {$/;"	v
require_eq	cache-plug/coc.nvim/build/index.js	/^var require_eq = __commonJS((exports2, module2) => {$/;"	v
require_follow_redirects	cache-plug/coc.nvim/build/index.js	/^var require_follow_redirects = __commonJS((exports2, module2) => {$/;"	v
require_function_bind	cache-plug/coc.nvim/build/index.js	/^var require_function_bind = __commonJS((exports2, module2) => {$/;"	v
require_gt	cache-plug/coc.nvim/build/index.js	/^var require_gt = __commonJS((exports2, module2) => {$/;"	v
require_gte	cache-plug/coc.nvim/build/index.js	/^var require_gte = __commonJS((exports2, module2) => {$/;"	v
require_gtr	cache-plug/coc.nvim/build/index.js	/^var require_gtr = __commonJS((exports2, module2) => {$/;"	v
require_has_symbols	cache-plug/coc.nvim/build/index.js	/^var require_has_symbols = __commonJS((exports2, module2) => {$/;"	v
require_header	cache-plug/coc.nvim/build/index.js	/^var require_header = __commonJS((exports2, module2) => {$/;"	v
require_high_level_opt	cache-plug/coc.nvim/build/index.js	/^var require_high_level_opt = __commonJS((exports2, module2) => {$/;"	v
require_identifiers	cache-plug/coc.nvim/build/index.js	/^var require_identifiers = __commonJS((exports2, module2) => {$/;"	v
require_implementation	cache-plug/coc.nvim/build/index.js	/^var require_implementation = __commonJS((exports2, module2) => {$/;"	v
require_implementation2	cache-plug/coc.nvim/build/index.js	/^var require_implementation2 = __commonJS((exports2, module2) => {$/;"	v
require_inc	cache-plug/coc.nvim/build/index.js	/^var require_inc = __commonJS((exports2, module2) => {$/;"	v
require_ini	cache-plug/coc.nvim/build/index.js	/^var require_ini = __commonJS((exports2) => {$/;"	v
require_intersects	cache-plug/coc.nvim/build/index.js	/^var require_intersects = __commonJS((exports2, module2) => {$/;"	v
require_isArguments	cache-plug/coc.nvim/build/index.js	/^var require_isArguments = __commonJS((exports2, module2) => {$/;"	v
require_is_callable	cache-plug/coc.nvim/build/index.js	/^var require_is_callable = __commonJS((exports2, module2) => {$/;"	v
require_iterator	cache-plug/coc.nvim/build/index.js	/^var require_iterator = __commonJS((exports2, module2) => {$/;"	v
require_large_numbers	cache-plug/coc.nvim/build/index.js	/^var require_large_numbers = __commonJS((exports2) => {$/;"	v
require_lt	cache-plug/coc.nvim/build/index.js	/^var require_lt = __commonJS((exports2, module2) => {$/;"	v
require_lte	cache-plug/coc.nvim/build/index.js	/^var require_lte = __commonJS((exports2, module2) => {$/;"	v
require_ltr	cache-plug/coc.nvim/build/index.js	/^var require_ltr = __commonJS((exports2, module2) => {$/;"	v
require_major	cache-plug/coc.nvim/build/index.js	/^var require_major = __commonJS((exports2, module2) => {$/;"	v
require_max_satisfying	cache-plug/coc.nvim/build/index.js	/^var require_max_satisfying = __commonJS((exports2, module2) => {$/;"	v
require_min_satisfying	cache-plug/coc.nvim/build/index.js	/^var require_min_satisfying = __commonJS((exports2, module2) => {$/;"	v
require_min_version	cache-plug/coc.nvim/build/index.js	/^var require_min_version = __commonJS((exports2, module2) => {$/;"	v
require_minimist	cache-plug/coc.nvim/build/index.js	/^var require_minimist = __commonJS((exports2, module2) => {$/;"	v
require_minipass	cache-plug/coc.nvim/build/index.js	/^var require_minipass = __commonJS((exports2, module2) => {$/;"	v
require_minizlib	cache-plug/coc.nvim/build/index.js	/^var require_minizlib = __commonJS((exports2) => {$/;"	v
require_minor	cache-plug/coc.nvim/build/index.js	/^var require_minor = __commonJS((exports2, module2) => {$/;"	v
require_mode_fix	cache-plug/coc.nvim/build/index.js	/^var require_mode_fix = __commonJS((exports2, module2) => {$/;"	v
require_neq	cache-plug/coc.nvim/build/index.js	/^var require_neq = __commonJS((exports2, module2) => {$/;"	v
require_object_keys	cache-plug/coc.nvim/build/index.js	/^var require_object_keys = __commonJS((exports2, module2) => {$/;"	v
require_outside	cache-plug/coc.nvim/build/index.js	/^var require_outside = __commonJS((exports2, module2) => {$/;"	v
require_package2	cache-plug/coc.nvim/build/index.js	/^var require_package2 = __commonJS((exports2, module2) => {$/;"	v
require_parse	cache-plug/coc.nvim/build/index.js	/^var require_parse = __commonJS((exports2, module2) => {$/;"	v
require_patch	cache-plug/coc.nvim/build/index.js	/^var require_patch = __commonJS((exports2, module2) => {$/;"	v
require_pax	cache-plug/coc.nvim/build/index.js	/^var require_pax = __commonJS((exports2, module2) => {$/;"	v
require_prerelease	cache-plug/coc.nvim/build/index.js	/^var require_prerelease = __commonJS((exports2, module2) => {$/;"	v
require_range	cache-plug/coc.nvim/build/index.js	/^var require_range = __commonJS((exports2, module2) => {$/;"	v
require_rc	cache-plug/coc.nvim/build/index.js	/^var require_rc = __commonJS((exports2, module2) => {$/;"	v
require_rcompare	cache-plug/coc.nvim/build/index.js	/^var require_rcompare = __commonJS((exports2, module2) => {$/;"	v
require_read_entry	cache-plug/coc.nvim/build/index.js	/^var require_read_entry = __commonJS((exports2, module2) => {$/;"	v
require_requirePromise	cache-plug/coc.nvim/build/index.js	/^var require_requirePromise = __commonJS((exports2, module2) => {$/;"	v
require_rsort	cache-plug/coc.nvim/build/index.js	/^var require_rsort = __commonJS((exports2, module2) => {$/;"	v
require_satisfies	cache-plug/coc.nvim/build/index.js	/^var require_satisfies = __commonJS((exports2, module2) => {$/;"	v
require_semver	cache-plug/coc.nvim/build/index.js	/^var require_semver = __commonJS((exports2, module2) => {$/;"	v
require_semver2	cache-plug/coc.nvim/build/index.js	/^var require_semver2 = __commonJS((exports2, module2) => {$/;"	v
require_shams	cache-plug/coc.nvim/build/index.js	/^var require_shams = __commonJS((exports2, module2) => {$/;"	v
require_simplify	cache-plug/coc.nvim/build/index.js	/^var require_simplify = __commonJS((exports2, module2) => {$/;"	v
require_sort	cache-plug/coc.nvim/build/index.js	/^var require_sort = __commonJS((exports2, module2) => {$/;"	v
require_strip_json_comments	cache-plug/coc.nvim/build/index.js	/^var require_strip_json_comments = __commonJS((exports2, module2) => {$/;"	v
require_subset	cache-plug/coc.nvim/build/index.js	/^var require_subset = __commonJS((exports2, module2) => {$/;"	v
require_to_comparators	cache-plug/coc.nvim/build/index.js	/^var require_to_comparators = __commonJS((exports2, module2) => {$/;"	v
require_types2	cache-plug/coc.nvim/build/index.js	/^var require_types2 = __commonJS((exports2) => {$/;"	v
require_utils3	cache-plug/coc.nvim/build/index.js	/^var require_utils3 = __commonJS((exports2) => {$/;"	v
require_valid	cache-plug/coc.nvim/build/index.js	/^var require_valid = __commonJS((exports2, module2) => {$/;"	v
require_valid2	cache-plug/coc.nvim/build/index.js	/^var require_valid2 = __commonJS((exports2, module2) => {$/;"	v
require_warn_mixin	cache-plug/coc.nvim/build/index.js	/^var require_warn_mixin = __commonJS((exports2, module2) => {$/;"	v
require_winchars	cache-plug/coc.nvim/build/index.js	/^var require_winchars = __commonJS((exports2, module2) => {$/;"	v
require_write_entry	cache-plug/coc.nvim/build/index.js	/^var require_write_entry = __commonJS((exports2, module2) => {$/;"	v
require_yallist	cache-plug/coc.nvim/build/index.js	/^var require_yallist = __commonJS((exports2, module2) => {$/;"	v
res	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^    let res = term_start(cmd, {$/;"	v
res	cache-plug/coc.nvim/autoload/coc/util.vim	/^    let res = inputlist([a:title] + a:items)$/;"	v
reset	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! s:reset() abort$/;"	f
reset_colors	cache-plug/vim-polyglot/syntax/dircolors.vim	/^function! s:reset_colors() abort$/;"	f
reset_summary	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:reset_summary(bufnr) abort$/;"	f
reset_tick	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! s:reset_tick(bufnr) abort$/;"	f
resizeWindows	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows() {$/;"	f
restart	cache-plug/fzf/src/reader.go	/^func (r *Reader) restart(command string) {$/;"	f
restoreTerminal	cache-plug/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) restoreTerminal() {$/;"	f
restoreTerminal	cache-plug/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) restoreTerminal() error {$/;"	f
restore_fold_state	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:restore_fold_state()$/;"	f
restore_shell	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:restore_shell() abort$/;"	f
restore_view	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:restore_view()$/;"	f
restorehistory	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! s:restorehistory(name, history) abort$/;"	f
returnAppleScriptIndent	cache-plug/vim-polyglot/indent/applescript.vim	/^func! s:returnAppleScriptIndent()$/;"	f
reverse	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
reverseStringArray	cache-plug/fzf/src/terminal.go	/^func reverseStringArray(input []string) []string {$/;"	f
reverse_list	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:reverse_list(opts)$/;"	f
revision	cache-plug/fzf/main.go	/^var revision string = "devel"$/;"	v
rgb	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:rgb(r, g, b) abort$/;"	f
rgb_colour	cache-plug/coc.nvim/autoload/coc/color.vim	/^fun! s:rgb_colour(x, y, z)$/;"	f
rgb_level	cache-plug/coc.nvim/autoload/coc/color.vim	/^fun! s:rgb_level(n)$/;"	f
rgb_number	cache-plug/coc.nvim/autoload/coc/color.vim	/^fun! s:rgb_number(x)$/;"	f
rmcup	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f
role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, dpub_role)$/;"	v
role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, graphic_role)$/;"	v
role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(role, landmark_role)$/;"	v
role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role = extend(widget_role, document_structure)$/;"	v
role	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(role, dpub_role)$/;"	v
role	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(role, landmark_role)$/;"	v
role	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let role = extend(widget_role, document_structure)$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes = {}$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['alert'] = role_attributes['region']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['alertdialog'] = role_attributes['alert'] + role_attributes['dialog']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['application'] = abstract_role['landmark'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['article'] = role_attributes['document'] + role_attributes['region'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['banner'] = abstract_role['landmark'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['button'] = role_attributes['region'] + role_attributes['menuitemcheckbox']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['cell'] = abstract_role['section'] + ['aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['checkbox'] = abstract_role['input'] + ['aria-checked'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['columnheader'] = role_attributes['gridcell'] + abstract_role['sectionhead'] + ['aria-sort']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['combobox'] = abstract_role['select'] + ['aria-expanded', 'aria-required'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['complementary'] = abstract_role['landmark'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['contentinfo'] = abstract_role['landmark'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['default'] = abstract_role['roletype']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['definition'] = abstract_role['section'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['dialog'] = abstract_role['window']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['directory'] = role_attributes['list'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['document'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['feed'] = role_attributes['list']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['figure'] = abstract_role['section'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['form'] = abstract_role['landmark'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['grid'] = abstract_role['composite'] + role_attributes['region'] + ['aria-level', 'aria-multiselectable', 'aria-readonly']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['gridcell'] = abstract_role['section'] + abstract_role['widget']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['group'] = abstract_role['section']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['heading'] = abstract_role['sectionhead'] + ['aria-level'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['img'] = abstract_role['section'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['link'] = abstract_role['widget'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['list'] = role_attributes['region'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['listbox'] = role_attributes['list'] + abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['listitem'] = abstract_role['section']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['log'] = role_attributes['region'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['main'] = abstract_role['landmark'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['marquee'] = role_attributes['region'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['math'] = abstract_role['section'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menu'] =  role_attributes['list'] + abstract_role['select'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menubar'] = role_attributes['menu'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitem'] = abstract_role['input'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitemcheckbox'] = role_attributes['menuitem'] + role_attributes['checkbox']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['menuitemradio'] = role_attributes['menuitemcheckbox'] + role_attributes['radio']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['navigation'] = abstract_role['landmark'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['none'] = role_attributes['presentation']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['note'] = abstract_role['section'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['option'] = abstract_role['input'] + ['aria-checked', 'aria-posinset', 'aria-selected', 'aria-setsize']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['presentation'] = abstract_role['structure']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['progressbar'] = abstract_role['widget'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['radio'] = role_attributes['checkbox'] + role_attributes['option']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['radiogroup'] = abstract_role['select'] + ['aria-required']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['region'] = abstract_role['section']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['row'] = role_attributes['group'] + ['aria-level', 'aria-selected']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['rowheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['scrollbar'] = abstract_role['range'] + ['aria-controls', 'aria-orientation', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['search'] = abstract_role['landmark']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['searchbox'] = role_attributes['textbox']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['separator'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['slider'] = abstract_role['range'] + ['aria-valuemax', 'aria-valuemin', 'aria-valuenow']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['spinbutton'] = abstract_role['composite'] + abstract_role['range'] + ['aria-required'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['status'] = abstract_role['composite'] + role_attributes['region']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['switch'] = role_attributes['checkbox']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tab'] = abstract_role['sectionhead'] + abstract_role['widget'] + ['aria-selected']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['table'] = abstract_role['section'] + ['aria-colcount', 'aria-rowcount']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tablist'] = abstract_role['composite'] + role_attributes['directory']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tabpanel'] = role_attributes['region']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['term'] = abstract_role['section']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['textbox'] = abstract_role['input'] + ['aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['timer'] = role_attributes['status'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['toolbar'] = role_attributes['group'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tooltip'] = abstract_role['section'] $/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['tree'] = abstract_role['select'] + ['aria-multiselectable', 'aria-required']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['treegrid'] = role_attributes['grid'] + role_attributes['tree']$/;"	v
role_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let role_attributes['treeitem'] = role_attributes['listitem'] + role_attributes['option']$/;"	v
rquote	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:rquote(char) "{{{$/;"	f
rubout	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f
ruby_minlines	cache-plug/vim-polyglot/syntax/ruby.vim	/^    let ruby_minlines = 500$/;"	v
rubycomplete#Complete	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
rubycomplete#Init	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
rule_to_code	cache-plug/vim-polyglot/scripts/build	/^def rule_to_code(rule)$/;"	f	class:rules_to_code
rules_to_code	cache-plug/vim-polyglot/scripts/build	/^def rules_to_code(rules)$/;"	f
runVimTests	cache-plug/delimitMate/test/_setup.vim	/^let runVimTests = expand('<sfile>:p:h').'\/build\/runVimTests'$/;"	v
run_cmd	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! s:run_cmd(cmd) abort$/;"	f
run_lli	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:run_lli(...) abort$/;"	f
run_script	cache-plug/vim-polyglot/scripts/test	/^def run_script(src)$/;"	f
run_spec	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^function! s:run_spec(root, path, ...) abort$/;"	f
run_syntax_fold	cache-plug/vim-polyglot/syntax/crystal.vim	/^function! s:run_syntax_fold(args) abort$/;"	f
run_syntax_fold	cache-plug/vim-polyglot/syntax/ruby.vim	/^function! s:run_syntax_fold(args) abort$/;"	f
run_vimscript	cache-plug/vim-polyglot/scripts/test	/^def run_vimscript(src)$/;"	f
rust	cache-plug/vim-polyglot/after/syntax/rust.vim	/^    augroup rust.vim.after$/;"	a
rust	cache-plug/vim-polyglot/ftplugin/rust.vim	/^    augroup rust.vim.DelimitMate$/;"	a
rust	cache-plug/vim-polyglot/ftplugin/rust.vim	/^augroup rust.vim.PreWrite$/;"	a
rust#AppendCmdLine	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#AppendCmdLine(text)$/;"	f
rust#CompleteExpand	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#CompleteExpand(lead, line, pos)$/;"	f
rust#Emit	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#Emit(type, args)$/;"	f
rust#Expand	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#Expand(bang, args)$/;"	f
rust#GetConfigVar	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#GetConfigVar(name, default)$/;"	f
rust#IncludeExpr	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#IncludeExpr(fname) abort$/;"	f
rust#Jump	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#Jump(mode, function) range$/;"	f
rust#Load	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#Load()$/;"	f
rust#Play	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#Play(count, line1, line2, ...) abort$/;"	f
rust#Run	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#Run(bang, args)$/;"	f
rust#Test	cache-plug/vim-polyglot/autoload/rust.vim	/^function! rust#Test(mods, winsize, all, options) abort$/;"	f
rust#debugging#Info	cache-plug/vim-polyglot/autoload/rust/debugging.vim	/^function! rust#debugging#Info() abort$/;"	f
rust#debugging#InfoToClipboard	cache-plug/vim-polyglot/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToClipboard() abort$/;"	f
rust#debugging#InfoToFile	cache-plug/vim-polyglot/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToFile(filename) abort$/;"	f
rust#delimitmate#onMap	cache-plug/vim-polyglot/autoload/rust/delimitmate.vim	/^function! rust#delimitmate#onMap() abort$/;"	f
rust#delimitmate#onUnmap	cache-plug/vim-polyglot/autoload/rust/delimitmate.vim	/^function! rust#delimitmate#onUnmap() abort$/;"	f
rust#tags#IsUCtags	cache-plug/vim-polyglot/autoload/rust/tags.vim	/^function! rust#tags#IsUCtags() abort$/;"	f
rustfmt#Cmd	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#Cmd()$/;"	f
rustfmt#DetectVersion	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#DetectVersion()$/;"	f
rustfmt#Format	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#Format()$/;"	f
rustfmt#FormatRange	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#FormatRange(line1, line2)$/;"	f
rustfmt#Load	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#Load()$/;"	f
rustfmt#PreWrite	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^function! rustfmt#PreWrite()$/;"	f
s	cache-plug/vim-polyglot/syntax/xpm.vim	/^	 let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	cache-plug/vim-polyglot/syntax/xpm.vim	/^   let s = matchstr(getline(i), '".\\{-1,}"')$/;"	v
s	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	cache-plug/vim-polyglot/syntax/xpm2.vim	/^	let s = substitute(s, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
s	cache-plug/vim-polyglot/syntax/xpm2.vim	/^      let s = matchstr(s, "^[^\\!]*")$/;"	v
s	cache-plug/vim-polyglot/syntax/xpm2.vim	/^    let s = getline(i)$/;"	v
s	plugin/bepo.vim	/^noremap s k$/;"	m
s:AdaBlockStart	cache-plug/vim-polyglot/indent/ada.vim	/^   let s:AdaBlockStart = '^\\s*\\(if\\>\\|while\\>\\|else\\>\\|elsif\\>\\|loop\\>\\|for\\>.*\\<\\(loop\\|use\\)\\>\\|declare\\>\\|begin\\>\\|type\\>.*\\<is\\>[^;]*$\\|\\(type\\>.*\\)\\=\\<record\\>\\|procedure\\>\\|function\\>\\|accept\\>\\|do\\>\\|task\\>\\|package\\>\\|project\\>\\|then\\>\\|when\\>\\|is\\>\\)'$/;"	v
s:AdaBlockStart	cache-plug/vim-polyglot/indent/ada.vim	/^   let s:AdaBlockStart = '^\\s*\\(if\\>\\|while\\>\\|else\\>\\|elsif\\>\\|loop\\>\\|for\\>.*\\<\\(loop\\|use\\)\\>\\|declare\\>\\|begin\\>\\|type\\>.*\\<is\\>[^;]*$\\|\\(type\\>.*\\)\\=\\<record\\>\\|procedure\\>\\|function\\>\\|accept\\>\\|do\\>\\|task\\>\\|package\\>\\|then\\>\\|when\\>\\|is\\>\\)'$/;"	v
s:BEGIN_BLOCK	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK = s:BEGIN_BLOCK_KEYWORD . '\\|' . s:COMPOUND_EXPRESSION$/;"	v
s:BEGIN_BLOCK_KEYWORD	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK_KEYWORD = '\\C^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:BEGIN_BLOCK_OP	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:BEGIN_BLOCK_OP = '[([{:=]$'$/;"	v
s:BRACKET_CONTINUATION	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:BRACKET_CONTINUATION = '^\\s*[}\\])]\\s*' . s:CONTINUATION_OP$/;"	v
s:BRACKET_PAIRS	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:BRACKET_PAIRS = {']': '\\[', '}': '{', ')': '('}$/;"	v
s:BREAK_BLOCK_OP	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:BREAK_BLOCK_OP = '\\C^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:C	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^let s:C = s:V.import('ColorEcho')$/;"	v
s:COLORS	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:COLORS = {$/;"	v
s:COMPOUND_ASSIGNMENT	cache-plug/vim-polyglot/indent/ls.vim	/^let s:COMPOUND_ASSIGNMENT = '[:=]\\s*\\%(if\\|unless\\|for\\|while\\|until\\|'$/;"	v
s:COMPOUND_ASSIGNMENT	cache-plug/vim-polyglot/indent/moon.vim	/^let s:COMPOUND_ASSIGNMENT = '[:=]\\s*\\%(if\\|unless\\|for\\|while\\|'$/;"	v
s:COMPOUND_EXPRESSION	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:COMPOUND_EXPRESSION = '\\C\\%([^-]-\\|[^+]+\\|[^\/]\/\\|[:=*%&|^<>]\\)\\s*'$/;"	v
s:CONTAINED_THEN	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:CONTAINED_THEN = '\\C[(\\[].\\{-}\\<then\\>.\\{-\\}[)\\]]'$/;"	v
s:CONTINUATION	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:CONTINUATION = s:CONTINUATION_OP . '\\|' . s:BEGIN_BLOCK_OP$/;"	v
s:CONTINUATION	cache-plug/vim-polyglot/indent/ls.vim	/^let s:CONTINUATION = '\\<\\%(is\\|isnt\\|and\\|or\\|do\\)\\>$'$/;"	v
s:CONTINUATION	cache-plug/vim-polyglot/indent/moon.vim	/^let s:CONTINUATION = '\\<\\%(is\\|isnt\\|and\\|or\\)\\>$'$/;"	v
s:CONTINUATION_BLOCK	cache-plug/vim-polyglot/indent/ls.vim	/^let s:CONTINUATION_BLOCK = '[([{:=]$'$/;"	v
s:CONTINUATION_BLOCK	cache-plug/vim-polyglot/indent/moon.vim	/^let s:CONTINUATION_BLOCK = '[([{:=]$'$/;"	v
s:CONTINUATION_OP	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:CONTINUATION_OP = '\\C\\%(\\<\\%(is\\|isnt\\|and\\|or\\)\\>\\|'$/;"	v
s:ColonEnd	cache-plug/vim-polyglot/indent/occam.vim	/^let s:ColonEnd = '\\(--.*\\)\\@<!:\\s*\\(--.*\\)\\=$'$/;"	v
s:ColonIndent	cache-plug/vim-polyglot/indent/occam.vim	/^let s:ColonIndent = '\\(--.*\\)\\@<!\\<PROC\\>'$/;"	v
s:ColonNonColonEndIndent	cache-plug/vim-polyglot/indent/occam.vim	/^let s:ColonNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\)\\s\\+TYPE\\|FUNCTION\\)\\>'$/;"	v
s:ColonStart	cache-plug/vim-polyglot/indent/occam.vim	/^let s:ColonStart = '^\\s*:\\s*\\(--.*\\)\\=$'$/;"	v
s:CommentLine	cache-plug/vim-polyglot/indent/occam.vim	/^let s:CommentLine = '^\\s*--'$/;"	v
s:Cpath	cache-plug/vim-polyglot/syntax/lex.vim	/^   let s:Cpath= fnameescape(s:Cpath)$/;"	v
s:Cpath	cache-plug/vim-polyglot/syntax/lex.vim	/^let s:Cpath= fnameescape(expand("<sfile>:p:h")."\/cpp.vim")$/;"	v
s:Cpath	cache-plug/vim-polyglot/syntax/yacc.vim	/^   let s:Cpath= fnameescape(s:Cpath)$/;"	v
s:Cpath	cache-plug/vim-polyglot/syntax/yacc.vim	/^let s:Cpath= fnameescape(expand("<sfile>:p:h").(exists("g:yacc_uses_cpp")? "\/cpp.vim" : "\/c.vim"))$/;"	v
s:DEFAULT_ERROR	cache-plug/vim-prettier/autoload/prettier/logging/error.vim	/^let s:DEFAULT_ERROR = get(s:, 'PARSING_ERROR')$/;"	v
s:DEFAULT_LEVEL	cache-plug/vim-polyglot/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = '-1'$/;"	v
s:DEFAULT_LEVEL	cache-plug/vim-polyglot/indent/coffee.vim	/^  let s:DEFAULT_LEVEL = 'indent(prevnlnum)'$/;"	v
s:DOT_ACCESS	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:DOT_ACCESS	cache-plug/vim-polyglot/indent/ls.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:DOT_ACCESS	cache-plug/vim-polyglot/indent/moon.vim	/^let s:DOT_ACCESS = '^\\.'$/;"	v
s:ELSE_COND	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:ELSE_COND = '\\C^\\s*else\\s\\+\\<\\%(if\\|unless\\)\\>'$/;"	v
s:ERRORS	cache-plug/vim-prettier/autoload/prettier/logging/error.vim	/^let s:ERRORS = {$/;"	v
s:ES	cache-plug/vim-polyglot/indent/vhdl.vim	/^let s:ES = '\\s*\\%(--.*\\)\\=$'$/;"	v
s:ESCAPEDCHARS	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^  let s:ESCAPEDCHARS = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:ESCAPEDCHARS	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^  let s:ESCAPEDCHARS = " \\t\\n\\"#%'*<?`|"$/;"	v
s:FALSE	cache-plug/vim-polyglot/indent/autohotkey.vim	/^let s:FALSE = 0$/;"	v
s:FNAMEESCAPEPATTERN	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^let s:FNAMEESCAPEPATTERN = '\\\\\\ze[' . escape(s:ESCAPEDCHARS, ']^-\\') . ']'$/;"	v
s:FUNCTION	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:FUNCTION = '[-=]>$'$/;"	v
s:Ferm_SpecialDelimiters	cache-plug/vim-polyglot/syntax/ferm.vim	/^    let s:Ferm_SpecialDelimiters = 0$/;"	v
s:Ferm_SpecialDelimiters	cache-plug/vim-polyglot/syntax/ferm.vim	/^    let s:Ferm_SpecialDelimiters = g:Ferm_SpecialDelimiters$/;"	v
s:FirstLevelIndent	cache-plug/vim-polyglot/indent/occam.vim	/^let s:FirstLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\|PAR\\|SEQ\\|PRI\\s\\+PAR\\|WHILE\\|VALOF\\|CLAIM\\|FORKING\\)\\>\\|\\(--.*\\)\\@<!\\(\\<PROC\\>\\|??\\|\\<CASE\\>\\s*\\(--.*\\)\\=\\_$\\)'$/;"	v
s:FirstLevelNonColonEndIndent	cache-plug/vim-polyglot/indent/occam.vim	/^let s:FirstLevelNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\)\\s\\+TYPE\\|FUNCTION\\)\\>'$/;"	v
s:Fold_Collate	cache-plug/vim-polyglot/autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<begin\\>$\\|'$/;"	v
s:Fold_Collate	cache-plug/vim-polyglot/autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<exception\\>$\\|'$/;"	v
s:Fold_Collate	cache-plug/vim-polyglot/autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<is\\>$\\|'$/;"	v
s:Fold_Collate	cache-plug/vim-polyglot/autoload/ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<private\\>$\\|'$/;"	v
s:Fold_Collate	cache-plug/vim-polyglot/autoload/ada.vim	/^   let s:Fold_Collate .= '--\\)'$/;"	v
s:Fold_Collate	cache-plug/vim-polyglot/autoload/ada.vim	/^   let s:Fold_Collate = '^\\([;)]*$\\|'$/;"	v
s:HELPHISTORY	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^let s:HELPHISTORY = []$/;"	v
s:HELPPROMPT	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^let s:HELPPROMPT = 'help?> '$/;"	v
s:INDENT_AFTER_KEYWORD	cache-plug/vim-polyglot/indent/ls.vim	/^let s:INDENT_AFTER_KEYWORD = '^\\%(if\\|unless\\|else\\|for\\|while\\|until\\|'$/;"	v
s:INDENT_AFTER_KEYWORD	cache-plug/vim-polyglot/indent/moon.vim	/^let s:INDENT_AFTER_KEYWORD = '^\\%(if\\|unless\\|else\\|for\\|while\\|with\\|elseif\\|'$/;"	v
s:INDENT_AFTER_OPERATOR	cache-plug/vim-polyglot/indent/ls.vim	/^let s:INDENT_AFTER_OPERATOR = '\\%([([{:=]\\|[-=]>\\)$'$/;"	v
s:INDENT_AFTER_OPERATOR	cache-plug/vim-polyglot/indent/moon.vim	/^let s:INDENT_AFTER_OPERATOR = '\\%([([{:=]\\|[-=]>\\)$'$/;"	v
s:IS_WINDOWS	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^let s:IS_WINDOWS = has('win32')$/;"	v
s:J	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^  let s:J = s:V.import('Web.JSON')$/;"	v
s:KEYWORDPATTERN	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^let s:KEYWORDPATTERN = '\\m@\\?\\h\\k*!\\?'$/;"	v
s:KEYWORD_PAIRS	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:KEYWORD_PAIRS = [$/;"	v
s:KIND_BLOCK_FOLLOW	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^let s:KIND_BLOCK_FOLLOW = 1$/;"	v
s:KIND_BLOCK_PREC	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^let s:KIND_BLOCK_PREC = 0$/;"	v
s:KIND_FUNC_BEGIN	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^let s:KIND_FUNC_BEGIN = 2$/;"	v
s:KIND_FUNC_END	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^let s:KIND_FUNC_END = 3$/;"	v
s:MAX_LOOKBACK	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:MAX_LOOKBACK	cache-plug/vim-polyglot/indent/ls.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:MAX_LOOKBACK	cache-plug/vim-polyglot/indent/moon.vim	/^let s:MAX_LOOKBACK = 50$/;"	v
s:NC	cache-plug/vim-polyglot/indent/vhdl.vim	/^let s:NC = '\\%(--.*\\)\\@<!'$/;"	v
s:NE	cache-plug/vim-polyglot/indent/vhdl.vim	/^let s:NE = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:NODOCPATTERN	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^let s:NODOCPATTERN = '\\C\\VNo documentation found.'$/;"	v
s:OUTDENT_AFTER	cache-plug/vim-polyglot/indent/ls.vim	/^let s:OUTDENT_AFTER = '^\\%(return\\|break\\|continue\\|throw\\)\\>'$/;"	v
s:OUTDENT_AFTER	cache-plug/vim-polyglot/indent/moon.vim	/^let s:OUTDENT_AFTER = '^\\%(return\\|break\\)\\>'$/;"	v
s:P	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^let s:P = s:V.import('Process')$/;"	v
s:POSTFIX_CONDITION	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:POSTFIX_CONDITION = '\\C\\S\\s\\+\\zs\\<\\%(if\\|unless\\|when\\|while\\|until\\)\\>'$/;"	v
s:POSTFIX_CONDITION	cache-plug/vim-polyglot/indent/ls.vim	/^let s:POSTFIX_CONDITION = '\\S\\s\\+\\zs\\<\\%(if\\|unless\\)\\>'$/;"	v
s:POSTFIX_CONDITION	cache-plug/vim-polyglot/indent/moon.vim	/^let s:POSTFIX_CONDITION = '\\S\\s\\+\\zs\\<\\%(if\\|unless\\)\\>'$/;"	v
s:PREFIX_MSG	cache-plug/vim-prettier/autoload/prettier/logging/error.vim	/^let s:PREFIX_MSG = 'Prettier: '$/;"	v
s:PS	cache-plug/vim-polyglot/ftplugin/purescript.vim	/^let s:PS = []$/;"	v
s:REPL_SEARCH	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^  let s:REPL_SEARCH = 'Base.Docs.repl_search'$/;"	v
s:REPL_SEARCH	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^  let s:REPL_SEARCH = 'import REPL.repl_search; repl_search'$/;"	v
s:RIndent	cache-plug/vim-polyglot/indent/rmd.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	cache-plug/vim-polyglot/indent/rnoweb.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	cache-plug/vim-polyglot/indent/rrst.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:ROOT_DIR	cache-plug/vim-prettier/autoload/prettier/resolver/executable.vim	/^let s:ROOT_DIR = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:ReferenceName	cache-plug/vim-polyglot/syntax/rst.vim	/^let s:ReferenceName = '[[:alnum:]]\\%([-_.:+]\\?[[:alnum:]]\\+\\)*'$/;"	v
s:SINGLE_LINE_ELSE	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:SINGLE_LINE_ELSE = '\\C^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:SINGLE_LINE_ELSE	cache-plug/vim-polyglot/indent/ls.vim	/^let s:SINGLE_LINE_ELSE = '^else\\s\\+\\%(\\<\\%(if\\|unless\\)\\>\\)\\@!'$/;"	v
s:SINGLE_LINE_ELSE	cache-plug/vim-polyglot/indent/moon.vim	/^let s:SINGLE_LINE_ELSE = '^else\\s\\+\\%(\\<\\%(if\\)\\>\\)\\@!'$/;"	v
s:SNR	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val])) . "]"'), '')$/;"	v
s:SQLBlockEnd	cache-plug/vim-polyglot/indent/pgsql.vim	/^let s:SQLBlockEnd = '^\\s*\\(end\\)\\>'$/;"	v
s:SQLBlockStart	cache-plug/vim-polyglot/indent/pgsql.vim	/^let s:SQLBlockStart = '^\\s*\\%('.$/;"	v
s:SYNTAX_COMMENT	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_COMMENT = 'coffee\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_COMMENT	cache-plug/vim-polyglot/indent/moon.vim	/^let s:SYNTAX_COMMENT = 'moon\\%(Comment\\|BlockComment\\|HeregexComment\\)'$/;"	v
s:SYNTAX_STRING	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_STRING = 'coffee\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_STRING	cache-plug/vim-polyglot/indent/moon.vim	/^let s:SYNTAX_STRING = 'moon\\%(String\\|AssignString\\|Embed\\|Regex\\|Heregex\\|'$/;"	v
s:SYNTAX_STRING_COMMENT	cache-plug/vim-polyglot/indent/coffee.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:SYNTAX_STRING_COMMENT	cache-plug/vim-polyglot/indent/moon.vim	/^let s:SYNTAX_STRING_COMMENT = s:SYNTAX_STRING . '\\|' . s:SYNTAX_COMMENT$/;"	v
s:SecondLevelIndent	cache-plug/vim-polyglot/indent/occam.vim	/^let s:SecondLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\)\\>\\|\\(--.*\\)\\@<!?\\s*\\<CASE\\>\\s*\\(--.*\\)\\=\\_$'$/;"	v
s:SecondLevelNonColonEndIndent	cache-plug/vim-polyglot/indent/occam.vim	/^let s:SecondLevelNonColonEndIndent = '\\(--.*\\)\\@<!\\<\\(CHAN\\|DATA\\)\\s\\+TYPE\\>'$/;"	v
s:ShiftWidth	cache-plug/vim-polyglot/indent/coffee.vim	/^  let s:ShiftWidth = function('shiftwidth')$/;"	v
s:TRUE	cache-plug/vim-polyglot/indent/autohotkey.vim	/^let s:TRUE = !0$/;"	v
s:TYPE	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': type([])}$/;"	v
s:TYPE_DICT	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
s:TeXIndent	cache-plug/vim-polyglot/indent/rnoweb.vim	/^  let s:TeXIndent = function("s:NoTeXIndent")$/;"	v
s:TeXIndent	cache-plug/vim-polyglot/indent/rnoweb.vim	/^  let s:TeXIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:V	cache-plug/vim-polyglot/autoload/crystal_lang.vim	/^let s:V = vital#crystal#new()$/;"	v
s:VERSION	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^let s:VERSION = s:version()$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital = {}$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
s:Vital	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
s:_	cache-plug/lightline.vim/autoload/lightline.vim	/^let s:_ = 1 " 1: uninitialized, 2: disabled$/;"	v
s:_bounder	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:_bounder = s:SimplifyToAssumeAllPrintable('\\%([[\\]{}, \\t]\\@!\\p\\)')$/;"	v
s:_collection	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:_collection = '[^\\@!\\(\\%(\\\\\\.\\|\\[^\\\\\\]]\\)\\+\\)]'$/;"	v
s:_lightline	cache-plug/lightline.vim/autoload/lightline.vim	/^let s:_lightline = {$/;"	v
s:_neg_collection	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:_neg_collection = '[^\\(\\%(\\\\\\.\\|\\[^\\\\\\]]\\)\\+\\)]'$/;"	v
s:_plugin_name	cache-plug/vim-polyglot/autoload/vital/_crystal.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
s:_s	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_unify_path_cache	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^  let s:_unify_path_cache = {}$/;"	v
s:access_modifier_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:activate	cache-plug/coc.nvim/autoload/coc/util.vim	/^  let s:activate = 'activate'$/;"	v
s:activate	cache-plug/coc.nvim/autoload/coc/util.vim	/^let s:activate = ""$/;"	v
s:activated	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^let s:activated = 0$/;"	v
s:added_db_files	cache-plug/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addr_other	cache-plug/vim-fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') ? '-addr=other' : ''$/;"	v
s:addr_tabs	cache-plug/vim-fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	cache-plug/vim-fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:alias_pattern	cache-plug/vim-polyglot/syntax/rst.vim	/^    let s:alias_pattern = ''$/;"	v
s:aliases	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:aliases = {}$/;"	v
s:all_delims	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:all_delims = s:plain_delims + s:bracketing_delims$/;"	v
s:all_tokens	cache-plug/vim-polyglot/indent/erlang.vim	/^let s:all_tokens = {}$/;"	v
s:alpha_metaops	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:alpha_metaops = [$/;"	v
s:alpha_metaops_or	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:alpha_metaops_or = join(s:temp, "\\\\|")$/;"	v
s:annot_file_list	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  let s:annot_file_list = {}$/;"	v
s:annotationMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^let s:annotationMatcher = '@[A-Za-z._]\\+\\s\\+'$/;"	v
s:anon_func_end	cache-plug/vim-polyglot/indent/lua.vim	/^let s:anon_func_end = '\\<end\\%(\\s*[)}]\\)\\+'$/;"	v
s:anon_func_start	cache-plug/vim-polyglot/indent/lua.vim	/^let s:anon_func_start = '\\S\\+\\s*[({].*\\<function\\s*(.*)\\s*$'$/;"	v
s:ansi	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cyan': 36}$/;"	v
s:ant_cpo_save	cache-plug/vim-polyglot/syntax/ant.vim	/^let s:ant_cpo_save = &cpo$/;"	v
s:app	cache-plug/coc.nvim/autoload/coc/util.vim	/^  let s:app = "MacVim"$/;"	v
s:app	cache-plug/coc.nvim/autoload/coc/util.vim	/^  let s:app = "System Events"$/;"	v
s:app	cache-plug/coc.nvim/autoload/coc/util.vim	/^  let s:app = "Terminal"$/;"	v
s:app	cache-plug/coc.nvim/autoload/coc/util.vim	/^  let s:app = "iTerm2"$/;"	v
s:aqua	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:aqua = [ '#00ffff', 14 ]$/;"	v
s:aqua	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:aqua = '#3e999f'$/;"	v
s:aqua	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:aqua = '#3e999f'$/;"	v
s:archs	cache-plug/vim-polyglot/syntax/debcontrol.vim	/^let s:archs = [$/;"	v
s:array_entry	cache-plug/vim-polyglot/indent/ansible.vim	/^let s:array_entry = '\\v^\\s*-\\s' " - foo$/;"	v
s:assert	cache-plug/lightline.vim/test/autocmd.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/concatenate.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/error.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/expand.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/highlight.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/link.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/mode.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/onetab.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/popup.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/quickfix.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/subseparator.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/tabline.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/tabs.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/toggle.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	cache-plug/lightline.vim/test/uniq.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assignment_rx	cache-plug/vim-polyglot/indent/make.vim	/^let s:assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\==\\s*\\zs.*\\\\$'$/;"	v
s:assignment_rx	cache-plug/vim-polyglot/indent/omake.vim	/^let s:assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\==\\s*\\zs.*\\\\$'$/;"	v
s:attr	cache-plug/vim-polyglot/syntax/svelte.vim	/^  let s:attr = '\\(lang\\|type\\)=\\("\\|''\\)[^\\2]*' . s:language.name . '[^\\2]*\\2'$/;"	v
s:attr_pattern	cache-plug/vim-polyglot/syntax/vue.vim	/^  let s:attr_pattern = has_key(s:language, 'attr_pattern') ? s:language.attr_pattern : s:attr('lang', s:language.name)$/;"	v
s:attributes	cache-plug/vim-polyglot/indent/haml.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:attributes	cache-plug/vim-polyglot/indent/pug.vim	/^let s:attributes = '\\%((.\\{-\\})\\)'$/;"	v
s:attributes	cache-plug/vim-polyglot/indent/slim.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:attributes	cache-plug/vim-polyglot/indent/slime.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:available	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:available = has('nvim') || ($/;"	v
s:b	cache-plug/vim-buftabline/plugin/buftabline.vim	/^	let s:b = s:n == -1 ? -1 : s:n - 1$/;"	v
s:background	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:background = '#444444'$/;"	v
s:background	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:background = '#F5F5F5'$/;"	v
s:backslash_continuation_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:backslash_continuation_regex = '%\\@<!\\\\\\s*$'$/;"	v
s:bakregex	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:bakregex=''$/;"	v
s:base	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^let s:base = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base0 = '#666666'$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base0 = '#909090'$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base0 = '#ffffff'$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base0 = '#949494'$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base0 = '#777777'$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base0 = '#e6e1cf'$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base0 = '#5C6773'$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base0 = '#d9d7ce'$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base0 = [ '#839496', s:cuicolors.base0[s:cuiindex] ]$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base0	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base0 = [ '#808080', 244 ]$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base00 = '#808080'$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base00 = '#666666'$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base00 = '#6060df'$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base00 = '#767676'$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base00 = '#666666'$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base00 = '#14191f'$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base00 = '#FFFFFF'$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base00 = '#272d38'$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base00 = [ '#657b83', s:cuicolors.base00[s:cuiindex] ]$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base00	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base00 = [ '#666666', 242  ]$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base01 = '#b4b4b4'$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base01 = '#555555'$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base01 = '#6060af'$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base01 = '#606060'$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base01 = '#555555'$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base01 = '#14191f'$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base01 = '#FFFFFF'$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base01 = '#272d38'$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base01 = [ '#586e75', s:cuicolors.base01[s:cuiindex] ]$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base01	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base01 = [ '#585858', 240 ]$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base02 = '#c8c8c8'$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base02 = '#434343'$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base02 = '#606087'$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base02 = '#4e4e4e'$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base02 = '#444444'$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base02 = '#0f1419'$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base02 = '#FAFAFA'$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base02 = '#212733'$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base02 = [ '#30302c', 236 ]$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base02 = [ '#30302c', 236 ]$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base02 = [ '#073642', s:cuicolors.base02[s:cuiindex] ]$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base02 = [ '#30302c', 236 ]$/;"	v
s:base02	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base02 = [ '#444444', 238 ]$/;"	v
s:base023	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base023 = '#dfdfdf'$/;"	v
s:base023	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base023 = '#303030'$/;"	v
s:base023	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base023 = '#202087'$/;"	v
s:base023	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base023 = '#262626'$/;"	v
s:base023	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base023 = '#333333'$/;"	v
s:base023	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base023 = '#0f1419'$/;"	v
s:base023	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base023 = '#FAFAFA'$/;"	v
s:base023	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base023 = '#212733'$/;"	v
s:base023	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base023 = [ '#353535', 236 ]$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base03 = '#fafafa'$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base03 = '#1d1f21'$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base03 = '#002451'$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base03 = '#12124c'$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base03 = '#2d2d2d'$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base03 = '#e6b673'$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base03 = '#E6B673'$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base03 = '#ffc44c'$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base03 = [ '#002b36', s:cuicolors.base03[s:cuiindex] ]$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base03	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base03 = [ '#242424', 235 ]$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base1 = '#555555'$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base1 = '#a0a0a0'$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base1 = '#ffffff'$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base1 = '#b2b2b2'$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base1 = '#999999'$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base1 = '#e6e1cf'$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base1 = '#5C6773'$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base1 = '#d9d7ce'$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base1 = [ '#93a1a1', s:cuicolors.base1[s:cuiindex] ]$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base1	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base1 = [ '#969696', 247 ]$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base2 = '#4f4f4f'$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base2 = '#bababa'$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base2 = '#ffffff'$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base2 = '#c6c6c6'$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base2 = '#aaaaaa'$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base2 = '#3e4b59'$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base2 = '#828C99'$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base2 = '#607080'$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base2 = [ '#eee8d5', s:cuicolors.base2[s:cuiindex] ]$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base2	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base2 = [ '#a8a8a8', 248 ]$/;"	v
s:base23	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base23 = '#ffffff'$/;"	v
s:base23	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base23 = '#d0d0d0'$/;"	v
s:base23	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base23 = '#bbbbbb'$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base3 = '#4d4d4c'$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base3 = '#c5c8c6'$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base3 = '#ffffff'$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base3 = '#eaeaea'$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base3 = '#cccccc'$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base3 = '#e6e1cf'$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base3 = '#5C6773'$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base3 = '#d9d7ce'$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base3 = [ '#fdf6e3', s:cuicolors.base3[s:cuiindex] ]$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:base3	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base3 = [ '#d0d0d0', 252 ]$/;"	v
s:baseIndentExpr	cache-plug/vim-polyglot/indent/twig.vim	/^let s:baseIndentExpr=&indentexpr$/;"	v
s:base_dir	cache-plug/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:beflet	cache-plug/vim-polyglot/indent/ocaml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|<-\\|=\\|;\\|(\\)\\s*$'$/;"	v
s:beflet	cache-plug/vim-polyglot/indent/sml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|;\\)\\s*$'$/;"	v
s:beginBlock	cache-plug/vim-polyglot/indent/octave.vim	/^let s:beginBlock = ['for', 'parfor', 'function', 'if', 'switch',$/;"	v
s:bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:bg     = '#263238'$/;"	v
s:bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:bg     = '#ffffff'$/;"	v
s:bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:bg     = '#263238'$/;"	v
s:bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:bg     = '#ffffff'$/;"	v
s:bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg    = [ '#282c34', 235 ]$/;"	v
s:bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg    = [ '#fafafa', 255 ]$/;"	v
s:bg	cache-plug/vim-polyglot/syntax/tmux.vim	/^        let s:bg = (!s:i || s:i == 16 || (s:i > 231 && s:i < 235)) ? 15 : "none"$/;"	v
s:bg_1	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:bg_1      = ['#252525', 0]$/;"	v
s:bg_1	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:bg_1      = ['#184956', 0]$/;"	v
s:bg_1	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:bg_1      = ['#ece3cc', 0]$/;"	v
s:bg_1	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:bg_1      = ['#ebebeb', 0]$/;"	v
s:bg_2	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:bg_2      = ['#3b3b3b', 8]$/;"	v
s:bg_2	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:bg_2      = ['#2d5b69', 8]$/;"	v
s:bg_2	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:bg_2      = ['#d5cdb6', 8]$/;"	v
s:bg_2	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:bg_2      = ['#cdcdcd', 8]$/;"	v
s:bin	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = fnamemodify(s:bin.preview, ':8')$/;"	v
s:bin	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = split(system('for %A in ("'.s:bin.preview.'") do @echo %~sA'), "\\n")[0]$/;"	v
s:bin	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:binNMU	cache-plug/vim-polyglot/syntax/debchangelog.vim	/^let s:binNMU='binary-only=yes'$/;"	v
s:bin_dir	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:bin_regex	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:bin_regex = '0b[01]\\%(_\\?[01]\\)*\\%(\\>\\|im\\>\\|\\ze[^01]\\)'$/;"	v
s:binding_close	cache-plug/vim-polyglot/indent/nix.vim	/^let s:binding_close = '\\%(\\<in\\>\\)'$/;"	v
s:binding_open	cache-plug/vim-polyglot/indent/nix.vim	/^let s:binding_open = '\\%(\\<let\\>\\)'$/;"	v
s:binop_chars	cache-plug/vim-polyglot/autoload/julia.vim	/^let s:binop_chars = "=+\\\\U2D*\/\\\\%÷^&|⊻<>≤≥≡≠≢∈∉⋅×∪∩⊆⊈⊂⊄⊊←→∋∌⊕⊖⊞⊟∘∧⊗⊘↑↓∨⊠±"$/;"	v
s:binop_chars	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:binop_chars = "=+\\\\U2D*\/\\\\%÷^&|⊻<>≤≥≡≠≢∈∉⋅×∪∩⊆⊈⊂⊄⊊←→∋∌⊕⊖⊞⊟∘∧⊗⊘↑↓∨⊠±⟂⋆"$/;"	v
s:binop_chars_extra	cache-plug/vim-polyglot/autoload/julia.vim	/^let s:binop_chars_extra = "\\\\U214B\\\\U2190-\\\\U2194\\\\U219A\\\\U219B\\\\U21A0\\\\U21A3\\\\U21A6\\\\U21AE\\\\U21CE\\\\U21CF\\\\U21D2\\\\U21D4\\\\U21F4-\\\\U21FF\\\\U2208-\\\\U220D\\\\U2213\\\\U2214\\\\U2217-\\\\U2219\\\\U221D\\\\U2224-\\\\U222A\\\\U2237\\\\U2238\\\\U223A\\\\U223B\\\\U223D\\\\U223E\\\\U2240-\\\\U228B\\\\U228D-\\\\U229C\\\\U229E-\\\\U22A3\\\\U22A9\\\\U22AC\\\\U22AE\\\\U22B0-\\\\U22B7\\\\U22BB-\\\\U22BD\\\\U22C4-\\\\U22C7\\\\U22C9-\\\\U22D3\\\\U22D5-\\\\U22ED\\\\U22F2-\\\\U22FF\\\\U25B7\\\\U27C8\\\\U27C9\\\\U27D1\\\\U27D2\\\\U27D5-\\\\U27D7\\\\U27F0\\\\U27F1\\\\U27F5-\\\\U27F7\\\\U27F7\\\\U27F9-\\\\U27FF\\\\U2900-\\\\U2918\\\\U291D-\\\\U2920\\\\U2944-\\\\U2970\\\\U29B7\\\\U29B8\\\\U29BC\\\\U29BE-\\\\U29C1\\\\U29E1\\\\U29E3-\\\\U29E5\\\\U29F4\\\\U29F6\\\\U29F7\\\\U29FA\\\\U29FB\\\\U2A07\\\\U2A08\\\\U2A1D\\\\U2A22-\\\\U2A2E\\\\U2A30-\\\\U2A3D\\\\U2A40-\\\\U2A45\\\\U2A4A-\\\\U2A58\\\\U2A5A-\\\\U2A63\\\\U2A66\\\\U2A67\\\\U2A6A-\\\\U2AD9\\\\U2ADB\\\\U2AF7-\\\\U2AFA\\\\U2B30-\\\\U2B44\\\\U2B47-\\\\U2B4C\\\\UFFE9-\\\\UFFEC"$/;"	v
s:binop_chars_extra	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:binop_chars_extra = "\\\\U214B\\\\U2190-\\\\U2194\\\\U219A\\\\U219B\\\\U21A0\\\\U21A3\\\\U21A6\\\\U21AE\\\\U21CE\\\\U21CF\\\\U21D2\\\\U21D4\\\\U21F4-\\\\U21FF\\\\U2208-\\\\U220D\\\\U2213\\\\U2214\\\\U2217-\\\\U2219\\\\U221D\\\\U2224-\\\\U222A\\\\U2237\\\\U2238\\\\U223A\\\\U223B\\\\U223D\\\\U223E\\\\U2240-\\\\U228B\\\\U228D-\\\\U229C\\\\U229E-\\\\U22A3\\\\U22A9\\\\U22AC\\\\U22AE\\\\U22B0-\\\\U22B7\\\\U22BB-\\\\U22BD\\\\U22C4-\\\\U22C7\\\\U22C9-\\\\U22D3\\\\U22D5-\\\\U22ED\\\\U22F2-\\\\U22FF\\\\U25B7\\\\U27C8\\\\U27C9\\\\U27D1\\\\U27D2\\\\U27D5-\\\\U27D7\\\\U27F0\\\\U27F1\\\\U27F5-\\\\U27F7\\\\U27F7\\\\U27F9-\\\\U27FF\\\\U2900-\\\\U2918\\\\U291D-\\\\U2920\\\\U2944-\\\\U2970\\\\U29B7\\\\U29B8\\\\U29BC\\\\U29BE-\\\\U29C1\\\\U29E1\\\\U29E3-\\\\U29E5\\\\U29F4\\\\U29F6\\\\U29F7\\\\U29FA\\\\U29FB\\\\U2A07\\\\U2A08\\\\U2A1D\\\\U2A22-\\\\U2A2E\\\\U2A30-\\\\U2A3D\\\\U2A40-\\\\U2A45\\\\U2A4A-\\\\U2A58\\\\U2A5A-\\\\U2A63\\\\U2A66\\\\U2A67\\\\U2A6A-\\\\U2AD9\\\\U2ADB\\\\U2AF7-\\\\U2AFA\\\\U2B30-\\\\U2B44\\\\U2B47-\\\\U2B4C\\\\UFFE9-\\\\UFFEC"$/;"	v
s:black	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:black = [ '#000000', 0 ]$/;"	v
s:black	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:black = [ '#2b2b2b', 235 ]$/;"	v
s:black	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:black = [ '#232526', 233 ]$/;"	v
s:black	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:black = [ '#000000', '0' ]$/;"	v
s:black2	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:black2 = [ '#121212', '233' ]$/;"	v
s:blobdirs	cache-plug/vim-fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:block_close	cache-plug/vim-polyglot/indent/nix.vim	/^let s:block_close = '\\%(}\\|]\\)'$/;"	v
s:block_continuation_regex	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:block_continuation_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:block_end	cache-plug/vim-polyglot/indent/sas.vim	/^let s:block_end = '\\v<%(end|endcomp|endlayout|endgraph)\\s*;'$/;"	v
s:block_open	cache-plug/vim-polyglot/indent/nix.vim	/^let s:block_open  = '\\%({\\|[\\)'$/;"	v
s:block_regex	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:block_regex =$/;"	v
s:block_regex	cache-plug/vim-polyglot/indent/json.vim	/^let s:block_regex = '\\%({\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:block_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:block_regex =$/;"	v
s:block_regex	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:block_regex = '\\%([{[]\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:block_regex	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:block_regex = '\\%([{[]\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:block_rules	cache-plug/vim-polyglot/indent/cython.vim	/^let s:block_rules = {$/;"	v
s:block_rules	cache-plug/vim-polyglot/indent/python.vim	/^let s:block_rules = {$/;"	v
s:block_rules_multiple	cache-plug/vim-polyglot/indent/cython.vim	/^let s:block_rules_multiple = {$/;"	v
s:block_rules_multiple	cache-plug/vim-polyglot/indent/python.vim	/^let s:block_rules_multiple = {$/;"	v
s:block_scalar_header	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:block_scalar_header = '\\v[|>]%([+-]?[1-9]|[1-9]?[+-])?'$/;"	v
s:block_str	cache-plug/vim-polyglot/indent/sas.vim	/^let s:block_str = '\\v<%(do>%([^;]+<%(to|over|while)>[^;]+)=|%(compute|define\\s+%(column|footer|header|style|table|tagset|crosstabs|statgraph)|edit|layout|method|select)>[^;]+|begingraph)\\s*;'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:blue = [ '#0000ff', 12 ]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:blue = [ '#4fb4d8' , 39 ]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:blue = '#00afaf'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:blue = '#4271ae'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:blue = '#4271ae'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:blue = '#81a2be'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:blue = '#bbdaff'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:blue = '#7aa6da'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:blue = '#99cccc'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:blue = '#36a3d9'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:blue = '#59c2ff'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:blue = '#59c2ff'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:blue = [ '#6897bb' , 67 ] $/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:blue = [ '#8197bf', 103 ]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:blue   = '#89ddff'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:blue   = '#82aaff'$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:blue   = [ '#61afef', 75 ]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:blue      = ['#368aeb', 4]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:blue      = ['#4695f7', 4]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:blue      = ['#0072d4', 4]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:blue      = ['#0064e4', 4]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:blue = [ '#87afaf', 109 ]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:blue = [ '#5f87af', '67' ]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:blue = [ '#268bd2', s:cuicolors.blue[s:cuiindex] ]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:blue = [ '#5573a3', 4 ]$/;"	v
s:blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:blue = [ '#8ac6f2', 117 ]$/;"	v
s:blue2	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:blue2 = [ '#91aadf', '110' ]$/;"	v
s:bmenu_items	cache-plug/vim-polyglot/extras/menu.vim	/^let s:bmenu_items = {}$/;"	v
s:bmenu_wait	cache-plug/vim-polyglot/extras/menu.vim	/^let s:bmenu_wait = 1$/;"	v
s:borderchars	cache-plug/coc.nvim/autoload/coc/float.vim	/^let s:borderchars = get(g:, 'coc_borderchars', ['─', '│', '─', '│', '┌', '┐', '┘', '└'])$/;"	v
s:borderjoinchars	cache-plug/coc.nvim/autoload/coc/float.vim	/^let s:borderjoinchars = get(g:, 'coc_border_joinchars', ['┬', '┤', '┴', '├'])$/;"	v
s:bracketBlocks	cache-plug/vim-polyglot/indent/julia.vim	/^let s:bracketBlocks = '\\<julia\\%(\\%(\\%(Printf\\)\\?Par\\|SqBra\\%(Idx\\)\\?\\|CurBra\\)Block\\|ParBlockInRange\\|StringVars\\%(Par\\|SqBra\\|CurBra\\)\\|Dollar\\%(Par\\|SqBra\\)\\|QuotedParBlockS\\?\\)\\>'$/;"	v
s:bracket_continuation_regex	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_continuation_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_switch_continuation_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:bracketing_delims	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:bracketing_delims = [$/;"	v
s:brblue	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brblue    = ['#4f9cfe', 12]$/;"	v
s:brblue	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brblue    = ['#58a3ff', 12]$/;"	v
s:brblue	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brblue    = ['#006dce', 12]$/;"	v
s:brblue	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brblue    = ['#0054cf', 12]$/;"	v
s:brcyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brcyan    = ['#56d8c9', 14]$/;"	v
s:brcyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brcyan    = ['#53d6c7', 14]$/;"	v
s:brcyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brcyan    = ['#00978a', 14]$/;"	v
s:brcyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brcyan    = ['#009a8a', 14]$/;"	v
s:brgreen	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brgreen   = ['#83c746', 10]$/;"	v
s:brgreen	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brgreen   = ['#84c747', 10]$/;"	v
s:brgreen	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brgreen   = ['#428b00', 10]$/;"	v
s:brgreen	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brgreen   = ['#008400', 10]$/;"	v
s:bright_blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:bright_blue = [ '#8eb2f7', 12 ]$/;"	v
s:bright_green	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:bright_green = [ '#98bc37', 10 ]$/;"	v
s:bright_magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:bright_magenta = [ '#e35682', 13 ]$/;"	v
s:brmagenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brmagenta = ['#ff81ca', 13]$/;"	v
s:brmagenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brmagenta = ['#ff84cd', 13]$/;"	v
s:brmagenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brmagenta = ['#c44392', 13]$/;"	v
s:brmagenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brmagenta = ['#c7008b', 13]$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/ant.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/ant.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.htm*\\n" .$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/config.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/config.vim	/^let s:browsefilter = "Bourne Shell Files (*.sh)\\t*.sh\\n" .$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^let s:browsefilter = 'All Files (*.*)\\t*.*\\n'$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/haml.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/haml.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/haml.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^let s:browsefilter = "Java Files (*.java)\\t*.java\\n" .$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/pug.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/pug.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.html;*.htm\\n" .$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/xsd.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	cache-plug/vim-polyglot/ftplugin/xsd.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:brred	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brred     = ['#ff5e56', 9]$/;"	v
s:brred	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brred     = ['#ff665c', 9]$/;"	v
s:brred	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brred     = ['#cc1729', 9]$/;"	v
s:brred	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brred     = ['#bf0000', 9]$/;"	v
s:bryellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:bryellow  = ['#efc541', 11]$/;"	v
s:bryellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:bryellow  = ['#ebc13d', 11]$/;"	v
s:bryellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:bryellow  = ['#a78300', 11]$/;"	v
s:bryellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:bryellow  = ['#af8500', 11]$/;"	v
s:bstartp	cache-plug/vim-polyglot/autoload/pony.vim	/^let s:bstartp = '\\v<%(ifdef|if|then|elseif|else|(match)|while|for|in|do|try|with|recover|repeat|until|(object)|lambda|iftype|elseiftype)>'$/;"	v
s:buffer_prototype	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:bufnr	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^let s:bufnr       = bufnr('')$/;"	v
s:bvars	cache-plug/vim-polyglot/indent/javascript.vim	/^let s:bvars = {$/;"	v
s:byte_pattern	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^let s:byte_pattern = '\\<\\%([01]\\=\\d\\{1,2}\\|2\\%([0-4]\\d\\|5[0-5]\\)\\)\\>'$/;"	v
s:c_flag	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:c_flag = s:git_supports_command_line_config_override()$/;"	v
s:c_flow_indicator	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_flow_indicator = '[,[\\]{}]'$/;"	v
s:c_indicator	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_indicator      = '[\\-?:,[\\]{}#&*!|>''"%@`]'$/;"	v
s:c_named_tag_handle	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_named_tag_handle     = '\\v\\!'.s:ns_word_char.'+\\!'$/;"	v
s:c_named_tag_handle	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_named_tag_handle     = '!'.s:ns_word_char.'\\+!'$/;"	v
s:c_non_specific_tag	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_non_specific_tag = '\\v\\!'$/;"	v
s:c_non_specific_tag	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_non_specific_tag = '!'$/;"	v
s:c_ns_alias_node	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_alias_node      = '\\*'.s:c_ns_anchor_name$/;"	v
s:c_ns_anchor_char	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_ns_anchor_char = '\\v%([\\n\\r\\uFEFF \\t,[\\]{}]@!\\p)'$/;"	v
s:c_ns_anchor_char	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_anchor_char = '\\%([\\n\\r\\uFEFF \\t,[\\]{}]\\@!\\p\\)'$/;"	v
s:c_ns_anchor_char	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_anchor_char = s:SimplifyToAssumeAllPrintable(s:c_ns_anchor_char)$/;"	v
s:c_ns_anchor_name	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_ns_anchor_name = s:c_ns_anchor_char.'+'$/;"	v
s:c_ns_anchor_name	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_anchor_name = s:c_ns_anchor_char.'\\+'$/;"	v
s:c_ns_anchor_property	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_ns_anchor_property =  '\\v\\&'.s:c_ns_anchor_name$/;"	v
s:c_ns_anchor_property	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_anchor_property =  '&'.s:c_ns_anchor_name$/;"	v
s:c_ns_shorthand_tag	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_ns_shorthand_tag = '\\v'.s:c_tag_handle . s:ns_tag_char.'+'$/;"	v
s:c_ns_shorthand_tag	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_shorthand_tag = s:c_tag_handle . s:ns_tag_char.'\\+'$/;"	v
s:c_ns_tag_property	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_ns_tag_property = '\\v'.s:c_verbatim_tag.$/;"	v
s:c_ns_tag_property	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_ns_tag_property = s:c_verbatim_tag.$/;"	v
s:c_primary_tag_handle	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_primary_tag_handle   = '\\v\\!'$/;"	v
s:c_primary_tag_handle	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_primary_tag_handle   = '!'$/;"	v
s:c_secondary_tag_handle	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_secondary_tag_handle = '\\v\\!\\!'$/;"	v
s:c_secondary_tag_handle	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_secondary_tag_handle = '!!'$/;"	v
s:c_tag_handle	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_tag_handle = '\\v%('.s:c_named_tag_handle.$/;"	v
s:c_tag_handle	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_tag_handle = '\\%('.s:c_named_tag_handle.$/;"	v
s:c_verbatim_tag	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:c_verbatim_tag = '\\v\\!\\<'.s:ns_uri_char.'+\\>'$/;"	v
s:c_verbatim_tag	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:c_verbatim_tag = '!<'.s:ns_uri_char.'\\+>'$/;"	v
s:cache_sid	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:cache_sid = {}$/;"	v
s:callbacks	cache-plug/coc.nvim/autoload/coc.vim	/^let s:callbacks = {}$/;"	v
s:centerbuf	cache-plug/vim-buftabline/plugin/buftabline.vim	/^let s:centerbuf = winbufnr(0)$/;"	v
s:cfend	cache-plug/vim-polyglot/autoload/pony.vim	/^let s:cfend = '\\v<end>'$/;"	v
s:cfilemap	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:cfilemap = {}$/;"	v
s:cfilemap	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:cfilemap.rhs = "substitute(&l:inex =~# '\\\\<v:fname\\\\>' && len(expand('<cfile>')) ? eval(substitute(&l:inex, '\\\\<v:fname\\\\>', '\\\\=string(expand(\\"<cfile>\\"))', 'g')) : '', '^$', \\"\\\\022\\\\006\\",'')"$/;"	v
s:cfilemap	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let s:cfilemap = v:version >= 704 ? maparg('<Plug><cfile>', 'c', 0, 1) : {}$/;"	v
s:cfmiddle	cache-plug/vim-polyglot/autoload/pony.vim	/^let s:cfmiddle = '\\v<%(then|elseif|else|until|do|in|elseiftype)>|\\|'$/;"	v
s:cfstart	cache-plug/vim-polyglot/autoload/pony.vim	/^let s:cfstart = '\\v<%(ifdef|if|match|while|for|repeat|try|with|recover|object|lambda|iftype)>'$/;"	v
s:ch_braces	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:ch_braces=3$/;"	v
s:ch_brackets	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:ch_brackets=2$/;"	v
s:ch_parentheses	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:ch_parentheses=5$/;"	v
s:ch_parentheses_option	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:ch_parentheses_option=4$/;"	v
s:ch_posix_charclass	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:ch_posix_charclass=1$/;"	v
s:ch_with_backslash	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:ch_with_backslash=0$/;"	v
s:chained_func_call	cache-plug/vim-polyglot/indent/lua.vim	/^let s:chained_func_call = "^\\\\v\\\\s*[:.]\\\\w+[({\\"']"$/;"	v
s:channel_log	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:channel_log = s:plugin_dir.'channel.log'$/;"	v
s:channel_map	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^    let s:channel_map[bufnr] = job_getchannel(job)$/;"	v
s:channel_map	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^    let s:channel_map[bufnr] = job_id$/;"	v
s:channel_map	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^let s:channel_map = {}$/;"	v
s:char_map	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^let s:char_map = {$/;"	v
s:checked	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:checked = 0$/;"	v
s:checked	cache-plug/fzf/plugin/fzf.vim	/^let s:checked = {}$/;"	v
s:checked_ctags	cache-plug/vim-polyglot/autoload/rust/tags.vim	/^let s:checked_ctags = 0$/;"	v
s:clear_match_by_id	cache-plug/coc.nvim/autoload/coc/util.vim	/^let s:clear_match_by_id = has('nvim-0.5.0') || has('patch-8.1.1084')$/;"	v
s:clear_match_by_window	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^    let s:clear_match_by_window = 0$/;"	v
s:clear_match_by_window	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^let s:clear_match_by_window = has('nvim-0.5.0') || has('patch-8.1.1084')$/;"	v
s:client	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^let s:client = v:null$/;"	v
s:clients	cache-plug/coc.nvim/autoload/coc/client.vim	/^let s:clients = {}$/;"	v
s:clojure_syntax_keywords	cache-plug/vim-polyglot/syntax/clojure.vim	/^let s:clojure_syntax_keywords = {$/;"	v
s:closeBlock	cache-plug/vim-polyglot/indent/octave.vim	/^let s:closeBlock = s:midBlock + s:endBlock$/;"	v
s:close_patt	cache-plug/vim-polyglot/indent/lua.vim	/^let s:close_patt = '\\C\\%(\\<\\%(end\\|until\\)\\>\\|)\\|}\\)'$/;"	v
s:cmd	cache-plug/vim-polyglot/autoload/db/adapter/ecto.vim	/^let s:cmd = join(['mix', 'run', '--no-start', '--no-compile', shellescape(s:path.'\/get_repos.exs')])$/;"	v
s:columns	cache-plug/lightline.vim/autoload/lightline.vim	/^let s:columns = -1$/;"	v
s:comma_first	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:comma_first = '^\\s*,'$/;"	v
s:comma_first	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:comma_first = '^\\s*,'$/;"	v
s:comma_last	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:comma_last = ',\\s*$'$/;"	v
s:comma_last	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:comma_last = ',\\s*$'$/;"	v
s:commands	cache-plug/vim-polyglot/syntax/wget.vim	/^let s:commands = map([$/;"	v
s:comment	cache-plug/vim-polyglot/indent/ansible.vim	/^let s:comment = '\\v^\\s*#' " # comment$/;"	v
s:comment_rx	cache-plug/vim-polyglot/indent/make.vim	/^let s:comment_rx = '^\\s*#'$/;"	v
s:comment_rx	cache-plug/vim-polyglot/indent/omake.vim	/^let s:comment_rx = '^\\s*#'$/;"	v
s:comments	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:comments = escape(&comments, ' \\')$/;"	v
s:comments	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^let s:comments = ''$/;"	v
s:common_efm	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:common_efm = ''$/;"	v
s:commondirs	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:conceal	cache-plug/vim-polyglot/syntax/markdown.vim	/^  let s:conceal = ' conceal'$/;"	v
s:conceal	cache-plug/vim-polyglot/syntax/markdown.vim	/^let s:conceal = ''$/;"	v
s:concealcode	cache-plug/vim-polyglot/syntax/markdown.vim	/^  let s:concealcode = ' concealends'$/;"	v
s:concealcode	cache-plug/vim-polyglot/syntax/markdown.vim	/^let s:concealcode = ''$/;"	v
s:concealends	cache-plug/vim-polyglot/syntax/markdown.vim	/^  let s:concealends = ' concealends'$/;"	v
s:concealends	cache-plug/vim-polyglot/syntax/markdown.vim	/^let s:concealends = ''$/;"	v
s:conditional_directive_rx	cache-plug/vim-polyglot/indent/make.vim	/^let s:conditional_directive_rx = '^ *\\%(ifn\\=\\%(eq\\|def\\)\\|else\\)\\>'$/;"	v
s:conditional_directive_rx	cache-plug/vim-polyglot/indent/omake.vim	/^let s:conditional_directive_rx = '^ *\\%(ifn\\=\\%(eq\\|def\\)\\|else\\)\\>'$/;"	v
s:config	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:config_keys	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:config_keys = []$/;"	v
s:config_keys_camel	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:config_keys_camel =$/;"	v
s:continuable_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:continuable_regex =$/;"	v
s:continuation	cache-plug/vim-polyglot/indent/javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
s:continuation_regex	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:continuation_regex =$/;"	v
s:continuation_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:continuation_regex =$/;"	v
s:continuation_regex	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:continuation_regex	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\|[^=]=[^=]\\)' . s:line_term$/;"	v
s:continuation_rx	cache-plug/vim-polyglot/indent/make.vim	/^let s:continuation_rx = '\\\\$'$/;"	v
s:continuation_rx	cache-plug/vim-polyglot/indent/omake.vim	/^let s:continuation_rx = '\\\\$'$/;"	v
s:continued_rule_rx	cache-plug/vim-polyglot/indent/make.vim	/^let s:continued_rule_rx = '^[^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:continued_rule_rx	cache-plug/vim-polyglot/indent/omake.vim	/^let s:continued_rule_rx = '^[^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:counter	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:counter = 0$/;"	v
s:countermeasure	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:countermeasure=1$/;"	v
s:countonly	cache-plug/vim-polyglot/after/indent/html.vim	/^let s:countonly = 0$/;"	v
s:countonly	cache-plug/vim-polyglot/indent/html.vim	/^let s:countonly = 0$/;"	v
s:cpo	cache-plug/vim-polyglot/ftplugin/scheme.vim	/^let s:cpo = &cpo$/;"	v
s:cpo	cache-plug/vim-polyglot/syntax/debchangelog.vim	/^let s:cpo = &cpo$/;"	v
s:cpo	cache-plug/vim-polyglot/syntax/debsources.vim	/^let s:cpo = &cpo$/;"	v
s:cpo	cache-plug/vim-polyglot/syntax/scheme.vim	/^let s:cpo = &cpo$/;"	v
s:cpo_orig	cache-plug/vim-polyglot/ftplugin/zig.vim	/^let s:cpo_orig = &cpo$/;"	v
s:cpo_orig	cache-plug/vim-polyglot/syntax/plantuml.vim	/^let s:cpo_orig=&cpoptions$/;"	v
s:cpo_sav	cache-plug/vim-polyglot/indent/eruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	cache-plug/vim-polyglot/syntax/clojure.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	cache-plug/vim-polyglot/syntax/fennel.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	cache-plug/vim-polyglot/syntax/mp.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	cache-plug/vim-polyglot/syntax/puppet.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	cache-plug/vim-polyglot/syntax/ruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_save	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/after/indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/autoload/go/config.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/autoload/polyglot/detect.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/autoload/polyglot/sleuth.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/autoload/pony.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/autoload/terraform.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/ant.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/cucumber.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/eruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/exunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/haml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/nim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/ocaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/powershell.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/rake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/rspec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/sass.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/compiler/sbt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/extras/filetype.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/extras/menu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/abap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/abaqus.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/automake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/awk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/cfg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/css.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/csv.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/dosbatch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/dosini.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/falcon.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/fennel.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/groovy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/hamster.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/help.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/hog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/hostsaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/kwt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/m4.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/mailcap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/mf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/mma.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/mp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/muttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/neomuttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/nsis.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/plantuml.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/pony.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/postscr.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/procmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/prolog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/rnoweb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/rrst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/spec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/sshconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/systemd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/tcl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/treetop.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/vb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/verilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/vroom.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/xdefaults.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/xf86conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/ftplugin/zimbu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/applescript.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/dosbatch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/dtd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/gitolite.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/gohtmltmpl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/graphql.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/hog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/json.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/nix.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/perl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/pony.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/raku.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/sas.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/sdl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/swift.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/systemverilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/terraform.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/tex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/verilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/vlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/vroom.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/indent/zimbu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/8th.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/aap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/abel.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/aptconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/art.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/asn.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/autodoc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/awk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/basic.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/bib.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/blank.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/c.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/cabal-2.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/cf.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/chordpro.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/clean.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/cmod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/cmusrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/csc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/css.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/csv.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/cupl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/d.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/ddoc.vim	/^    let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/debcontrol.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/debcopyright.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/desktop.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/dnsmasq.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/elixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/erlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/forth.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/fortran.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/fstab.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/gdb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/gitolite.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/gp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/groovy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/gsp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/hb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/help.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/hollywood.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/ist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/jam.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/java.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/javacc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/litestep.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/log.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/logtalk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/lout.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/lpc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/lynx.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/mail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/make.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/meson.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/messages.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/mix.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/mma.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/monk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/mrxvtrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/msidl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/muttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/natural.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/neomuttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/ninja.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/nroff.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/nsis.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/opl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/perl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/pike.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/pod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/pony.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/privoxy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/raml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/reva.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/rpl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/sas.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/sd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/sisu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/spup.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/st.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/terraform.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/tidy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/treetop.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/tsalt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/tt2.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/vhdl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/viminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/vroom.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/wast.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/wget.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/xpm2.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpoptions	cache-plug/vim-polyglot/ftplugin/ada.vim	/^let s:cpoptions = &cpoptions$/;"	v
s:cpoptions_save	cache-plug/vim-polyglot/ftplugin/qml.vim	/^let s:cpoptions_save = &cpoptions$/;"	v
s:cposet	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	cache-plug/vim-polyglot/indent/fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:csv_numeric_sort	cache-plug/vim-polyglot/autoload/csv.vim	/^let s:csv_numeric_sort = v:version > 704 || v:version == 704 && has("patch341")$/;"	v
s:ctagmap	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:ctagmap = {}$/;"	v
s:ctagmap	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let s:ctagmap = v:version >= 704 ? maparg('<Plug><ctag>', 'c', 0, 1) : {}$/;"	v
s:ctags_is_uctags	cache-plug/vim-polyglot/autoload/rust/tags.vim	/^let s:ctags_is_uctags = 0$/;"	v
s:ctags_options_dir	cache-plug/vim-polyglot/autoload/puppet/ctags.vim	/^let s:ctags_options_dir = expand('<sfile>:p:h:h:h') . '\/ctags\/'$/;"	v
s:ctags_type	cache-plug/vim-polyglot/autoload/puppet/ctags.vim	/^  let s:ctags_type = 0$/;"	v
s:cuicolor	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:cuicolor = {$/;"	v
s:cuicolors	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cuicolors = {$/;"	v
s:cuiindex	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 0$/;"	v
s:cuiindex	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 1$/;"	v
s:cuiindex	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 2$/;"	v
s:current_dir	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^let s:current_dir = expand('%:p:h')$/;"	v
s:current_syntax	cache-plug/vim-polyglot/after/syntax/coffee.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
s:current_syntax	cache-plug/vim-polyglot/after/syntax/javascript/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	cache-plug/vim-polyglot/after/syntax/javascript/sql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	cache-plug/vim-polyglot/after/syntax/jsx.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	cache-plug/vim-polyglot/after/syntax/mdx.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
s:current_syntax	cache-plug/vim-polyglot/after/syntax/php/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	cache-plug/vim-polyglot/after/syntax/reason/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	cache-plug/vim-polyglot/after/syntax/tsx.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	cache-plug/vim-polyglot/after/syntax/typescript/graphql.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	cache-plug/vim-polyglot/syntax/ansible.vim	/^  let s:current_syntax=b:current_syntax$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:cyan = '#3e999f'$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:cyan = '#8abeb7'$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:cyan = '#99ffff'$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:cyan = '#70c0b1'$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:cyan = '#009999'$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:cyan = s:blue$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:cyan = s:blue$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:cyan = s:blue$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:cyan = [ '#8fbfdc', 110 ]$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:cyan = [ '#66d9ef', 81 ]$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:cyan      = ['#3fc5b7', 6]$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:cyan      = ['#41c7b9', 6]$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:cyan      = ['#009c8f', 6]$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:cyan      = ['#00ad9c', 6]$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:cyan = [ '#87d7d7', 23 ]$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cyan = [ '#2aa198', s:cuicolors.cyan[s:cuiindex] ]$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:cyan = [ '#0aaeb3', 6 ]$/;"	v
s:cyan	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:cyan = s:blue$/;"	v
s:darkGray	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:darkGray = [ '#45474f' , 238 ]$/;"	v
s:decIndent	cache-plug/vim-polyglot/indent/plantuml.vim	/^let s:decIndent = '^\\s*\\%(end\\|else\\|}\\)'$/;"	v
s:dec_num	cache-plug/vim-polyglot/syntax/nim.vim	/^  let s:dec_num = '\\d%(_?\\d)*'$/;"	v
s:dec_regex	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:dec_regex = '\\d\\%(_\\?\\d\\)*\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:defArgMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^let s:defArgMatcher = '\\%((\\_.\\{-})\\)'$/;"	v
s:defMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^let s:defMatcher = '\\%(' . s:modifierMatcher . '\\)*\\<def\\>'$/;"	v
s:default_action	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	cache-plug/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_list_type_commands	cache-plug/vim-polyglot/autoload/zig/list.vim	/^let s:default_list_type_commands = {$/;"	v
s:default_mappings	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^let s:default_mappings = {$/;"	v
s:default_shiftwidth	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^  let s:default_shiftwidth = &shiftwidth$/;"	v
s:delimitMate_extra_excluded_regions	cache-plug/vim-polyglot/autoload/rust/delimitmate.vim	/^let s:delimitMate_extra_excluded_regions = ',rustLifetimeCandidate,rustGenericLifetimeCandidate'$/;"	v
s:delimiter	cache-plug/vim-polyglot/syntax/ruby.vim	/^    let s:delimiter = '\\' . s:delimiter$/;"	v
s:delimiters	cache-plug/vim-polyglot/ftplugin/caddyfile.vim	/^let s:delimiters = {'left': '#'}$/;"	v
s:delims	cache-plug/vim-polyglot/ftplugin/hcl.vim	/^let s:delims = { 'left': '#' }$/;"	v
s:desktop_enable_kde	cache-plug/vim-polyglot/syntax/desktop.vim	/^  let s:desktop_enable_kde = v:false$/;"	v
s:desktop_enable_kde	cache-plug/vim-polyglot/syntax/desktop.vim	/^  let s:desktop_enable_kde = v:true$/;"	v
s:desktop_enable_nonstd	cache-plug/vim-polyglot/syntax/desktop.vim	/^  let s:desktop_enable_nonstd = v:false$/;"	v
s:desktop_enable_nonstd	cache-plug/vim-polyglot/syntax/desktop.vim	/^  let s:desktop_enable_nonstd = v:true$/;"	v
s:dictionary_entry	cache-plug/vim-polyglot/indent/ansible.vim	/^let s:dictionary_entry = '\\v^\\s*[^:-]+:\\s*$' " with_items:$/;"	v
s:did_check_exe	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:did_function_definitions	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^	let s:did_function_definitions = 1$/;"	v
s:did_indent	cache-plug/vim-polyglot/after/indent/jsx.vim	/^  let s:did_indent = b:did_indent$/;"	v
s:did_indent	cache-plug/vim-polyglot/after/indent/tsx.vim	/^  let s:did_indent = b:did_indent$/;"	v
s:did_indent	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^  let s:did_indent=b:did_indent$/;"	v
s:did_setup_color_schemes	cache-plug/vim-polyglot/extras/menu.vim	/^let s:did_setup_color_schemes = 0$/;"	v
s:did_setup_compilers	cache-plug/vim-polyglot/extras/menu.vim	/^let s:did_setup_compilers = 0$/;"	v
s:did_setup_keymaps	cache-plug/vim-polyglot/extras/menu.vim	/^  let s:did_setup_keymaps = 0$/;"	v
s:dim_0	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:dim_0     = ['#777777', 7]$/;"	v
s:dim_0	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:dim_0     = ['#72898f', 7]$/;"	v
s:dim_0	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:dim_0     = ['#909995', 7]$/;"	v
s:dim_0	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:dim_0     = ['#878787', 7]$/;"	v
s:dir	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^		let s:dir = fnameescape(s:dir)$/;"	v
s:dir	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^		let s:dir = substitute(s:dir, '\\ ', '\\\\ ', 'g')$/;"	v
s:dir	cache-plug/vim-polyglot/ftplugin/clojure.vim	/^		let s:dir = substitute(s:dir, '\\', '\\\\\\\\', 'g')$/;"	v
s:dir_for_worktree	cache-plug/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:directives_end	cache-plug/vim-polyglot/indent/blade.vim	/^    let s:directives_end .= '\\|' . join(values(g:blade_custom_directives_pairs), '\\|')$/;"	v
s:directives_end	cache-plug/vim-polyglot/indent/blade.vim	/^let s:directives_end = 'else\\|end\\|empty\\|show\\|stop\\|append\\|overwrite'$/;"	v
s:directives_start	cache-plug/vim-polyglot/indent/blade.vim	/^    let s:directives_start .= '\\|' . join(keys(g:blade_custom_directives_pairs), '\\|')$/;"	v
s:directives_start	cache-plug/vim-polyglot/indent/blade.vim	/^let s:directives_start = 'if\\|else\\|unless\\|for\\|while\\|empty\\|push\\|section\\|can\\|hasSection\\|verbatim\\|php\\|' .$/;"	v
s:dirsep	cache-plug/vim-buftabline/plugin/buftabline.vim	/^let s:dirsep = fnamemodify(getcwd(),':p')[-1:]$/;"	v
s:disable_colors	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:disable_colors = []$/;"	v
s:done	cache-plug/vim-gitgutter/test/runner.vim	/^  let s:done += 1$/;"	v
s:done	cache-plug/vim-gitgutter/test/runner.vim	/^let s:done = 0$/;"	v
s:dot_continuation_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:dot_continuation_regex = '%\\@<!\\.\\s*\\%(#.*\\)\\=$'$/;"	v
s:doubleArrow	cache-plug/vim-polyglot/after/syntax/idris.vim	/^let s:doubleArrow = 1$/;"	v
s:doubleArrow	cache-plug/vim-polyglot/after/syntax/idris2.vim	/^let s:doubleArrow = 1$/;"	v
s:dtd_cpo_save	cache-plug/vim-polyglot/syntax/dtd.vim	/^let s:dtd_cpo_save = &cpo$/;"	v
s:echorizer	cache-plug/vim-polyglot/autoload/vital/_crystal/ColorEcho.vim	/^let s:echorizer = {$/;"	v
s:ecr_close	cache-plug/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_close = '%>'$/;"	v
s:ecr_comment_open	cache-plug/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_comment_open = '<%%\\@!-\\=#'$/;"	v
s:ecr_control_open	cache-plug/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_control_open = '<%%\\@!-\\=[=#]\\@!'$/;"	v
s:ecr_dedent_regex	cache-plug/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_dedent_regex =$/;"	v
s:ecr_indent_regex	cache-plug/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_indent_regex =$/;"	v
s:ecr_open	cache-plug/vim-polyglot/indent/ecrystal.vim	/^let s:ecr_open = '<%%\\@!'$/;"	v
s:ecrystal_extensions	cache-plug/vim-polyglot/autoload/ecrystal.vim	/^let s:ecrystal_extensions = {$/;"	v
s:ed	cache-plug/vim-polyglot/syntax/tt2.vim	/^        let s:ed = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:edit_jobs	cache-plug/vim-fugitive/autoload/fugitive.vim	/^  let s:edit_jobs = {}$/;"	v
s:eglobal_working	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:eglobal_working=0$/;"	v
s:enable	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:enable = 0$/;"	v
s:enable_tagged_jsx	cache-plug/vim-polyglot/after/syntax/jsx_pretty.vim	/^let s:enable_tagged_jsx = !empty(s:tags)$/;"	v
s:endBlock	cache-plug/vim-polyglot/indent/octave.vim	/^let s:endBlock = ['end', 'endfor', 'endparfor', 'endfunction', 'endif',$/;"	v
s:end_conditional_directive_rx	cache-plug/vim-polyglot/indent/make.vim	/^let s:end_conditional_directive_rx = '^\\s*\\%(else\\|endif\\)\\>'$/;"	v
s:end_conditional_directive_rx	cache-plug/vim-polyglot/indent/omake.vim	/^let s:end_conditional_directive_rx = '^\\s*\\%(else\\|endif\\)\\>'$/;"	v
s:end_end_regex	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_end_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_middle_regex	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_middle_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_skip_expr	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:end_start_regex	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^let s:end_start_regex =$/;"	v
s:end_start_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:end_start_regex =$/;"	v
s:end_tag	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^let s:end_tag = '\\%(<\\_s*\/\\_s*\\%(\\<[-:._$A-Za-z0-9]\\+\\>\\)\\_s*>\\|\/\\_s*>\\)'$/;"	v
s:endtag	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^let s:endtag = '^\\s*\\\/\\?>\\s*;\\='$/;"	v
s:endtags	cache-plug/vim-polyglot/after/indent/html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
s:endtags	cache-plug/vim-polyglot/indent/html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
s:enumeration_pattern	cache-plug/vim-polyglot/indent/rst.vim	/^let s:enumeration_pattern = '^\\s*\\%(\\d\\+\\|#\\)\\.\\s\\+'$/;"	v
s:env_cache	cache-plug/vim-polyglot/autoload/zig/util.vim	/^let s:env_cache = {}$/;"	v
s:eol	cache-plug/vim-polyglot/indent/mp.vim	/^let s:eol = '\\s*\\%($\\|%\\)'$/;"	v
s:eol	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:eol = '\\s*\\%(\\%(\\%(#=\\%(=#\\@!\\|[^=]\\|\\n\\)\\{-}=#\\)\\s*\\)\\+\\)\\?\\%(#=\\@!.*\\)\\?\\n'$/;"	v
s:eregex_replacement	cache-plug/vim-polyglot/scripts/eregex.vim	/^    let s:eregex_replacement=eregex_replacement$/;"	v
s:eregex_replacement	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:eregex_replacement=0$/;"	v
s:erlang_fun_begin	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^let s:erlang_fun_begin = '^\\a\\w*(.*$'$/;"	v
s:erlang_fun_end	cache-plug/vim-polyglot/ftplugin/erlang.vim	/^let s:erlang_fun_end   = '^[^%]*\\.\\s*\\(%.*\\)\\?$'$/;"	v
s:err_remain_text	cache-plug/coc.nvim/autoload/coc/task.vim	/^let s:err_remain_text = {}$/;"	v
s:error	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:error = '#5f0000'$/;"	v
s:error	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:error = '#ffafdf'$/;"	v
s:error_sign	cache-plug/coc.nvim/autoload/coc.vim	/^let s:error_sign = get(g:, 'coc_status_error_sign', has('mac') ? '❌ ' : 'E')$/;"	v
s:errored	cache-plug/vim-gitgutter/test/runner.vim	/^      let s:errored = 0$/;"	v
s:errored	cache-plug/vim-gitgutter/test/runner.vim	/^let s:errored = 0$/;"	v
s:errors	cache-plug/vim-gitgutter/test/runner.vim	/^      let s:errors += 1$/;"	v
s:errors	cache-plug/vim-gitgutter/test/runner.vim	/^  let s:errors += 1$/;"	v
s:errors	cache-plug/vim-gitgutter/test/runner.vim	/^let s:errors = 0$/;"	v
s:exec_paths	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:executables	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:exp	cache-plug/vim-polyglot/syntax/nim.vim	/^  let s:exp = '%([eE][+-]?'.s:dec_num.')'$/;"	v
s:expand	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:exs_re	cache-plug/vim-polyglot/syntax/python.vim	/^        let s:exs_re .= '|BlockingIOError|ChildProcessError|ConnectionError|BrokenPipeError|ConnectionAbortedError|ConnectionRefusedError|ConnectionResetError|FileExistsError|FileNotFoundError|InterruptedError|IsADirectoryError|NotADirectoryError|PermissionError|ProcessLookupError|TimeoutError|StopAsyncIteration|ResourceWarning'$/;"	v
s:exs_re	cache-plug/vim-polyglot/syntax/python.vim	/^        let s:exs_re .= '|StandardError'$/;"	v
s:exs_re	cache-plug/vim-polyglot/syntax/python.vim	/^    let s:exs_re = 'BaseException|Exception|ArithmeticError|LookupError|EnvironmentError|AssertionError|AttributeError|BufferError|EOFError|FloatingPointError|GeneratorExit|IOError|ImportError|IndexError|KeyError|KeyboardInterrupt|MemoryError|NameError|NotImplementedError|OSError|OverflowError|ReferenceError|RuntimeError|StopIteration|SyntaxError|IndentationError|TabError|SystemError|SystemExit|TypeError|UnboundLocalError|UnicodeError|UnicodeEncodeError|UnicodeDecodeError|UnicodeTranslateError|ValueError|VMSError|WindowsError|ZeroDivisionError|Warning|UserWarning|BytesWarning|DeprecationWarning|PendingDeprecationWarning|SyntaxWarning|RuntimeWarning|FutureWarning|ImportWarning|UnicodeWarning'$/;"	v
s:extend	cache-plug/vim-polyglot/indent/sass.vim	/^let s:extend = '^\\s*\\%(@extend\\|@include\\|+\\)'$/;"	v
s:extended_complements	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:extended_complements=0$/;"	v
s:extended_dots	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:extended_dots=0$/;"	v
s:extended_spaces	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:extended_spaces=0$/;"	v
s:extfname	cache-plug/vim-polyglot/syntax/tex.vim	/^let s:extfname=expand("%:e")$/;"	v
s:extraConceal	cache-plug/vim-polyglot/after/syntax/idris.vim	/^            let s:extraConceal = 0$/;"	v
s:extraConceal	cache-plug/vim-polyglot/after/syntax/idris.vim	/^let s:extraConceal = 1$/;"	v
s:extraConceal	cache-plug/vim-polyglot/after/syntax/idris2.vim	/^            let s:extraConceal = 0$/;"	v
s:extraConceal	cache-plug/vim-polyglot/after/syntax/idris2.vim	/^let s:extraConceal = 1$/;"	v
s:fail	cache-plug/vim-gitgutter/test/runner.vim	/^      let s:fail += 1$/;"	v
s:fail	cache-plug/vim-gitgutter/test/runner.vim	/^let s:fail = 0$/;"	v
s:falcon_deindent_keywords	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:falcon_deindent_keywords = '^\\s*\\(case\\|catch\\|default\\|elif\\|else\\|end\\)'$/;"	v
s:falcon_indent_keywords	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:falcon_indent_keywords = '^\\s*\\(case\\|catch\\|class\\|enum\\|default\\|elif\\|else' .$/;"	v
s:fb	cache-plug/vim-polyglot/syntax/ledger.vim	/^let s:fb = get(g:, 'ledger_fold_blanks', 0)$/;"	v
s:fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:fg     = '#d5dbe5'$/;"	v
s:fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:fg     = '#eeffff'$/;"	v
s:fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:fg    = [ '#494b53', 238 ]$/;"	v
s:fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:fg    = [ '#abb2bf', 145 ]$/;"	v
s:file_commit_pattern	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_name	cache-plug/vim-polyglot/indent/erlang.vim	/^let s:file_name = ''$/;"	v
s:file_pattern	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:filename_case_checks	cache-plug/vim-polyglot/tests/native.vim	/^let s:filename_case_checks = {$/;"	v
s:filename_checks	cache-plug/vim-polyglot/tests/native.vim	/^let s:filename_checks = {$/;"	v
s:filetype_dict	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^        let s:filetype_dict[key] = val$/;"	v
s:filetype_dict	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^    let s:filetype_dict = {$/;"	v
s:filetype_dict	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^    let s:filetype_dict = {}$/;"	v
s:filetype_map	cache-plug/coc.nvim/autoload/coc/list.vim	/^let s:filetype_map = {$/;"	v
s:first_sign_id	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:first_sign_id = 3000$/;"	v
s:flag	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:float_regex	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:float_regex = '\\%(' . s:float_regex3 .$/;"	v
s:float_regex1	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:float_regex1 = '\\.\\d\\%(_\\?\\d\\)*\\%([eEf][-+]\\?\\d\\+\\)\\?\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:float_regex2	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:float_regex2 = '\\d\\%(_\\?\\d\\)*\\.\\%(\\d\\%(_\\?\\d\\)*\\)\\?\\%([eEf][-+]\\?\\d\\+\\)\\?\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:float_regex3	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:float_regex3 = '\\d\\%(_\\?\\d\\)*[eEf][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\D\\)'$/;"	v
s:float_suf	cache-plug/vim-polyglot/syntax/nim.vim	/^  let s:float_suf = '%(''%(%(f|F)%(32|64|128)?|d|D))'$/;"	v
s:float_supported	cache-plug/coc.nvim/autoload/coc/float.vim	/^let s:float_supported = exists('*nvim_open_win') || has('patch-8.1.1719')$/;"	v
s:fmt_excmd	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fnameescape	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:focus_was_lost	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^  let s:focus_was_lost = 0$/;"	v
s:fold_arg	cache-plug/vim-polyglot/syntax/crystal.vim	/^let s:fold_arg      = s:foldable('string') ? ' fold' : ''$/;"	v
s:fold_arg	cache-plug/vim-polyglot/syntax/ruby.vim	/^let s:fold_arg	    = s:foldable('string')		? ' fold'   : ''$/;"	v
s:foldable_groups	cache-plug/vim-polyglot/syntax/crystal.vim	/^let s:foldable_groups = split($/;"	v
s:foldable_groups	cache-plug/vim-polyglot/syntax/ruby.vim	/^let s:foldable_groups = split($/;"	v
s:folded_assignment_rx	cache-plug/vim-polyglot/indent/make.vim	/^let s:folded_assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\=='$/;"	v
s:folded_assignment_rx	cache-plug/vim-polyglot/indent/omake.vim	/^let s:folded_assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\=='$/;"	v
s:foreground	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:foreground = '#d0d0d0'$/;"	v
s:foreground	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:foreground = '#4d4d4c'$/;"	v
s:fsac	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:fsac = fnamemodify(s:script_root_dir . "fsac\/fsautocomplete.dll", ":p")$/;"	v
s:fsi_buffer	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:fsi_buffer = -1$/;"	v
s:fsi_height	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:fsi_height = 0$/;"	v
s:fsi_job	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:fsi_job    = -1$/;"	v
s:fsi_width	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:fsi_width  = 0$/;"	v
s:ft	cache-plug/vim-polyglot/syntax/c.vim	/^let s:ft = matchstr(&ft, '^\\([^.]\\)\\+')$/;"	v
s:ft	cache-plug/vim-polyglot/syntax/rmd.vim	/^    let s:ft = s:type$/;"	v
s:ft	cache-plug/vim-polyglot/syntax/rmd.vim	/^    let s:ft = substitute(s:type, '.*=', '', '')$/;"	v
s:ft_rules_udev_rules_pattern	cache-plug/vim-polyglot/autoload/polyglot/ft.vim	/^let s:ft_rules_udev_rules_pattern = '^\\s*\\cudev_rules\\s*=\\s*"\\([^"]\\{-1,}\\)\/*".*'$/;"	v
s:ftplugin_sql_objects	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let s:ftplugin_sql_objects =$/;"	v
s:fuchsia	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:fuchsia = [ '#ff00ff', 13 ]$/;"	v
s:funcNameMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^let s:funcNameMatcher = '\\w\\+'$/;"	v
s:funcs	cache-plug/coc.nvim/autoload/coc/api.vim	/^let s:funcs = {}$/;"	v
s:funcs_re	cache-plug/vim-polyglot/syntax/python.vim	/^            let s:funcs_re .= '|print'$/;"	v
s:funcs_re	cache-plug/vim-polyglot/syntax/python.vim	/^        let s:funcs_re .= '\\=@!'$/;"	v
s:funcs_re	cache-plug/vim-polyglot/syntax/python.vim	/^        let s:funcs_re .= '|apply|basestring|buffer|cmp|coerce|execfile|file|intern|long|raw_input|reduce|reload|unichr|unicode|xrange'$/;"	v
s:funcs_re	cache-plug/vim-polyglot/syntax/python.vim	/^        let s:funcs_re .= '|ascii|breakpoint|exec|print'$/;"	v
s:funcs_re	cache-plug/vim-polyglot/syntax/python.vim	/^    let s:funcs_re = '__import__|abs|all|any|bin|callable|chr|classmethod|compile|complex|delattr|dir|divmod|enumerate|eval|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|locals|map|max|memoryview|min|next|oct|open|ord|pow|property|range|repr|reversed|round|setattr|slice|sorted|staticmethod|sum|super|type|vars|zip'$/;"	v
s:funcs_re	cache-plug/vim-polyglot/syntax/python.vim	/^    let s:funcs_re = 'syn match pythonBuiltinFunc ''\\v\\.@<!\\zs<%(' . s:funcs_re . ')>'$/;"	v
s:fzf_go	cache-plug/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_tmux	cache-plug/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:gap_between_regions	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^let s:gap_between_regions = 5$/;"	v
s:git_versions	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:global_variable_list	cache-plug/vim-polyglot/autoload/rust/debugging.vim	/^let s:global_variable_list = [$/;"	v
s:globs	cache-plug/vim-polyglot/autoload/polyglot/sleuth.vim	/^let s:globs = {$/;"	v
s:globsubs	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:gold	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gold = [ '#f0d50c', '220' ]$/;"	v
s:got_fmt_error	cache-plug/vim-polyglot/autoload/rustfmt.vim	/^let s:got_fmt_error = 0$/;"	v
s:gray	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:gray = [ '#808080', 8]$/;"	v
s:gray	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:gray = [ '#686b78' , 242 ]$/;"	v
s:gray	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:gray = [ '#323232', 236 ]$/;"	v
s:gray	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:gray = [ '#808080', 244 ]$/;"	v
s:gray	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray = [ '#262626', '235' ]$/;"	v
s:gray1	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray1  = '#2c393f'$/;"	v
s:gray1	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray1  = '#37474f'$/;"	v
s:gray1	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray1  = '#2e3c43'$/;"	v
s:gray1	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray1  = '#314549'$/;"	v
s:gray1	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1 = [ '#494b53', 238 ]$/;"	v
s:gray1	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1 = [ '#5c6370', 241 ]$/;"	v
s:gray2	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray2  = '#2c393f'$/;"	v
s:gray2	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray2  = '#d5dbe5'$/;"	v
s:gray2	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray2  = '#2E3C43'$/;"	v
s:gray2	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray2  = '#eeffff'$/;"	v
s:gray2	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2 = [ '#2c323d', 235 ]$/;"	v
s:gray2	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2 = [ '#f0f0f0', 255 ]$/;"	v
s:gray2	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray2 = [ '#3a3a3a', '237' ]$/;"	v
s:gray3	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray3  = '#37474f'$/;"	v
s:gray3	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray3  = '#707880'$/;"	v
s:gray3	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray3  = '#314549'$/;"	v
s:gray3	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray3  = '#546e7a'$/;"	v
s:gray3	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3 = [ '#3e4452', 240 ]$/;"	v
s:gray3	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3 = [ '#d0d0d0', 250 ]$/;"	v
s:gray3	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray3 = [ '#4e4e4e', '239' ]$/;"	v
s:gray4	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray4 = [ '#626262', '241' ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:green = [ '#008000', 2 ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:green = [ '#78bd65' , 41 ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:green = '#008700'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:green = '#008700'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:green = '#718c00'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:green = '#b5bd68'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:green = '#d1f1a9'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:green = '#b9ca4a'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:green = '#99cc99'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:green = '#b8cc52'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:green = '#86B300'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:green = '#bbe67e'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:green = [ '#629755', 71 ] $/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:green = [ '#99ad6a', 107 ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:green  = '#8bd649'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:green  = '#c3e88d'$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:green = [ '#a6e22e', 118 ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:green = [ '#98c379', 35 ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:green  = [ '#98c379', 76 ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:green     = ['#70b433', 2]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:green     = ['#75b938', 2]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:green     = ['#489100', 2]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:green     = ['#1d9700', 2]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:green = [ '#87af87', 108 ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:green = [ '#57ba37', '71' ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:green = [ '#859900', s:cuicolors.green[s:cuiindex] ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:green = [ '#519f50', 2 ]$/;"	v
s:green	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:green = [ '#95e454', 119 ]$/;"	v
s:group	cache-plug/vim-polyglot/syntax/ruby.vim	/^  let s:group = 'ruby' . s:names[s:delimiter] . 'Escape'$/;"	v
s:gui	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^let s:gui = has('gui_running') || has('nvim')$/;"	v
s:guicolor	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:guicolor = {$/;"	v
s:has_service_field	cache-plug/vim-polyglot/syntax/pamconf.vim	/^let s:has_service_field = exists("b:pamconf_has_service_field")$/;"	v
s:hash_colors	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:head_cache	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:headersRegexp	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^let s:headersRegexp = '\\v^(#|.+\\n(\\=+|-+)$)'$/;"	v
s:hex_regex	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:hex_regex = '0x\\x\\%(_\\?\\x\\)*\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:hexfloat_regex1	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:hexfloat_regex1 = '0x\\.\\%\\(\\x\\%(_\\?\\x\\)*\\)\\?[pP][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:hexfloat_regex2	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:hexfloat_regex2 = '0x\\x\\%(_\\?\\x\\)*\\%\\(\\.\\%\\(\\x\\%(_\\?\\x\\)*\\)\\?\\)\\?[pP][-+]\\?\\d\\+\\%(\\>\\|im\\>\\|\\ze\\X\\)'$/;"	v
s:highlight_close_tag	cache-plug/vim-polyglot/after/syntax/jsx_pretty.vim	/^let s:highlight_close_tag = get(g:, 'vim_jsx_pretty_highlight_close_tag', 0)$/;"	v
s:hog_keyword_match	cache-plug/vim-polyglot/ftplugin/hog.vim	/^let s:hog_keyword_match = '\\c^\\s*\\<\\(preprocessor\\\\|config\\\\|output\\\\|include\\\\|ipvar\\\\|portvar\\\\|var\\\\|dynamicpreprocessor\\\\|' . $/;"	v
s:html_indent	cache-plug/vim-polyglot/indent/svelte.vim	/^let s:html_indent = &l:indentexpr$/;"	v
s:html_indent	cache-plug/vim-polyglot/indent/vue.vim	/^let s:html_indent = s:get_indentexpr('html')$/;"	v
s:htmlindent	cache-plug/vim-polyglot/indent/blade.vim	/^let s:htmlindent = &indentexpr$/;"	v
s:hunk_re	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:hunk_re = '^@@ -\\(\\d\\+\\),\\?\\(\\d*\\) +\\(\\d\\+\\),\\?\\(\\d*\\) @@'$/;"	v
s:i	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  let s:i = g:omlet_indent_struct$/;"	v
s:i	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  let s:i = matchstr(s:m,'\\d\\+')$/;"	v
s:i	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  let s:i = s:idef$/;"	v
s:i	cache-plug/vim-polyglot/syntax/help.vim	/^let s:i = match(expand("%"), '\\.\\a\\ax$')$/;"	v
s:idef	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  let s:idef = 2$/;"	v
s:idef	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  let s:idef = g:omlet_indent$/;"	v
s:idef	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^  let s:idef = matchstr(s:m,'\\d\\+')$/;"	v
s:idregex	cache-plug/vim-polyglot/autoload/julia.vim	/^let s:idregex = '[^' . s:nonidS_chars . '0-9!' . s:uniop_chars . s:binop_chars . '][^' . s:nonidS_chars . s:uniop_chars . s:binop_chars . s:binop_chars_extra . ']*'$/;"	v
s:idregex	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:idregex = '\\%([^' . s:nonidS_chars . '0-9!?' . s:uniop_chars . s:binop_chars . '][^' . s:nonidS_chars . s:uniop_chars . s:binop_chars . s:binop_chars_extra . ']*\\)'$/;"	v
s:ignorecase	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:ignorecase=0$/;"	v
s:in_comm	cache-plug/vim-polyglot/indent/javascript.vim	/^let s:in_comm = s:skip_expr[:-14] . "'comment\\\\|doc'"$/;"	v
s:include	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:include = &l:include$/;"	v
s:include	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let s:include = &l:include$/;"	v
s:incompleteFont	cache-plug/vim-polyglot/after/syntax/idris.vim	/^    let s:incompleteFont = [ 'Consolas'$/;"	v
s:incompleteFont	cache-plug/vim-polyglot/after/syntax/idris2.vim	/^    let s:incompleteFont = [ 'Consolas'$/;"	v
s:indent	cache-plug/vim-gitgutter/test/runner.vim	/^let s:indent = ''$/;"	v
s:indent	cache-plug/vim-gitgutter/test/runner.vim	/^let s:indent = max(map(copy(s:tests), {_, val -> len(FriendlyName(val))}))$/;"	v
s:indent_access_modifier_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:indent_access_modifier_regex = '\\C^\\s*\\%(protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:indent_tags	cache-plug/vim-polyglot/after/indent/html.vim	/^let s:indent_tags = {}$/;"	v
s:indent_tags	cache-plug/vim-polyglot/indent/html.vim	/^let s:indent_tags = {}$/;"	v
s:indexes	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:int_regex	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:int_regex = '\\%(' . s:hex_regex .$/;"	v
s:int_suf	cache-plug/vim-polyglot/syntax/nim.vim	/^  let s:int_suf = '%(''%(%(i|I|u|U)%(8|16|32|64)|u|U))'$/;"	v
s:interp_dollar	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:interp_dollar = '\\([' . s:nonidS_chars . s:uniop_chars . s:binop_chars . '!?]\\|^\\)\\@'.s:d(1).'<=\\$'$/;"	v
s:interpreters	cache-plug/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:interpreters = {$/;"	v
s:invert	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:invert=0$/;"	v
s:isAsyncVim	cache-plug/vim-prettier/autoload/prettier/job/runner.vim	/^let s:isAsyncVim = !s:isLegacyVim && exists('*job_start')$/;"	v
s:isLegacyVim	cache-plug/vim-prettier/autoload/prettier/job/runner.vim	/^let s:isLegacyVim = v:version < 800$/;"	v
s:isNeoVim	cache-plug/vim-prettier/autoload/prettier/job/runner.vim	/^let s:isNeoVim = has('nvim')$/;"	v
s:is_gvim	cache-plug/coc.nvim/plugin/coc.vim	/^let s:is_gvim = get(v:, 'progname', '') ==# 'gvim'$/;"	v
s:is_unix	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/client.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/compat.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/float.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/list.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/snippet.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/task.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/autoload/coc/util.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	cache-plug/coc.nvim/plugin/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vital_vim	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:is_win	cache-plug/coc.nvim/autoload/coc/client.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	cache-plug/coc.nvim/autoload/coc/terminal.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	cache-plug/coc.nvim/autoload/coc/util.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	cache-plug/coc.nvim/plugin/coc.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	cache-plug/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	cache-plug/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	cache-plug/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_windows	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:iskeyword_save	cache-plug/vim-polyglot/syntax/php.vim	/^let s:iskeyword_save = &iskeyword$/;"	v
s:italics	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^let s:italics = (&t_ZH != '' && &t_ZH != '[7m') || has('gui_running') || has('nvim')$/;"	v
s:italics	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^let s:italics = s:italics && get(g:, 'gruvbox_italics', 1)$/;"	v
s:italics	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^let s:italics = (&t_ZH != '' && &t_ZH != '[7m') || has('gui_running') || has('nvim')$/;"	v
s:italics	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^let s:italics = s:italics && get(g:, 'gruvbox_italics', 1)$/;"	v
s:italics	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^let s:italics = (&t_ZH != '' && &t_ZH != '[7m') || has('gui_running') || has('nvim')$/;"	v
s:italics	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^let s:italics = s:italics && get(g:, 'gruvbox_italics', 1)$/;"	v
s:item_pattern	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:itemization_pattern	cache-plug/vim-polyglot/indent/rst.vim	/^let s:itemization_pattern = '^\\s*[-*+]\\s'$/;"	v
s:jobs	cache-plug/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:jobs = {}$/;"	v
s:js_keywords	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:js_keywords = '^\\s*\\(break\\|case\\|catch\\|continue\\|debugger\\|default\\|delete\\|do\\|else\\|finally\\|for\\|function\\|if\\|in\\|instanceof\\|new\\|return\\|switch\\|this\\|throw\\|try\\|typeof\\|var\\|void\\|while\\|with\\)'$/;"	v
s:js_keywords	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:js_keywords = '^\\s*\\(break\\|case\\|catch\\|continue\\|debugger\\|default\\|delete\\|do\\|else\\|finally\\|for\\|function\\|if\\|in\\|instanceof\\|new\\|return\\|switch\\|this\\|throw\\|try\\|typeof\\|var\\|void\\|while\\|with\\)'$/;"	v
s:jsx_cpo	cache-plug/vim-polyglot/after/syntax/jsx.vim	/^let s:jsx_cpo = &cpo$/;"	v
s:jsx_cpo	cache-plug/vim-polyglot/after/syntax/tsx.vim	/^let s:jsx_cpo = &cpo$/;"	v
s:julia_blocks_functions	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^let s:julia_blocks_functions = {$/;"	v
s:julia_highlight_operators	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:julia_highlight_operators = get(g:, "julia_highlight_operators", 1)$/;"	v
s:julia_spellcheck_comments	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_comments = get(g:, "julia_spellcheck_comments", 1)$/;"	v
s:julia_spellcheck_docstrings	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_docstrings = get(g:, "julia_spellcheck_docstrings", 1)$/;"	v
s:julia_spellcheck_strings	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:julia_spellcheck_strings = get(g:, "julia_spellcheck_strings", 0)$/;"	v
s:just_inserted_rule_rx	cache-plug/vim-polyglot/indent/make.vim	/^let s:just_inserted_rule_rx = '^\\s*[^#:]\\+:\\{1,2}$'$/;"	v
s:just_inserted_rule_rx	cache-plug/vim-polyglot/indent/omake.vim	/^let s:just_inserted_rule_rx = '^\\s*[^#:]\\+:\\{1,2}$'$/;"	v
s:keepcpo	cache-plug/vim-polyglot/after/indent/jsx.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/after/indent/tsx.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/autoload/ada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/compiler/cs.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/compiler/tex.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/ftplugin/cs.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/ftplugin/meson.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/ftplugin/occam.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/ftplugin/pyrex.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/ada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/cmake.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/css.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/gdscript3.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/java.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/meson.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/mp.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/occam.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/pgsql.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/scss.vim	/^let s:keepcpo= &cpoptions$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/svg.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/indent/xinetd.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/ada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/autoit.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/cmake.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/cucumber.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/datascript.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/fvwm.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/lsl.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/po.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/sil.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/taskdata.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/taskedit.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	cache-plug/vim-polyglot/syntax/tex.vim	/^let s:keepcpo= &cpo$/;"	v
s:kernels	cache-plug/vim-polyglot/syntax/debcontrol.vim	/^let s:kernels = ['linux', 'hurd', 'kfreebsd', 'knetbsd', 'kopensolaris', 'netbsd']$/;"	v
s:key_value	cache-plug/vim-polyglot/indent/ansible.vim	/^let s:key_value = '\\v^\\s*[^:-]+:\\s*\\S' " apt: name=package$/;"	v
s:keywords	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:keywords = {$/;"	v
s:known_files	cache-plug/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	cache-plug/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^      let s:lang = ""$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^      let s:lang = &langmenu$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^      let s:lang = s:lang . '.' . &enc$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^      let s:lang = substitute(s:lang, '\\.[^.]*', "", "")$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(s:lang, " ", "_", "g")$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(s:lang, "@euro", "", "")$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(s:lang, '\\.iso8859', ".iso_8859", "")$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(s:lang, 'iso_8859-15\\=$', "latin1", "")$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^    let s:lang = substitute(tolower(s:lang), '\\.iso-', ".iso_", "")$/;"	v
s:lang	cache-plug/vim-polyglot/extras/menu.vim	/^    let s:lang = v:lang$/;"	v
s:language	cache-plug/vim-polyglot/indent/vue.vim	/^    let s:language.indentexpr = s:get_indentexpr(s:language.name)$/;"	v
s:languages	cache-plug/vim-polyglot/indent/vue.vim	/^let s:languages = [$/;"	v
s:languages	cache-plug/vim-polyglot/syntax/svelte.vim	/^  let s:languages += g:svelte_preprocessor_tags$/;"	v
s:languages	cache-plug/vim-polyglot/syntax/svelte.vim	/^let s:languages = [$/;"	v
s:languages	cache-plug/vim-polyglot/syntax/vue.vim	/^let s:languages = [$/;"	v
s:last_changedtick	cache-plug/vim-polyglot/indent/erlang.vim	/^let s:last_changedtick = -1$/;"	v
s:last_time	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	cache-plug/vim-fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:last_wildignores	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:launcher	cache-plug/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	cache-plug/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layout_keys	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	cache-plug/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'tmux', 'up', 'down', 'left', 'right']$/;"	v
s:lb1	cache-plug/vim-polyglot/syntax/ledger.vim	/^let s:lb1 = '\\@1<='$/;"	v
s:leading_operator_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:leading_operator_regex = '^\\s*\\%(&\\=\\.\\)'$/;"	v
s:ledgerAmount_contains	cache-plug/vim-polyglot/syntax/ledger.vim	/^    let s:ledgerAmount_contains .= '@NoSpell'$/;"	v
s:ledgerAmount_contains	cache-plug/vim-polyglot/syntax/ledger.vim	/^let s:ledgerAmount_contains = ''$/;"	v
s:length_pattern	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^let s:length_pattern = '\\%(\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|\\d\\)\\|\\d\\+\\)\\>'$/;"	v
s:letlim	cache-plug/vim-polyglot/indent/ocaml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letlim	cache-plug/vim-polyglot/indent/sml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letpat	cache-plug/vim-polyglot/indent/ocaml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:letpat	cache-plug/vim-polyglot/indent/sml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:levelRegexpDict	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^let s:levelRegexpDict = {$/;"	v
s:lightGray	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:lightGray = [ '#848794' , 245 ]$/;"	v
s:lim	cache-plug/vim-polyglot/indent/ocaml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:lim	cache-plug/vim-polyglot/indent/sml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:lime	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:lime = [ '#00ff00', 10 ]$/;"	v
s:line_comment_chars	cache-plug/vim-polyglot/syntax/ledger.vim	/^let s:line_comment_chars = b:is_hledger ? ';*#' : ';|*#%'$/;"	v
s:line_term	cache-plug/vim-polyglot/indent/json.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:line_term	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:line_term	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:lines	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let s:lines = join(getline(1, 5) + [getline('$')], "\\n")$/;"	v
s:lines	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	cache-plug/vim-polyglot/ftplugin/liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	cache-plug/vim-polyglot/syntax/eelixir.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	cache-plug/vim-polyglot/syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	cache-plug/vim-polyglot/syntax/jst.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	cache-plug/vim-polyglot/syntax/liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	cache-plug/vim-polyglot/syntax/ragel.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:liststartregex	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:liststartregex='\\v^\\s*%(\\-%(\\ |$))'$/;"	v
s:lmax	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^    let s:lmax = 500$/;"	v
s:lmax	cache-plug/vim-polyglot/indent/fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	cache-plug/vim-polyglot/indent/fortran.vim	/^    let s:lmax = 500$/;"	v
s:lmax	cache-plug/vim-polyglot/syntax/fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	cache-plug/vim-polyglot/syntax/fortran.vim	/^    let s:lmax = 500$/;"	v
s:ln	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^    let s:ln=1$/;"	v
s:ln	cache-plug/vim-polyglot/indent/fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	cache-plug/vim-polyglot/indent/fortran.vim	/^    let s:ln=1$/;"	v
s:ln	cache-plug/vim-polyglot/syntax/fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	cache-plug/vim-polyglot/syntax/fortran.vim	/^    let s:ln=1$/;"	v
s:loaded	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:loaded = {}$/;"	v
s:loaded_delimitMate	cache-plug/delimitMate/plugin/delimitMate.vim	/^let s:loaded_delimitMate = 1$/;"	v
s:log_diff_context	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, v:key), "module": strpart(v:val, 0, len(a:state.base_module)) . from}'$/;"	v
s:log_file	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:log_file    = s:plugin_dir.'gitgutter.log'$/;"	v
s:logfile	cache-plug/coc.nvim/autoload/coc/client.vim	/^    let s:logfile = resolve($NODE_CLIENT_LOG_FILE)$/;"	v
s:logfile	cache-plug/coc.nvim/autoload/coc/client.vim	/^    let s:logfile = tempname()$/;"	v
s:m	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let s:m = matchstr(s:modeline,'default\\s*=\\s*\\d\\+')$/;"	v
s:m	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let s:m = matchstr(s:modeline,'struct\\s*=\\s*\\d\\+')$/;"	v
s:macro_end	cache-plug/vim-polyglot/indent/sas.vim	/^let s:macro_end = '\\v%(^|;)\\s*\\%mend\\s*;'$/;"	v
s:macro_regex	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let s:macro_regex = '\\%(@\\%([#(]\\@!\\S\\)\\+\\|\\<\\%(local\\|global\\)\\)\\s\\+'$/;"	v
s:macro_str	cache-plug/vim-polyglot/indent/sas.vim	/^let s:macro_str = '\\v%(^|;)\\s*\\%macro>'$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:magenta = '#8959a8'$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:magenta = '#b294bb'$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:magenta = '#ebbbff'$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:magenta = '#c397d8'$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:magenta = '#cc99cc'$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:magenta = '#ffee99'$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:magenta = '#A37ACC'$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:magenta = '#d4bfff'$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:magenta = [ '#f0a0c0', 217 ]$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:magenta   = ['#eb6eb7', 5]$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:magenta   = ['#f275be', 5]$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:magenta   = ['#ca4898', 5]$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:magenta   = ['#dd0f9d', 5]$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:magenta = [ '#df5f87', 168 ]$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:magenta = [ '#d33682', s:cuicolors.magenta[s:cuiindex] ]$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:magenta = [ '#e02c6d', 5 ]$/;"	v
s:magenta	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:magenta = [ '#f2c68a', 216 ]$/;"	v
s:mainfont	cache-plug/vim-polyglot/after/syntax/idris.vim	/^    let s:mainfont = substitute( &guifont, '^\\([^:,]\\+\\).*', '\\1', '')$/;"	v
s:mainfont	cache-plug/vim-polyglot/after/syntax/idris2.vim	/^    let s:mainfont = substitute( &guifont, '^\\([^:,]\\+\\).*', '\\1', '')$/;"	v
s:maj	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:maj=matchstr(s:tmp, '\\d\\+') * 100$/;"	v
s:map_next	cache-plug/coc.nvim/autoload/coc/snippet.vim	/^let s:map_next = 1$/;"	v
s:mapkeyregex	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:mapkeyregex='\\v^\\s*\\#@!\\S@=%(\\''%([^'']|\\''\\'')*\\'''.$/;"	v
s:mark_complements	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:mark_complements=s:mark_left . 'cOmPLemEnTs' . s:mark_right$/;"	v
s:mark_left	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:mark_left="\\<Esc>" . strftime("%X") . ":" . strftime("%d") . "\\<C-f>"$/;"	v
s:mark_right	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:mark_right="\\<C-l>" . strftime("%X") . ":" . strftime("%d") . "\\<Esc>"$/;"	v
s:maroon	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:maroon = [ '#800000', 1 ]$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^let s:match_words = ""$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/config.vim	/^let s:match_words = ""$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^let s:match_words = ''$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^let s:match_words = ""$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:match_words = ""$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let s:match_words = ""$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/haml.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/haml.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/haml.vim	/^let s:match_words = ""$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^    let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^let s:match_words = ""$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/pug.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/pug.vim	/^let s:match_words = ""$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^let s:match_words = ""$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^    let s:match_words = b:match_words . "," . s:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^let s:match_words = ""$/;"	v
s:maxoff	cache-plug/vim-polyglot/indent/bzl.vim	/^let s:maxoff = 50$/;"	v
s:maxoff	cache-plug/vim-polyglot/indent/gdscript3.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:maxoff	cache-plug/vim-polyglot/indent/meson.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:maxoff	cache-plug/vim-polyglot/indent/zimbu.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:merge_heads	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:messages	cache-plug/vim-gitgutter/test/runner.vim	/^let s:messages = []$/;"	v
s:meta_chars	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:meta_chars='$*.[\\]^~'$/;"	v
s:midBlock	cache-plug/vim-polyglot/indent/octave.vim	/^let s:midBlock = ['case', 'catch', 'else', 'elseif', 'otherwise',$/;"	v
s:middle_patt	cache-plug/vim-polyglot/indent/lua.vim	/^let s:middle_patt = '\\C\\<\\%(else\\|elseif\\)\\>'$/;"	v
s:min	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:min=matchstr(s:tmp, '\\.\\zs\\d\\+') + 0$/;"	v
s:min_version	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:min_version = '0.23.0'$/;"	v
s:mindmapHilightLinks	cache-plug/vim-polyglot/syntax/plantuml.vim	/^let s:mindmapHilightLinks = [$/;"	v
s:mmssff_pattern	cache-plug/vim-polyglot/syntax/cdrtoc.vim	/^let s:mmssff_pattern = '\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|\\d\\)\\>'$/;"	v
s:mode	cache-plug/lightline.vim/autoload/lightline.vim	/^let s:mode = ''$/;"	v
s:modeline	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^let s:modeline = lnum? getline(lnum): ""$/;"	v
s:modifierMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^let s:modifierMatcher = s:annotationMatcher . '\\|\\%(private\\|protected\\)\\%(\\[[^\\]]*\\]\\)\\?\\s\\+\\|abstract\\s\\+\\|override\\s\\+\\|final\\s\\+'$/;"	v
s:module	cache-plug/vim-polyglot/indent/ocaml.vim	/^let s:module = '\\<\\%(begin\\|sig\\|struct\\|object\\)\\>'$/;"	v
s:module	cache-plug/vim-polyglot/indent/sml.vim	/^let s:module = '\\<\\%(let\\|sig\\|struct\\)\\>'$/;"	v
s:mp_regex	cache-plug/vim-polyglot/ftplugin/mf.vim	/^let s:mp_regex = {$/;"	v
s:mp_regex	cache-plug/vim-polyglot/ftplugin/mp.vim	/^let s:mp_regex = {$/;"	v
s:msl_regex	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:msl_regex = '\\%([\\\\*+\/.:([]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)' . s:line_term$/;"	v
s:msl_regex	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:msl_regex = s:continuation_regex$/;"	v
s:multiline	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:multiline=0$/;"	v
s:name	cache-plug/coc.nvim/autoload/coc/rpc.vim	/^let s:name = 'coc'$/;"	v
s:named_module_entry	cache-plug/vim-polyglot/indent/ansible.vim	/^let s:named_module_entry = '\\v^\\s*-\\s*(name|hosts|role):\\s*\\S' " - name: 'do stuff'$/;"	v
s:names	cache-plug/vim-polyglot/syntax/ruby.vim	/^let s:names = { '~': 'Tilde', '`': 'BackQuote', '!': 'Bang', '@': 'At', '#': 'Hash', '$': 'Dollar', '%': 'Percent', '^': 'Caret',$/;"	v
s:namespace_cache	cache-plug/coc.nvim/autoload/coc/api.vim	/^let s:namespace_cache = {}$/;"	v
s:namespace_id	cache-plug/coc.nvim/autoload/coc/api.vim	/^let s:namespace_id = 1$/;"	v
s:namespace_map	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^let s:namespace_map = {}$/;"	v
s:navy	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:navy = [ '#000080', 4 ]$/;"	v
s:navy	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:navy = '#df875f'$/;"	v
s:navy	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:navy = '#005f87'$/;"	v
s:nbs	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
s:need_trans	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:new_log_session	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:new_log_session = 1$/;"	v
s:new_polyglot_disabled	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^let s:new_polyglot_disabled = []$/;"	v
s:next_sign_id	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:next_sign_id  = s:first_sign_id$/;"	v
s:nm	cache-plug/vim-polyglot/syntax/rmd.vim	/^    let s:nm  = s:type$/;"	v
s:nm	cache-plug/vim-polyglot/syntax/rmd.vim	/^    let s:nm = substitute(s:type, '=.*', '', '')$/;"	v
s:nodot	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:nodot = '\\%(\\.\\)\\@'.s:d(1).'<!'$/;"	v
s:nomacro	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let s:nomacro = '\\%(' . s:macro_regex . '\\)\\@<!'$/;"	v
s:nomodeline	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
s:nomodeline	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
s:nomodeline	cache-plug/vim-gitgutter/plugin/gitgutter.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
s:non_bracket_continuation_regex	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:non_bracket_continuation_regex = '\\%([\\\\.,:*\/%+]\\|\\<and\\|\\<or\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:non_bracket_continuation_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:non_bracket_continuation_regex =$/;"	v
s:none	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:none = [ 'NONE', 'NONE' ]$/;"	v
s:nonidS_chars	cache-plug/vim-polyglot/autoload/julia.vim	/^let s:nonidS_chars = "[:space:])\\\\U5D}" . s:nonid_chars$/;"	v
s:nonidS_chars	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:nonidS_chars = "[:space:])\\\\U5D}" . s:nonid_chars$/;"	v
s:nonid_chars	cache-plug/vim-polyglot/autoload/julia.vim	/^let s:nonid_chars = "\\U01-\\U07" . "\\U0E-\\U1F" .$/;"	v
s:nonid_chars	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:nonid_chars = "\\U01-\\U07" . "\\U0E-\\U1F" .$/;"	v
s:nord0	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord0 = ["#2E3440", "NONE"]$/;"	v
s:nord1	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord1 = ["#3B4252", 0]$/;"	v
s:nord10	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord10 = ["#5E81AC", 12]$/;"	v
s:nord11	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord11 = ["#BF616A", 1]$/;"	v
s:nord12	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord12 = ["#D08770", 11]$/;"	v
s:nord13	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord13 = ["#EBCB8B", 3]$/;"	v
s:nord14	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord14 = ["#A3BE8C", 2]$/;"	v
s:nord15	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord15 = ["#B48EAD", 5]$/;"	v
s:nord2	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord2 = ["#434C5E", "NONE"]$/;"	v
s:nord3	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord3 = ["#4C566A", 8]$/;"	v
s:nord4	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord4 = ["#D8DEE9", "NONE"]$/;"	v
s:nord5	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord5 = ["#E5E9F0", 7]$/;"	v
s:nord6	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord6 = ["#ECEFF4", 15]$/;"	v
s:nord7	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord7 = ["#8FBCBB", 14]$/;"	v
s:nord8	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord8 = ["#88C0D0", 6]$/;"	v
s:nord9	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord9 = ["#81A1C1", 4]$/;"	v
s:not_end	cache-plug/vim-polyglot/ftplugin/framescript.vim	/^  let s:not_end = '\\c\\%(\\<End\\)\\@<!'$/;"	v
s:note_pattern	cache-plug/vim-polyglot/indent/rst.vim	/^let s:note_pattern = '^\\.\\. '$/;"	v
s:notelse	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^  let s:notelse = '\\%(\\<end\\s\\+\\|\\<else\\s\\+\\)\\@<!'$/;"	v
s:notend	cache-plug/vim-polyglot/ftplugin/ada.vim	/^   let s:notend      = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	cache-plug/vim-polyglot/ftplugin/vhdl.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notprocedure	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^  let s:notprocedure = '\\%(\\s\\+procedure\\>\\)\\@!'$/;"	v
s:notselect	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^  let s:notselect = '\\%(\\<select\\s\\+\\)\\@<!'$/;"	v
s:nowait	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nowait	cache-plug/vim-fugitive/plugin/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:ns_char	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_char = '\\%([\\n\\r\\uFEFF \\t]\\@!\\p\\)'$/;"	v
s:ns_char	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_char = s:SimplifyToAssumeAllPrintable(s:ns_char)$/;"	v
s:ns_char_without_c_indicator	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_char_without_c_indicator = s:SimplifyToAssumeAllPrintable(s:ns_char_without_c_indicator)$/;"	v
s:ns_char_without_c_indicator	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_char_without_c_indicator = substitute(s:ns_char, '\\v\\C[\\zs', '\\=s:c_indicator[1:-2]', '')$/;"	v
s:ns_directive_name	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_directive_name = s:ns_char.'\\+'$/;"	v
s:ns_global_tag_prefix	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_global_tag_prefix = s:ns_tag_char.s:ns_uri_char.'*'$/;"	v
s:ns_id	cache-plug/coc.nvim/autoload/coc/highlight.vim	/^let s:ns_id = 1$/;"	v
s:ns_local_tag_prefix	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_local_tag_prefix  = '!'.s:ns_uri_char.'*'$/;"	v
s:ns_plain_char_in	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_char_in  = '\\%('.s:ns_char.'#\\|:'.s:ns_plain_safe_in.'\\|'.s:ns_plain_safe_in_without_colhash.'\\)'$/;"	v
s:ns_plain_char_out	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_char_out = '\\%('.s:ns_char.'#\\|:'.s:ns_plain_safe_out.'\\|'.s:ns_plain_safe_out_without_colhash.'\\)'$/;"	v
s:ns_plain_first_in	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_first_in  = '\\%('.s:ns_char_without_c_indicator.'\\|[?:\\-]\\%('.s:ns_plain_safe_in.'\\)\\@=\\)'$/;"	v
s:ns_plain_first_out	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_first_out = '\\%('.s:ns_char_without_c_indicator.'\\|[?:\\-]\\%('.s:ns_plain_safe_out.'\\)\\@=\\)'$/;"	v
s:ns_plain_in	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_in  = s:ns_plain_first_in  . s:ns_plain_char_in.'*'$/;"	v
s:ns_plain_out	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_out = s:ns_plain_first_out . s:ns_plain_char_out.'*'$/;"	v
s:ns_plain_safe_in	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_in  = '\\%('.s:c_flow_indicator.'\\@!'.s:ns_char.'\\)'$/;"	v
s:ns_plain_safe_in	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_in = substitute(s:ns_plain_safe_in, '\\V\\C\\\\%('.s:_collection.'\\\\@!'.s:_neg_collection.'\\\\)', '[^\\1\\2]', '')$/;"	v
s:ns_plain_safe_in_without_colhash	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_in_without_colhash = substitute(s:ns_plain_safe_in, '\\V\\C'.s:_neg_collection, '[^\\1:#]', '')$/;"	v
s:ns_plain_safe_out	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_out = s:ns_char$/;"	v
s:ns_plain_safe_out_without_colhash	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_plain_safe_out_without_colhash = substitute(s:ns_plain_safe_out, '\\V\\C'.s:_neg_collection, '[^\\1:#]', '')$/;"	v
s:ns_tag_char	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:ns_tag_char  = '\\v%(%\\x\\x|'.s:ns_word_char.'|[#\/;?:@&=+$.~*''()])'$/;"	v
s:ns_tag_char	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_tag_char  = '\\%(%\\x\\x\\|'.s:ns_word_char.'\\|[#\/;?:@&=+$.~*''()]\\)'$/;"	v
s:ns_tag_char	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_tag_char = s:SimplifyAdjacentCollections(s:ns_tag_char)$/;"	v
s:ns_tag_prefix	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_tag_prefix = s:ns_local_tag_prefix.$/;"	v
s:ns_uri_char	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:ns_uri_char  = '\\v%(%\\x\\x|'.s:ns_word_char.'\\v|[#\/;?:@&=+$,.!~*''()[\\]])'$/;"	v
s:ns_uri_char	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_uri_char  = '\\%(%\\x\\x\\|'.s:ns_word_char.'\\|[#\/;?:@&=+$,.!~*''()[\\]]\\)'$/;"	v
s:ns_uri_char	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_uri_char = s:SimplifyAdjacentCollections(s:ns_uri_char)$/;"	v
s:ns_word_char	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:ns_word_char = '\\v[[:alnum:]_\\-]'$/;"	v
s:ns_word_char	cache-plug/vim-polyglot/syntax/yaml.vim	/^let s:ns_word_char = '[[:alnum:]_\\-]'$/;"	v
s:obj	cache-plug/vim-polyglot/indent/ocaml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:obj	cache-plug/vim-polyglot/indent/sml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:ocaml_word_char	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    let s:ocaml_word_char = '\\w|[\\xc0-\\xff]|'''$/;"	v
s:oct_regex	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:oct_regex = '0o\\o\\%(_\\?\\o\\)*\\%(\\>\\|im\\>\\|\\ze\\O\\)'$/;"	v
s:oe	cache-plug/vim-polyglot/syntax/ledger.vim	/^let s:oe = '\\%#=1'$/;"	v
s:old_spec	cache-plug/vim-polyglot/syntax/rst.vim	/^    let s:old_spec = g:rst_syntax_code_list$/;"	v
s:old_style	cache-plug/vim-polyglot/syntax/erlang.vim	/^let s:old_style = (exists("g:erlang_old_style_highlight") &&$/;"	v
s:oldcolumn	cache-plug/vim-polyglot/syntax/lhaskell.vim	/^let s:oldcolumn=col(".")$/;"	v
s:oldline	cache-plug/vim-polyglot/syntax/lhaskell.vim	/^let s:oldline=line(".")$/;"	v
s:olive	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:olive = [ '#808000', 3 ]$/;"	v
s:olive	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:olive = '#dfaf5f'$/;"	v
s:olive	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:olive = '#718c00'$/;"	v
s:one_line_scope_regex	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:one_line_scope_regex = '\\<\\%(if\\|else\\|for\\|while\\)\\>[^{;]*' . s:line_term$/;"	v
s:one_line_scope_regex	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:one_line_scope_regex = '\\<\\%(if\\|else\\|for\\|while\\)\\>[^{;]*' . s:line_term$/;"	v
s:oneline	cache-plug/vim-polyglot/syntax/markdown.vim	/^    let s:oneline = ' oneline'$/;"	v
s:oneline	cache-plug/vim-polyglot/syntax/markdown.vim	/^    let s:oneline = ''$/;"	v
s:openBlock	cache-plug/vim-polyglot/indent/octave.vim	/^let s:openBlock = s:beginBlock + s:midBlock$/;"	v
s:open_patt	cache-plug/vim-polyglot/indent/lua.vim	/^let s:open_patt = '\\C\\%(\\<\\%(function\\|if\\|repeat\\|do\\)\\>\\|(\\|{\\)'$/;"	v
s:operators	cache-plug/vim-polyglot/autoload/julia.vim	/^let s:operators = '\\%(' . '\\.\\%([-+*\/^÷%|&!]\\|\/\/\\|\\\\\\|<<\\|>>>\\?\\)\\?=' .$/;"	v
s:operators	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:operators = '\\%(' . '\\.\\%([-+*\/^÷%|&!]\\|\/\/\\|\\\\\\|<<\\|>>>\\?\\)\\?=' .$/;"	v
s:opfirst	cache-plug/vim-polyglot/indent/javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:options	cache-plug/delimitMate/autoload/delimitMate.vim	/^  let s:options = {}$/;"	v
s:or_replace	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let s:or_replace = '\\%(or\\s\\+replace\\s\\+\\)\\?'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:orange = [ '#ef7c2a' , 202 ]$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:orange = '#d75f00'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:orange = '#d75f00'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:orange = '#f5871f'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:orange = '#de935f'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:orange = '#ffc58f'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:orange = '#e78c45'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:orange = '#f99157'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:orange = '#ff7733'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:orange = '#FF7733'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:orange = '#ffae57'$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:orange = [ '#fad07a', 222 ]$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:orange = [ '#ef5939', 166 ]$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:orange = [ '#d7875f', 216 ]$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:orange = [ '#cb4b16', s:cuicolors.orange[s:cuiindex] ]$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:orange = [ '#d75f00', 166 ]$/;"	v
s:orange	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:orange = [ '#e5786d', 173 ]$/;"	v
s:orders	cache-plug/vim-polyglot/syntax/hostconf.vim	/^let s:orders = ['bind', 'hosts', 'nis']$/;"	v
s:ordot	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^    let s:ordot = '\\|\\ze\\.\\%( \\@=\\|$\\)'$/;"	v
s:original_cpo	cache-plug/vim-polyglot/syntax/tmux.vim	/^let s:original_cpo = &cpo$/;"	v
s:other_mf_macros	cache-plug/vim-polyglot/syntax/mp.vim	/^  let s:other_mf_macros = g:other_mf_macros$/;"	v
s:out_remain_text	cache-plug/coc.nvim/autoload/coc/task.vim	/^let s:out_remain_text = {}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.left =  [ [ s:silver, s:gray ], [ s:gray, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.middle = [ [ s:silver, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.right = [ [ s:silver, s:gray ], [ s:gray, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.insert.left = [ [ s:white, s:green ], [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.insert.right = copy(s:p.insert.left)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.error = [ [ s:black, s:red ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.left = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.middle = [ [ s:silver, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.right = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.warning = [ [ s:black, s:yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.replace.left = [ [ s:white, s:red ], [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.replace.right = copy(s:p.replace.left)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.left = [ [ s:silver, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.middle = [ [ s:silver, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.tabsel = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.visual.left = [ [ s:white, s:purple ], [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.visual.right = copy(s:p.visual.left)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.left = [ [ s:lightGray, s:darkGray ], [ s:white, s:darkGray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.middle = [ [ s:white, s:darkGray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.right = [ [ s:darkGray, s:gray ], [ s:darkGray, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.insert.left = [ [ s:white, s:green ], [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.insert.right = copy(s:p.insert.left)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.error = [ [ s:red, s:darkGray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.left = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.middle = [ [ s:white, s:darkGray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.right = copy(s:p.normal.left)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.warning = [ [ s:orange, s:darkGray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.replace.left = [ [ s:white, s:red ], [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.replace.right = copy(s:p.replace.left)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.left = [ [ s:lightGray, s:darkGray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.middle = [ [ s:yellow, s:veryDarkGray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.right = copy(s:p.tabline.left)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.tabsel = [ [ s:darkGray, s:yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.visual.left = [ [ s:white, s:orange ], [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.visual.right = copy(s:p.visual.left)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.insert.left = [ [ s:background, s:blue], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.visual.left = [ [ s:visual_fg, s:visual_bg ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.insert.left = [ [ s:blue, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.warning = [ [ s:background, s:olive ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.visual.left = [ [ s:background, s:orange ], [s:statusline_active_fg, s:status ], [ s:statusline_active_fg, s:statusline_active_bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.error = [ [ s:red, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base0 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base0 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base01 ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.inactive.right = [ [ s:base1, s:base01 ], [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.tabsel = [ [ s:base02, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base01 ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.inactive.right = [ [ s:base1, s:base01 ], [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.tabsel = [ [ s:base02, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base01 ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.inactive.right = [ [ s:base1, s:base01 ], [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.tabsel = [ [ s:base02, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.left =  [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.right = [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:gray ] ] $/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.right = [ [ s:black, s:green ], [ s:green, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.error = [ [ s:red, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.left = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.right = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.right = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.left = [ [ s:blue, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.middle = [ [ s:blue, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.right = [ [ s:black, s:blue ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:blue ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.right = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.inactive.right = [ [ '#292c33', '#61afef', s:term_black, s:term_blue], [ '#abb2bf', '#3e4452', s:term_white, s:term_grey ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.left = [ [ '#292c33', '#61afef', s:term_black, s:term_blue, 'bold' ], [ '#61afef', '#292c33', s:term_blue, s:term_black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.middle = s:p.normal.middle$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.right = [ [ '#292c33', '#61afef', s:term_black, s:term_blue ], [ '#ABB2BF', '#3E4452', s:term_white, s:term_grey ], [ '#61afef', '#292c33', s:term_blue, s:term_black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.error = [ [ '#292c33', '#e06c75', s:term_black, s:term_red ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.left = [ [ '#292c33', '#98c379', s:term_black, s:term_green, 'bold' ], [ '#98c379', '#292c33', s:term_green, s:term_black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.middle = [ [ '#abb2bf', '#292c33', s:term_white, s:term_black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.right = [ [ '#292c33', '#98c379', s:term_black, s:term_green ], [ '#abb2bf', '#3e4452', s:term_white, s:term_grey ], [ '#98c379', '#292c33', s:term_green, s:term_black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.warning = [ [ '#292c33', '#e5c07b', s:term_black, s:term_yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.left = [ [ '#292c33', '#e06c75', s:term_black, s:term_red, 'bold' ], [ '#e06c75', '#292c33', s:term_red, s:term_black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.right = [ [ '#292c33', '#e06c75', s:term_black, s:term_red ], s:p.normal.right[1], [ '#e06c75', '#292c33', s:term_red, s:term_black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.left = [ s:p.normal.left[1] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.middle = s:p.normal.middle$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.right = [ s:p.normal.left[1] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.tabsel = [ s:p.normal.left[0] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.visual.left = [ [ '#292c33', '#c678dd', s:term_black, s:term_purple, 'bold' ], [ '#c678dd', '#292c33', s:term_purple, s:term_black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.visual.right = [ [ '#292c33', '#c678dd', s:term_black, s:term_purple ], s:p.normal.right[1], [ '#c678dd', '#292c33', s:term_purple, s:term_black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.replace.left = [ [ s:base02, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.left = copy(s:p.normal.middle)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.middle = copy(s:p.normal.middle)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.right = copy(s:p.tabline.middle)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.middle = [ [ '#303030', '#121212', 236, 233 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.right = [ [ '#121212', '#606060', 233, 241 ], [ '#121212', '#3a3a3a', 233, 237 ], [ '#121212', '#262626', 233, 235 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.insert.left =  [ ['#005f00', '#ffffff', 22, 231, 'bold' ], [ '#ffffff', '#005f00', 231, 22 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.error = [ [ '#d0d0d0', '#ff0000', 252, 196 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.left = [ ['#0000ff', '#ffffff', 21, 231, 'bold' ], [ '#ffffff', '#0000ff', 231, 21 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.middle = [ [ '#8a8a8a', '#303030', 245, 236 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.right = [ [ '#303030', '#d0d0d0', 236, 252 ], [ '#303030', '#8a8a8a', 236, 245 ], [ '#bcbcbc', '#585858', 250, 240 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.warning = [ [ '#262626', '#ffff00', 235, 226 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.replace.left = [ [ '#af0000', '#ffffff', 124, 231, 'bold' ], [ '#ffffff', '#af0000', 231, 124 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.left = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.middle = [ [ '#8a8a8a', '#3a3a3a', 245, 237 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.right = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.tabsel = [ [ '#dadada', '#121212', 253, 233 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.visual.left = [ [ '#5f00ff', '#ffffff', 57, 231, 'bold' ], [ '#ffffff', '#5f00ff', 231, 57 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.insert.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.left   = [ [ s:bg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.right  = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.insert.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.insert.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.insert.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.left   = [ [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.right  = [ [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.left =  [ [ s:pink, s:black ], [ s:white, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.middle = [ [ s:gray, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.right = [ [ s:white, s:pink ], [ s:pink, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.error = [ [ s:pink, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.left = [ [ s:black, s:cyan ], [ s:orange, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.middle = [ [ s:orange, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.right = [ [ s:pink, s:black ], [ s:black, s:pink ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.left = [ [ s:pink, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.middle = [ [ s:pink, s:black] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:pink ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.left =  [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.middle = [ [ s:nord5, s:nord1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.insert.left = [ [ s:nord1, s:nord6 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.error = [ [ s:nord1, s:nord11 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.left = [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.warning = [ [ s:nord1, s:nord13 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.replace.left = [ [ s:nord1, s:nord13 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.left = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.right = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.tabsel = [ [ s:nord1, s:nord8 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.visual.left = [ [ s:nord1, s:nord7 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.insert.left    = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.insert.right   = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.error   = [ [ s:red2, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.left    = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.middle  = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.right   = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.replace.left   = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.left   = [ [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.right  = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.visual.left    = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.right = [ ['gray1', 'gray5'], ['gray4', 'gray1'], ['gray4', 'gray0'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.left = [ ['darkestcyan', 'white', 'bold'], ['white', 'darkblue'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.middle = [ [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.right = [ [ 'darkestcyan', 'mediumcyan' ], [ 'mediumcyan', 'darkblue' ], [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.error = [ [ 'gray9', 'brightestred' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.left = [ ['darkestgreen', 'brightgreen', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.middle = [ [ 'gray7', 'gray2' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.right = [ ['gray5', 'gray10'], ['gray9', 'gray4'], ['gray8', 'gray2'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.warning = [ [ 'gray1', 'yellow' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.left = [ ['white', 'brightred', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.right = s:p.normal.right$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.left = [ [ 'gray9', 'gray4' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.middle = [ [ 'gray2', 'gray8' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.right = [ [ 'gray9', 'gray3' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.tabsel = [ [ 'gray9', 'gray1' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.visual.left = [ ['darkred', 'brightorange', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.inactive.right = [ ['gray1', 'gray5'], ['gray4', 'gray1'], ['gray4', 'gray0'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.insert.left = [ ['darkestcyan', 'white', 'bold'], ['mediumcyan', 'darkestblue'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.insert.middle = [ [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.insert.right = [ [ 'darkestblue', 'mediumcyan' ], [ 'mediumcyan', 'darkblue' ], [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.error = [ [ 'gray9', 'brightestred' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.left = [ ['darkestgreen', 'brightgreen', 'bold'], ['white', 'gray0'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.middle = [ [ 'white', 'gray0' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.right = [ ['gray10', 'gray2'], ['white', 'gray1'], ['white', 'gray0'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.warning = [ [ 'gray1', 'yellow' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.replace.left = [ ['white', 'brightred', 'bold'], ['white', 'gray0'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.replace.right = s:p.normal.right$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.left = [ [ 'gray9', 'gray0' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.middle = [ [ 'gray2', 'gray0' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.right = [ [ 'gray9', 'gray1' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.tabsel = [ [ 'gray9', 'gray2' ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.visual.left = [ ['black', 'brightestorange', 'bold'], ['white', 'gray0'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.replace.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.visual.left = [ [ s:base02, s:peach ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.inactive.left =  [ [ s:gray, s:black ], [ s:black2, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.inactive.middle = [ [ s:black2, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.inactive.right = [ [ s:black, s:black2 ], [ s:gray, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.error = [ [ s:red, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.left = [ [ s:black, s:blue ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.middle = [ [ s:gray, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.right = [ [ s:gray, s:gray4 ], [ s:gray3, s:gray ], [ s:gray2, s:black2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.warning = [ [ s:gold, s:black2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.left = [ [ s:gray4, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.middle = [ [ s:black2, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.tabsel = [ [ s:blue, s:black ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.visual.left = [ [ s:black, s:violet ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.middle = [ [ s:base01, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.right = [ [ s:base03, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.insert.left = [ [ s:base03, s:green ], [ s:base03, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.left = [ [ s:base03, s:blue ], [ s:base03, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.right = [ [ s:base03, s:base1 ], [ s:base03, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.warning = [ [ s:base03, s:yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.replace.left = [ [ s:base03, s:red ], [ s:base03, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.left = [ [ s:base03, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.right = copy(s:p.tabline.left)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.tabsel = [ [ s:base03, s:base1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.visual.left = [ [ s:base03, s:magenta ], [ s:base03, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.insert.left = [ [ s:base02, s:bright_green, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.left = [ [ s:base02, s:bright_blue, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.replace.left = [ [ s:base3, s:red, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00, 'bold'] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.visual.left = [ [ s:base3, s:bright_magenta, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base02 ], [ s:base00, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.right = [ [ s:base023, s:base01 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base03 ] ]$/;"	v
s:p	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:pair_skip_expr	cache-plug/vim-polyglot/indent/graphql.vim	/^let s:pair_skip_expr =$/;"	v
s:pairs	cache-plug/vim-polyglot/syntax/debcontrol.vim	/^let s:pairs = [$/;"	v
s:paren_pairs	cache-plug/vim-polyglot/indent/cython.vim	/^let s:paren_pairs = {'()': 50, '[]': 100, '{}': 1000}$/;"	v
s:paren_pairs	cache-plug/vim-polyglot/indent/python.vim	/^let s:paren_pairs = {'()': 50, '[]': 100, '{}': 1000}$/;"	v
s:pat	cache-plug/vim-polyglot/compiler/coffee.vim	/^let s:pat = '^' . current_compiler$/;"	v
s:pat	cache-plug/vim-polyglot/compiler/ls.vim	/^let s:pat = '^' . current_compiler$/;"	v
s:path	cache-plug/vim-polyglot/autoload/db/adapter/ecto.vim	/^let s:path = expand('<sfile>:h')$/;"	v
s:path	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:path = &l:path$/;"	v
s:path	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let s:path = &l:path$/;"	v
s:pattern	cache-plug/vim-polyglot/ftplugin/twig.vim	/^                let s:pattern .= ':'$/;"	v
s:pattern	cache-plug/vim-polyglot/ftplugin/twig.vim	/^            let s:pattern .= '{%\\s*\\<' . s:tag . '\\>\\s*\\%(.*=\\)\\@![^}]\\{-}%}'$/;"	v
s:pattern	cache-plug/vim-polyglot/ftplugin/twig.vim	/^        let s:pattern .= ':{%\\s*\\<' . s:element[-1:][0] . '\\>\\s*.\\{-}%}'$/;"	v
s:pattern	cache-plug/vim-polyglot/ftplugin/twig.vim	/^        let s:pattern = ''$/;"	v
s:peach	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:peach = [ '#d7afaf', 181 ]$/;"	v
s:phpindent	cache-plug/vim-polyglot/indent/blade.vim	/^let s:phpindent = &indentexpr$/;"	v
s:pink	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:pink = '#afdf00'$/;"	v
s:pink	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:pink = '#d7005f'$/;"	v
s:pink	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:pink = [ '#f92672', 161 ]$/;"	v
s:plain_delims	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:plain_delims = [$/;"	v
s:plain_mf_macros	cache-plug/vim-polyglot/syntax/mp.vim	/^  let s:plain_mf_macros = g:plain_mf_macros$/;"	v
s:plain_mf_modes	cache-plug/vim-polyglot/syntax/mp.vim	/^  let s:plain_mf_modes = g:plain_mf_modes$/;"	v
s:plugin_dir	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:plugin_dir  = expand('<sfile>:p:h:h:h').'\/'$/;"	v
s:plugin_name	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:plugin_path	cache-plug/vim-polyglot/autoload/nim.vim	/^let s:plugin_path = escape(expand('<sfile>:p:h'), '\\')$/;"	v
s:prefix	cache-plug/coc.nvim/autoload/coc/list.vim	/^let s:prefix = '[List Preview]'$/;"	v
s:prepare_env	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:prettier_job_running	cache-plug/vim-prettier/autoload/prettier/job/async/neovim.vim	/^let s:prettier_job_running = 0$/;"	v
s:prettier_job_running	cache-plug/vim-prettier/autoload/prettier/job/async/vim.vim	/^let s:prettier_job_running = 0$/;"	v
s:prettier_quickfix_open	cache-plug/vim-prettier/autoload/prettier/utils/quickfix.vim	/^let s:prettier_quickfix_open = 0$/;"	v
s:preview_bufnr	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:preview_bufnr = 0$/;"	v
s:program_end	cache-plug/vim-polyglot/indent/sas.vim	/^let s:program_end = '\\v%(^|;)\\s*endsas\\s*;'$/;"	v
s:progresschars	cache-plug/coc.nvim/autoload/coc/float.vim	/^let s:progresschars = get(g:, 'coc_progress_chars', ['░', '▇'])$/;"	v
s:project_root	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:prompt_win_bufnr	cache-plug/coc.nvim/autoload/coc/float.vim	/^let s:prompt_win_bufnr = 0$/;"	v
s:prompt_win_width	cache-plug/coc.nvim/autoload/coc/float.vim	/^let s:prompt_win_width = get(g:, 'coc_prompt_win_width', 32)$/;"	v
s:prop_offset	cache-plug/coc.nvim/autoload/coc/api.vim	/^let s:prop_offset = get(g:, 'coc_text_prop_offset', 1000)$/;"	v
s:property	cache-plug/vim-polyglot/indent/sass.vim	/^let s:property = '^\\s*:\\|^\\s*[[:alnum:]#{}-]\\+\\%(:\\|\\s*=\\)'$/;"	v
s:ps1xml_cpo_save	cache-plug/vim-polyglot/syntax/ps1xml.vim	/^let s:ps1xml_cpo_save = &cpo$/;"	v
s:purple	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:purple = [ '#800080', 5 ]$/;"	v
s:purple	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:purple = '#8959a8'$/;"	v
s:purple	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:purple = '#8959a8'$/;"	v
s:purple	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:purple = [ '#9876aa', 104 ]$/;"	v
s:purple	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:purple = '#82aaff'$/;"	v
s:purple	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:purple = '#c792ea'$/;"	v
s:purple	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:purple = [ '#c678dd', 176 ]$/;"	v
s:quit	cache-plug/coc.nvim/autoload/coc/util.vim	/^  let s:quit = "quit"$/;"	v
s:quit	cache-plug/coc.nvim/autoload/coc/util.vim	/^let s:quit = ""$/;"	v
s:quotable	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:quotable = '\\%(' . s:idregex . '\\|?\\|' . s:operators . '\\|' . s:float_regex . '\\|' . s:int_regex . '\\)'$/;"	v
s:quoting_colon	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:quoting_colon = '\\%(\\%(^\\s*\\|\\s\\{6,\\}\\|[' . s:nonid_chars . s:uniop_chars . s:binop_chars . '?]\\s*\\)\\@'.s:d(6).'<=\\|\\%(\\<\\%(return\\|if\\|else\\%(if\\)\\?\\|while\\|try\\|begin\\)\\s\\+\\)\\@'.s:d(9).'<=\\)\\zs:'$/;"	v
s:quoting_colonS	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:quoting_colonS = '\\s\\@'.s:d(1).'<=:'$/;"	v
s:r_env	cache-plug/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:r_env = '^\\%(\\' . s:r_envflag . '\\s\\+\\)*\\(\\S\\+\\)'$/;"	v
s:r_envflag	cache-plug/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:r_envflag = '%(\\S\\+=\\S\\+\\|-[iS]\\|--ignore-environment\\|--split-string\\)'$/;"	v
s:r_hashbang	cache-plug/vim-polyglot/autoload/polyglot/shebang.vim	/^let s:r_hashbang = '^#!\\s*\\(\\S\\+\\)\\s*\\(.*\\)\\s*'$/;"	v
s:radix_chars	cache-plug/vim-polyglot/syntax/clojure.vim	/^let s:radix_chars = "0123456789abcdefghijklmnopqrstuvwxyz"$/;"	v
s:re_escaped	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:re_escaped='\\%(\\\\\\)\\@<!\\%(\\\\\\\\\\)*\\zs\\\\'$/;"	v
s:re_factor	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{0}='\\\\\\%([^x_]\\|x\\x\\{0,2}\\|_[.$^]\\=\\)'$/;"	v
s:re_factor	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{1}= '\\[:\\%(alnum\\|alpha\\|blank\\|cntrl\\|digit\\|graph\\|lower\\|print\\|punct\\|' .$/;"	v
s:re_factor	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{2}='\\[\\%([^^][^]]*\\|\\^.[^]]*\\)\\]'$/;"	v
s:re_factor	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{3}='{[0-9,]\\+}?\\='$/;"	v
s:re_factor	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{4}='(?[iImM]\\{1,2})'$/;"	v
s:re_factor	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:re_factor{5}='(\\(?:\\|?=\\|?!\\|?<=\\|?<!\\|?>\\|?[-#ixm]\\)\\=[^()]*)'$/;"	v
s:re_factor_size	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:re_factor_size=6$/;"	v
s:re_unescaped	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:re_unescaped='\\%(\\\\\\)\\@<!\\%(\\\\\\\\\\)*\\zs'$/;"	v
s:rebase_abbrevs	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:red = [ '#ff0000', 9 ]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:red = [ '#f92672' , 161 ]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:red = '#df0000'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:red = '#df0000'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:red = '#c82829'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:red = '#cc6666'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:red = '#ff9da4'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:red = '#d54e53'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:red = '#f2777a'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:red = '#f07178'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:red = '#f07178'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:red = '#f07178'$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:red = [ '#ff6b68', 204 ]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:red = [ '#cf6a4c', 167 ]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:red = [ '#ff0000', 160 ]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:red       = ['#ed4a46', 1]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:red       = ['#fa5750', 1]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:red       = ['#d2212d', 1]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:red       = ['#d6000c', 1]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:red = [ '#d68787', 131 ]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:red = [ '#d70000', '160' ]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:red = [ '#dc322f', s:cuicolors.red[s:cuiindex] ]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:red = [ '#ff3128', 1 ]$/;"	v
s:red	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:red = [ '#e5786d', 203 ]$/;"	v
s:red1	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:red1   = '#ec5f67'$/;"	v
s:red1	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:red1   = '#f07178'$/;"	v
s:red1	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red1   = [ '#e06c75', 168 ]$/;"	v
s:red2	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:red2   = '#ec5f67'$/;"	v
s:red2	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:red2   = '#ff5370'$/;"	v
s:red2	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red2   = [ '#be5046', 168 ]$/;"	v
s:redirects	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:redirects = {}$/;"	v
s:ref_header	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:ref_header = '\\%(Merge\\|Rebase\\|Upstream\\|Pull\\|Push\\)'$/;"	v
s:rel	cache-plug/vim-polyglot/indent/javascript.vim	/^let s:rel = has('reltime')$/;"	v
s:repo_prototype	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repos	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:repos = {}$/;"	v
s:resume_queue	cache-plug/vim-fugitive/autoload/fugitive.vim	/^  let s:resume_queue = []$/;"	v
s:returnTypeMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^let s:returnTypeMatcher = '\\%(:\\s*\\w\\+' . s:typeSpecMatcher . '\\?\\)'$/;"	v
s:root	cache-plug/coc.nvim/autoload/coc/client.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	cache-plug/coc.nvim/autoload/coc/float.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	cache-plug/coc.nvim/autoload/coc/util.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	cache-plug/coc.nvim/autoload/health/coc.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	cache-plug/coc.nvim/plugin/coc.vim	/^let s:root = expand('<sfile>:h:h')$/;"	v
s:ruby_deindent_keywords	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:ruby_indent_keywords	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:ruby_indent_keywords =$/;"	v
s:ruby_path	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_path = s:build_path(s:ruby_paths)$/;"	v
s:ruby_path	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path$/;"	v
s:ruby_paths	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_default_path$/;"	v
s:ruby_paths	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_version_paths[b:ruby_version]$/;"	v
s:rubycomplete_debug	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
s:rubycomplete_rails_loaded	cache-plug/vim-polyglot/autoload/rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:rule_rx	cache-plug/vim-polyglot/indent/make.vim	/^let s:rule_rx = '^[^ \\t#:][^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:rule_rx	cache-plug/vim-polyglot/indent/omake.vim	/^let s:rule_rx = '^[^ \\t#:][^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:run_processing_procs	cache-plug/vim-polyglot/indent/sas.vim	/^let s:run_processing_procs = [$/;"	v
s:runner_exe	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:running_task	cache-plug/coc.nvim/autoload/coc/task.vim	/^let s:running_task = {}$/;"	v
s:runtime	cache-plug/vim-polyglot/ftdetect/polyglot.vim	/^let s:runtime = resolve($VIMRUNTIME)$/;"	v
s:save_cpo	cache-plug/lightline.vim/autoload/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/lightline.vim/autoload/lightline/colortable.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/lightline.vim/autoload/lightline/tab.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/lightline.vim/plugin/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/after/indent/objc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/autoload/requirements.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/compiler/cargo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/compiler/go.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/compiler/rustc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/compiler/swift.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/ant.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/bzl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/config.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/csc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/dtd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/haml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/hcl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/html.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/j.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/java.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/julia.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/juliadoc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/perl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/pug.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/raku.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/rust/tagbar.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/tex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/toml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/ftplugin/xsd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/indent/ansible.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/indent/bzl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/indent/clojure.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/indent/cs.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	cache-plug/vim-polyglot/indent/fennel.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/indent/rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/indent/yaml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/syntax/cs.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	cache-plug/vim-polyglot/syntax/gdscript3.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/syntax/gsl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/syntax/j.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/syntax/named.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	cache-plug/vim-polyglot/syntax/teraterm.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_expandtab	cache-plug/vim-polyglot/ftplugin/bzl.vim	/^let s:save_expandtab = &l:expandtab$/;"	v
s:save_shiftwidth	cache-plug/vim-polyglot/ftplugin/bzl.vim	/^let s:save_shiftwidth = &l:shiftwidth$/;"	v
s:save_softtabstop	cache-plug/vim-polyglot/ftplugin/bzl.vim	/^let s:save_softtabstop = &l:softtabstop$/;"	v
s:save_tabstop	cache-plug/vim-polyglot/ftplugin/bzl.vim	/^let s:save_tabstop = &l:tabstop$/;"	v
s:saved_cursor	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^let s:saved_cursor = &guicursor$/;"	v
s:saved_ve	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^let s:saved_ve = &t_ve$/;"	v
s:scalar_value	cache-plug/vim-polyglot/indent/ansible.vim	/^let s:scalar_value = '\\v:\\s*[>|\\|]\\s*$' " shell: >$/;"	v
s:script_checks	cache-plug/vim-polyglot/tests/native.vim	/^let s:script_checks = {$/;"	v
s:script_env_checks	cache-plug/vim-polyglot/tests/native.vim	/^let s:script_env_checks = {$/;"	v
s:script_root_dir	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:script_root_dir = expand('<sfile>:p:h') . "\/..\/"$/;"	v
s:section_commit_pattern	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_end	cache-plug/vim-polyglot/indent/sas.vim	/^let s:section_end = '\\v%(^|;)\\s*%(quit|enddata)\\s*;'$/;"	v
s:section_pattern	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:section_run	cache-plug/vim-polyglot/indent/sas.vim	/^let s:section_run = '\\v%(^|;)\\s*run\\s*;'$/;"	v
s:section_str	cache-plug/vim-polyglot/indent/sas.vim	/^let s:section_str = '\\v%(^|;)\\s*%(data|proc)>'$/;"	v
s:sectionend	cache-plug/vim-polyglot/ftplugin/j.vim	/^let s:sectionend = '\\s*)\\s*'$/;"	v
s:sections	cache-plug/vim-polyglot/syntax/debcontrol.vim	/^let s:sections = [$/;"	v
s:sectionstart	cache-plug/vim-polyglot/ftplugin/j.vim	/^let s:sectionstart = '\\%(\\s*Note\\|.\\{-}\\<\\%([0-4]\\|13\\|noun\\|adverb\\|conjunction\\|verb\\|monad\\|dyad\\)\\s\\+\\%(:\\s*0\\|def\\s\\+0\\|define\\)\\)\\>.*'$/;"	v
s:select_api	cache-plug/coc.nvim/autoload/coc.vim	/^let s:select_api = exists('*nvim_select_popupmenu_item')$/;"	v
s:session_names	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^let s:session_names = []$/;"	v
s:set_path_handler	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:set_path_handler = {}$/;"	v
s:shiftwidth	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:shiftwidth = &shiftwidth$/;"	v
s:shiftwidth	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^let s:shiftwidth = ''$/;"	v
s:sid	cache-plug/vim-buftabline/plugin/buftabline.vim	/^let s:sid = s:SID() | delfunction s:SID$/;"	v
s:silver	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:silver = [ '#c0c0c0', 7 ]$/;"	v
s:skip	cache-plug/vim-polyglot/indent/cobol.vim	/^let s:skip = 'getline(".") =~ "^.\\\\{6\\\\}[*\/$-]\\\\|\\"[^\\"]*\\""'$/;"	v
s:skip	cache-plug/vim-polyglot/syntax/ledger.vim	/^  let s:skip .= '\\n\\@!'$/;"	v
s:skip	cache-plug/vim-polyglot/syntax/ledger.vim	/^let s:skip = s:fb > 0 ? '\\|^\\n' : ''$/;"	v
s:skip2	cache-plug/vim-polyglot/autoload/pony.vim	/^let s:skip2 = '<SID>InLiteral(line("."), col(".")) || <SID>InComment(line("."), col(".")) == 1'$/;"	v
s:skip3	cache-plug/vim-polyglot/autoload/pony.vim	/^let s:skip3 = '!<SID>InKeyword(line("."), col("."))'$/;"	v
s:skip4	cache-plug/vim-polyglot/autoload/pony.vim	/^let s:skip4 = '!<SID>InBracket(line("."), col("."))'$/;"	v
s:skipPatterns	cache-plug/vim-polyglot/indent/julia.vim	/^let s:skipPatterns = '\\<julia\\%(Comprehension\\%(For\\|If\\)\\|RangeKeyword\\|Comment\\%([LM]\\|Delim\\)\\|\\%([bsv]\\|ip\\|big\\|MIME\\|Shell\\|Printf\\|Doc\\)\\=String\\|RegEx\\|SymbolS\\?\\)\\>'$/;"	v
s:skip_after_opening_paren	cache-plug/vim-polyglot/indent/cython.vim	/^let s:skip_after_opening_paren = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_after_opening_paren	cache-plug/vim-polyglot/indent/python.vim	/^let s:skip_after_opening_paren = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_expr	cache-plug/vim-polyglot/indent/javascript.vim	/^let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:skip_expr	cache-plug/vim-polyglot/indent/lua.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~# 'luaComment\\\\|luaString'"$/;"	v
s:skip_expr	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:skip_expr	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~ '".s:syng_strcom."'"$/;"	v
s:skip_expr	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~ '".s:syng_strcom."'"$/;"	v
s:skip_syntax	cache-plug/vim-polyglot/indent/nix.vim	/^let s:skip_syntax = '\\%(Comment\\|String\\)$'$/;"	v
s:solarized_termcolors	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:solarized_termcolors = get(g:, 'solarized_termcolors', 256)$/;"	v
s:special_chars_syn_pattern	cache-plug/vim-polyglot/indent/cython.vim	/^let s:special_chars_syn_pattern = "\\\\vstring|comment|^pythonbytes%(contents)=$|pythonTodo|jedi\\\\S"$/;"	v
s:special_chars_syn_pattern	cache-plug/vim-polyglot/indent/python.vim	/^let s:special_chars_syn_pattern = "\\\\vstring|comment|^pythonbytes%(contents)=$|pythonTodo|jedi\\\\S"$/;"	v
s:spell_cluster	cache-plug/vim-polyglot/syntax/crystal.vim	/^let s:spell_cluster = exists('crystal_spellcheck_strings') ? ',@Spell' : ''$/;"	v
s:spell_cluster	cache-plug/vim-polyglot/syntax/ruby.vim	/^let s:spell_cluster = exists('ruby_spellcheck_strings') ? ',@Spell' : ''$/;"	v
s:splat_regex	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:st	cache-plug/vim-polyglot/syntax/tt2.vim	/^        let s:st = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:stack_size	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:stack_size=0$/;"	v
s:start	cache-plug/vim-polyglot/syntax/svelte.vim	/^  let s:start = '<' . s:language.tag . '\\>\\_[^>]*' . s:attr . '\\_[^>]*>'$/;"	v
s:start_pattern	cache-plug/vim-polyglot/syntax/vue.vim	/^  let s:start_pattern = '<' . s:language.tag . '\\>\\_[^>]*' . s:attr_pattern . '\\_[^>]*>'$/;"	v
s:start_tag	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^let s:start_tag = '<\\_s*\\%(>\\|\\${\\|\\%(\\<[-:._$A-Za-z0-9]\\+\\>\\)\\)'$/;"	v
s:startexp	cache-plug/vim-polyglot/indent/typescriptreact.vim	/^let s:startexp = '[\\{\\(]\\s*$'$/;"	v
s:status	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:status = '#c6c6c6'$/;"	v
s:status	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:status = s:aqua$/;"	v
s:statusline_active_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_bg = '#5f8787'$/;"	v
s:statusline_active_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_bg = s:navy$/;"	v
s:statusline_active_fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_fg = '#1c1c1c'$/;"	v
s:statusline_active_fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_fg = s:window$/;"	v
s:statusline_inactive_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_bg = '#444444'$/;"	v
s:statusline_inactive_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_bg = '#dadada'$/;"	v
s:statusline_inactive_fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_fg = '#c6c6c6'$/;"	v
s:statusline_inactive_fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_fg = s:foreground$/;"	v
s:stop_statement	cache-plug/vim-polyglot/indent/cython.vim	/^let s:stop_statement = '^\\s*\\(break\\|continue\\|raise\\|return\\|pass\\)\\>'$/;"	v
s:stop_statement	cache-plug/vim-polyglot/indent/python.vim	/^let s:stop_statement = '^\\s*\\(break\\|continue\\|raise\\|return\\|pass\\)\\>'$/;"	v
s:str	cache-plug/vim-polyglot/syntax/tt2.vim	/^        let s:str = substitute(s:str,'[^ ]* ','',"")$/;"	v
s:str	cache-plug/vim-polyglot/syntax/tt2.vim	/^    let s:str = b:tt2_syn_tags . ' '$/;"	v
s:str	cache-plug/vim-polyglot/syntax/tt2.vim	/^    let s:str = substitute(s:str,' \\+',' ','g')$/;"	v
s:str	cache-plug/vim-polyglot/syntax/tt2.vim	/^    let s:str = substitute(s:str,'^ \\+','','g')$/;"	v
s:str_modifiers	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:str_modifiers='iISCDMm'$/;"	v
s:strchars	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  let s:strchars = function('strchars')$/;"	v
s:subtype	cache-plug/vim-polyglot/syntax/liquid.vim	/^  let s:subtype = exists('b:liquid_subtype') ? b:liquid_subtype : ''$/;"	v
s:suffixesadd	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:suffixesadd = &l:suffixesadd$/;"	v
s:suffixesadd	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let s:suffixesadd = &l:suffixesadd$/;"	v
s:suite	cache-plug/lightline.vim/test/autocmd.vim	/^let s:suite = themis#suite('autocmd')$/;"	v
s:suite	cache-plug/lightline.vim/test/concatenate.vim	/^let s:suite = themis#suite('concatenate')$/;"	v
s:suite	cache-plug/lightline.vim/test/error.vim	/^let s:suite = themis#suite('error')$/;"	v
s:suite	cache-plug/lightline.vim/test/expand.vim	/^let s:suite = themis#suite('expand')$/;"	v
s:suite	cache-plug/lightline.vim/test/highlight.vim	/^let s:suite = themis#suite('highlight')$/;"	v
s:suite	cache-plug/lightline.vim/test/link.vim	/^let s:suite = themis#suite('link')$/;"	v
s:suite	cache-plug/lightline.vim/test/mode.vim	/^let s:suite = themis#suite('mode')$/;"	v
s:suite	cache-plug/lightline.vim/test/onetab.vim	/^let s:suite = themis#suite('onetab')$/;"	v
s:suite	cache-plug/lightline.vim/test/popup.vim	/^let s:suite = themis#suite('popup')$/;"	v
s:suite	cache-plug/lightline.vim/test/quickfix.vim	/^let s:suite = themis#suite('quickfix')$/;"	v
s:suite	cache-plug/lightline.vim/test/subseparator.vim	/^let s:suite = themis#suite('subseparator')$/;"	v
s:suite	cache-plug/lightline.vim/test/tabline.vim	/^let s:suite = themis#suite('tabline')$/;"	v
s:suite	cache-plug/lightline.vim/test/tabs.vim	/^let s:suite = themis#suite('tabs')$/;"	v
s:suite	cache-plug/lightline.vim/test/toggle.vim	/^let s:suite = themis#suite('toggle')$/;"	v
s:suite	cache-plug/lightline.vim/test/uniq.vim	/^let s:suite = themis#suite('uniq')$/;"	v
s:supported	cache-plug/vim-polyglot/syntax/debchangelog.vim	/^let s:supported = [$/;"	v
s:supported	cache-plug/vim-polyglot/syntax/debsources.vim	/^let s:supported = [$/;"	v
s:supports_star	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:supports_star = v:version > 703 || (v:version == 703 && has("patch596"))$/;"	v
s:sw	cache-plug/vim-polyglot/indent/crystal.vim	/^  let s:sw = function('shiftwidth')$/;"	v
s:sw	cache-plug/vim-polyglot/indent/ecrystal.vim	/^  let s:sw = function('shiftwidth')$/;"	v
s:symchar	cache-plug/vim-polyglot/syntax/fennel.vim	/^let s:symchar = '0-9' . s:symcharnodig$/;"	v
s:symcharnodig	cache-plug/vim-polyglot/syntax/fennel.vim	/^let s:symcharnodig = '\\!\\$%\\&\\#\\*\\+\\-.\/:<=>?A-Z^_a-z|\\x80-\\U10FFFF'$/;"	v
s:syn_blocks	cache-plug/vim-polyglot/indent/hog.vim	/^let s:syn_blocks = '\\<SnortRuleTypeBody\\>'$/;"	v
s:syng_linecom	cache-plug/vim-polyglot/autoload/yats.vim	/^let s:syng_linecom = 'linecomment\\c'$/;"	v
s:syng_linecom	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:syng_linecom = 'linecomment\\c'$/;"	v
s:syng_multiline	cache-plug/vim-polyglot/autoload/yats.vim	/^let s:syng_multiline = 'comment\\c'$/;"	v
s:syng_multiline	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:syng_multiline = 'comment\\c'$/;"	v
s:syng_strcom	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:syng_strcom = '\\<falcon\\%(String\\|StringEscape\\|Comment\\)\\>'$/;"	v
s:syng_strcom	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:syng_strcom = s:syng_stringdoc + [$/;"	v
s:syng_strcom	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:syng_strcom = 'string\\|regex\\|comment\\c'$/;"	v
s:syng_strcom	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:syng_strcom = 'string\\|regex\\|comment\\c'$/;"	v
s:syng_string	cache-plug/vim-polyglot/indent/falcon.vim	/^let s:syng_string = '\\<falcon\\%(String\\|StringEscape\\)\\>'$/;"	v
s:syng_string	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_string	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:syng_string = 'regex\\c'$/;"	v
s:syng_string	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:syng_string = 'regex\\c'$/;"	v
s:syng_stringdoc	cache-plug/vim-polyglot/indent/ruby.vim	/^let s:syng_stringdoc = s:syng_string + ['Documentation']$/;"	v
s:t_Co	cache-plug/vim-gruvbox8/colors/gruvbox8.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:t_Co	cache-plug/vim-gruvbox8/colors/gruvbox8_hard.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:t_Co	cache-plug/vim-gruvbox8/colors/gruvbox8_soft.vim	/^let s:t_Co = exists('&t_Co') && !empty(&t_Co) && &t_Co > 1 ? &t_Co : 2$/;"	v
s:tabcnt	cache-plug/lightline.vim/autoload/lightline.vim	/^let s:tabcnt = -1$/;"	v
s:table	cache-plug/lightline.vim/autoload/lightline/colortable.vim	/^let s:table = s:load()$/;"	v
s:tabline	cache-plug/lightline.vim/autoload/lightline.vim	/^let s:tabline = ''$/;"	v
s:tabline_active_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_bg = '#00afaf'$/;"	v
s:tabline_active_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_bg = s:window$/;"	v
s:tabline_active_fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_fg = '#1c1c1c'$/;"	v
s:tabline_active_fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_fg = s:foreground$/;"	v
s:tabline_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_bg = '#3a3a3a'$/;"	v
s:tabline_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_bg = s:navy$/;"	v
s:tabline_inactive_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_bg = '#585858'$/;"	v
s:tabline_inactive_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_bg = s:aqua$/;"	v
s:tabline_inactive_fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_fg = '#c6c6c6'$/;"	v
s:tabline_inactive_fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_fg = s:background$/;"	v
s:tablineat	cache-plug/vim-buftabline/plugin/buftabline.vim	/^let s:tablineat = has('tablineat')$/;"	v
s:tabnr	cache-plug/lightline.vim/autoload/lightline.vim	/^let s:tabnr = -1$/;"	v
s:tag	cache-plug/vim-polyglot/indent/haml.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tag	cache-plug/vim-polyglot/indent/pug.vim	/^let s:tag = '\\([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tag	cache-plug/vim-polyglot/indent/slim.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tag	cache-plug/vim-polyglot/indent/slime.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tagname	cache-plug/vim-polyglot/indent/html.vim	/^let s:tagname = '\\w\\+\\(-\\w\\+\\)*'$/;"	v
s:tags	cache-plug/vim-polyglot/after/syntax/javascript/graphql.vim	/^let s:tags = '\\%(' . join(graphql#javascript_tags(), '\\|') . '\\)'$/;"	v
s:tags	cache-plug/vim-polyglot/after/syntax/jsx_pretty.vim	/^let s:tags = get(g:, 'vim_jsx_pretty_template_tags', ['html', 'jsx'])$/;"	v
s:tags	cache-plug/vim-polyglot/after/syntax/typescript/graphql.vim	/^let s:tags = '\\%(' . join(graphql#javascript_tags(), '\\|') . '\\)'$/;"	v
s:teal	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:teal = [ '#008080', 6 ]$/;"	v
s:temp	cache-plug/vim-polyglot/syntax/raku.vim	/^    let s:temp = split(s:words_space)$/;"	v
s:temp	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:temp = split(s:words_space)$/;"	v
s:temp_buffer	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_buffer = tempname()$/;"	v
s:temp_files	cache-plug/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_from	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_from = tempname()$/;"	v
s:temp_scripts	cache-plug/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_scripts = {}$/;"	v
s:term_black	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_black = 235$/;"	v
s:term_blue	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_blue = 39$/;"	v
s:term_green	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_green = 114$/;"	v
s:term_grey	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_grey = 236$/;"	v
s:term_marker	cache-plug/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	cache-plug/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:term_purple	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_purple = 170$/;"	v
s:term_red	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_red = 204$/;"	v
s:term_white	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_white = 145$/;"	v
s:term_yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_yellow = 180$/;"	v
s:ternary	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:ternary = '^\\s\\+[?|:]'$/;"	v
s:ternary	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:ternary = '^\\s\\+[?:]'$/;"	v
s:ternary_q	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:ternary_q = '^\\s\\+?'$/;"	v
s:ternary_q	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:ternary_q = '^\\s\\+?[.?]\\@!'$/;"	v
s:test	cache-plug/vim-polyglot/ftplugin/fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test	cache-plug/vim-polyglot/indent/fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test	cache-plug/vim-polyglot/syntax/fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test_repo	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^let s:test_repo   = s:current_dir.'\/test-repo'$/;"	v
s:tests	cache-plug/vim-gitgutter/test/runner.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:tests	cache-plug/vim-gitgutter/test/runner.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:texMathDelimList	cache-plug/vim-polyglot/syntax/tex.vim	/^    let s:texMathDelimList= s:texMathDelimList + [$/;"	v
s:texMathDelimList	cache-plug/vim-polyglot/syntax/tex.vim	/^  let s:texMathDelimList=[$/;"	v
s:texMathList	cache-plug/vim-polyglot/syntax/tex.vim	/^    let s:texMathList= s:texMathList + [$/;"	v
s:texMathList	cache-plug/vim-polyglot/syntax/tex.vim	/^  let s:texMathList=[$/;"	v
s:tex_comment_nospell	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_comment_nospell= 0$/;"	v
s:tex_comment_nospell	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_comment_nospell= 1$/;"	v
s:tex_conceal	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_conceal= 'abdmgsS'$/;"	v
s:tex_conceal	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_conceal= g:tex_conceal$/;"	v
s:tex_excludematcher	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_excludematcher= 0$/;"	v
s:tex_excludematcher	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_excludematcher= g:tex_excludematcher$/;"	v
s:tex_fast	cache-plug/vim-polyglot/syntax/tex.vim	/^  let s:tex_fast= ""$/;"	v
s:tex_fast	cache-plug/vim-polyglot/syntax/tex.vim	/^  let s:tex_fast= g:tex_fast$/;"	v
s:tex_fast	cache-plug/vim-polyglot/syntax/tex.vim	/^let s:tex_fast= "bcmMprsSvV"$/;"	v
s:tex_fold_enabled	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_fold_enabled= 0$/;"	v
s:tex_fold_enabled	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_fold_enabled= 1$/;"	v
s:tex_matchcheck	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_matchcheck= '[({[]'$/;"	v
s:tex_matchcheck	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_matchcheck= g:tex_matchcheck$/;"	v
s:tex_no_error	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_no_error= 0$/;"	v
s:tex_no_error	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_no_error= 1$/;"	v
s:tex_nospell	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_nospell = 0$/;"	v
s:tex_nospell	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_nospell = 1$/;"	v
s:tex_subscripts	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_subscripts= '[0-9aehijklmnoprstuvx,+-\/().]'$/;"	v
s:tex_subscripts	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_subscripts= g:tex_subscripts$/;"	v
s:tex_superscripts	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_superscripts= '[0-9a-zA-W.,:;+-<>\/()=]'$/;"	v
s:tex_superscripts	cache-plug/vim-polyglot/syntax/tex.vim	/^ let s:tex_superscripts= g:tex_superscripts$/;"	v
s:tmp	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:tmp=matchstr("$Revision: 2.60 $", '[0-9.]\\+')$/;"	v
s:token_pattern	cache-plug/vim-polyglot/indent/dtd.vim	/^let s:token_pattern = '^[^[:space:]]\\+'$/;"	v
s:topLev	cache-plug/vim-polyglot/after/indent/objc.vim	/^let s:topLev = '^\\s*@\\%(class\\|end\\|implementation\\|interface\\|protocol\\|\\)\\>'$/;"	v
s:transaction	cache-plug/vim-polyglot/autoload/ledger.vim	/^let s:transaction = {} "{{{1$/;"	v
s:trees	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:type	cache-plug/vim-polyglot/indent/ocaml.vim	/^let s:type = '^\\s*\\%(class\\|let\\|type\\)\\>.*='$/;"	v
s:type	cache-plug/vim-polyglot/indent/sml.vim	/^let s:type = '^\\s*\\%(let\\|type\\)\\>.*='$/;"	v
s:typeSpecMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^let s:typeSpecMatcher = '\\%(\\s*\\[\\_[^\\]]*\\]\\)'$/;"	v
s:types	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:types = [$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ant.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ant.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/aspvbs.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/config.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/config.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . ' | ' . s:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/ecrystal.vim	/^let s:undo_ftplugin = ''$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/eelixir.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/embeddedpuppet.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/haml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/hog.vim	/^let s:undo_ftplugin = "setl fo< com< cms< def< inc<"$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/jsp.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/pug.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/pug.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/slim.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/slim.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/slim.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/stylus.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xhtml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xsd.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	cache-plug/vim-polyglot/ftplugin/xsd.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_spelllang	cache-plug/vim-polyglot/extras/menu.vim	/^  let s:undo_spelllang = ['aun &Tools.&Spelling.&Find\\ More\\ Languages']$/;"	v
s:uniop_chars	cache-plug/vim-polyglot/autoload/julia.vim	/^let s:uniop_chars = "+\\\\U2D~¬√∛∜"$/;"	v
s:uniop_chars	cache-plug/vim-polyglot/syntax/julia.vim	/^let s:uniop_chars = "+\\\\U2D~¬√∛∜⋆"$/;"	v
s:uniq	cache-plug/lightline.vim/autoload/lightline.vim	/^  let s:uniq = function('uniq')$/;"	v
s:unix_redir	cache-plug/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unsupported	cache-plug/vim-polyglot/syntax/debchangelog.vim	/^let s:unsupported = [$/;"	v
s:unsupported	cache-plug/vim-polyglot/syntax/debsources.vim	/^let s:unsupported = [$/;"	v
s:update_in_progress	cache-plug/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	cache-plug/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	cache-plug/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	cache-plug/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:urgency	cache-plug/vim-polyglot/syntax/debchangelog.vim	/^let s:urgency='urgency=\\(low\\|medium\\|high\\|emergency\\|critical\\)\\( [^[:space:],][^,]*\\)\\='$/;"	v
s:val	cache-plug/vim-polyglot/indent/sml.vim	/^let s:val = '^\\s*\\(val\\|external\\)\\>.*:'$/;"	v
s:valMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^let s:valMatcher = '\\%(' . s:modifierMatcher . '\\|lazy\\s\\+\\)*\\<va[lr]\\>'$/;"	v
s:vala_cpo_save	cache-plug/vim-polyglot/syntax/vala.vim	/^let s:vala_cpo_save = &cpo$/;"	v
s:var	cache-plug/vim-fugitive/autoload/fugitive.vim	/^let s:var = '\\%(%\\|#<\\=\\d\\+\\|##\\=\\)'$/;"	v
s:var_stmt	cache-plug/vim-polyglot/indent/solidity.vim	/^let s:var_stmt = '^\\s*var'$/;"	v
s:var_stmt	cache-plug/vim-polyglot/indent/typescript.vim	/^let s:var_stmt = '^\\s*var'$/;"	v
s:version	cache-plug/vim-polyglot/scripts/eregex.vim	/^let s:version = s:maj + s:min$/;"	v
s:version_file	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^  let s:version_file = findfile('.ruby-version', '.;')$/;"	v
s:veryDarkGray	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:veryDarkGray = [ '#1c1d21' , 234 ]$/;"	v
s:vim_api_version	cache-plug/coc.nvim/autoload/coc/util.vim	/^let s:vim_api_version = 8$/;"	v
s:vim_jsx_pretty_colorful_config	cache-plug/vim-polyglot/after/syntax/jsx_pretty.vim	/^let s:vim_jsx_pretty_colorful_config = get(g:, 'vim_jsx_pretty_colorful_config', 0)$/;"	v
s:violet	cache-plug/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:violet = [ '#cf73e6', '170' ]$/;"	v
s:violet	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:violet = [ '#6c71c4', s:cuicolors.violet[s:cuiindex] ]$/;"	v
s:visual_bg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_bg = '#8787af'$/;"	v
s:visual_fg	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_fg = '#000000'$/;"	v
s:vital_base_dir	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:warned	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:warned = 0$/;"	v
s:warning_sign	cache-plug/coc.nvim/autoload/coc.vim	/^let s:warning_sign = get(g:, 'coc_status_warning_sign', has('mac') ? '⚠️ ' : 'W')$/;"	v
s:watched_keys	cache-plug/coc.nvim/autoload/coc.vim	/^let s:watched_keys = []$/;"	v
s:wcswidth	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  let s:wcswidth = function('strwidth')$/;"	v
s:when_no_matched_or_others	cache-plug/vim-polyglot/ftplugin/sql.vim	/^let s:when_no_matched_or_others = '\\%(\\<when\\>\\%(\\s\\+\\%(\\%(\\<not\\>\\s\\+\\)\\?<matched\\>\\)\\|\\<others\\>\\)\\@!\\)'$/;"	v
s:white	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:white = [ '#ffffff', 15 ]$/;"	v
s:white	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:white = [ '#ffffff' , 15 ]$/;"	v
s:white	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:white = [ '#a9b7c6', 250 ]$/;"	v
s:white	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:white = [ '#f8f8f2', 234 ]$/;"	v
s:white	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:white = [ '#d0d0d0', 252 ]$/;"	v
s:white	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:white = [ '#fce8c3', 15 ]$/;"	v
s:wide	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:wildignores_options_path	cache-plug/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:win_sep	cache-plug/vim-polyglot/ftplugin/dart.vim	/^let s:win_sep = (has('win32') || has('win64')) ? '\/' : ''$/;"	v
s:window	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:window = '#efefef'$/;"	v
s:window	cache-plug/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:window = '#efefef'$/;"	v
s:winid	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:winid = 0$/;"	v
s:winpos_map	cache-plug/vim-polyglot/autoload/ledger.vim	/^let s:winpos_map = {$/;"	v
s:words	cache-plug/vim-polyglot/autoload/clojurecomplete.vim	/^let s:words = ["*","*'","*1","*2","*3","*agent*","*allow-unresolved-vars*","*assert*","*clojure-version*","*command-line-args*","*compile-files*","*compile-path*","*compiler-options*","*data-readers*","*default-data-reader-fn*","*e","*err*","*file*","*flush-on-newline*","*fn-loader*","*in*","*math-context*","*ns*","*out*","*print-dup*","*print-length*","*print-level*","*print-meta*","*print-readably*","*read-eval*","*source-path*","*suppress-read*","*unchecked-math*","*use-context-classloader*","*verbose-defrecords*","*warn-on-reflection*","+","+'","-","-'","->","->>","->ArrayChunk","->Eduction","->Vec","->VecNode","->VecSeq","-cache-protocol-fn","-reset-methods",".","..","\/","<","<=","=","==",">",">=","EMPTY-NODE","Throwable->map","accessor","aclone","add-classpath","add-watch","agent","agent-error","agent-errors","aget","alength","alias","all-ns","alter","alter-meta!","alter-var-root","amap","ancestors","and","apply","areduce","array-map","as->","aset","aset-boolean","aset-byte","aset-char","aset-double","aset-float","aset-int","aset-long","aset-short","assert","assoc!","assoc","assoc-in","associative?","atom","await","await-for","await1","bases","bean","bigdec","bigint","biginteger","binding","bit-and","bit-and-not","bit-clear","bit-flip","bit-not","bit-or","bit-set","bit-shift-left","bit-shift-right","bit-test","bit-xor","boolean","boolean-array","booleans","bound-fn","bound-fn*","bound?","butlast","byte","byte-array","bytes","case","cast","cat","catch","char","char-array","char-escape-string","char-name-string","char?","chars","chunk","chunk-append","chunk-buffer","chunk-cons","chunk-first","chunk-next","chunk-rest","chunked-seq?","class","class?","clear-agent-errors","clojure-version","coll?","comment","commute","comp","comparator","compare","compare-and-set!","compile","complement","completing","concat","cond","cond->","cond->>","condp","conj!","conj","cons","constantly","construct-proxy","contains?","count","counted?","create-ns","create-struct","cycle","dec","dec'","decimal?","declare","dedupe","def","default-data-readers","definline","definterface","defmacro","defmethod","defmulti","defn","defn-","defonce","defprotocol","defrecord","defstruct","deftype","delay","delay?","deliver","denominator","deref","derive","descendants","destructure","disj!","disj","dissoc!","dissoc","distinct","distinct?","do","doall","dorun","doseq","dosync","dotimes","doto","double","double-array","doubles","drop","drop-last","drop-while","eduction","empty","empty?","ensure","ensure-reduced","enumeration-seq","error-handler","error-mode","eval","even?","every-pred","every?","ex-data","ex-info","extend","extend-protocol","extend-type","extenders","extends?","false?","ffirst","file-seq","filter","filterv","finally","find","find-keyword","find-ns","find-protocol-impl","find-protocol-method","find-var","first","flatten","float","float-array","float?","floats","flush","fn","fn","fn?","fnext","fnil","for","force","format","frequencies","future","future-call","future-cancel","future-cancelled?","future-done?","future?","gen-class","gen-interface","gensym","get","get-in","get-method","get-proxy-class","get-thread-bindings","get-validator","group-by","hash","hash-combine","hash-map","hash-ordered-coll","hash-set","hash-unordered-coll","identical?","identity","if","if-let","if-not","if-some","ifn?","import","in-ns","inc","inc'","init-proxy","instance?","int","int-array","integer?","interleave","intern","interpose","into","into-array","ints","io!","isa?","iterate","iterator-seq","juxt","keep","keep-indexed","key","keys","keyword","keyword?","last","lazy-cat","lazy-seq","let","let","letfn","line-seq","list","list*","list?","load","load-file","load-reader","load-string","loaded-libs","locking","long","long-array","longs","loop","loop","macroexpand","macroexpand-1","make-array","make-hierarchy","map","map-entry?","map-indexed","map?","mapcat","mapv","max","max-key","memfn","memoize","merge","merge-with","meta","method-sig","methods","min","min-key","mix-collection-hash","mod","monitor-enter","monitor-exit","munge","name","namespace","namespace-munge","neg?","new","newline","next","nfirst","nil?","nnext","not","not-any?","not-empty","not-every?","not=","ns","ns-aliases","ns-imports","ns-interns","ns-map","ns-name","ns-publics","ns-refers","ns-resolve","ns-unalias","ns-unmap","nth","nthnext","nthrest","num","number?","numerator","object-array","odd?","or","parents","partial","partition","partition-all","partition-by","pcalls","peek","persistent!","pmap","pop!","pop","pop-thread-bindings","pos?","pr","pr-str","prefer-method","prefers","primitives-classnames","print","print-ctor","print-dup","print-method","print-simple","print-str","printf","println","println-str","prn","prn-str","promise","proxy","proxy-call-with-super","proxy-mappings","proxy-name","proxy-super","push-thread-bindings","pvalues","quot","quote","rand","rand-int","rand-nth","random-sample","range","ratio?","rational?","rationalize","re-find","re-groups","re-matcher","re-matches","re-pattern","re-seq","read","read-line","read-string","reader-conditional","reader-conditional?","realized?","record?","recur","reduce","reduce-kv","reduced","reduced?","reductions","ref","ref-history-count","ref-max-history","ref-min-history","ref-set","refer","refer-clojure","reify","release-pending-sends","rem","remove","remove-all-methods","remove-method","remove-ns","remove-watch","repeat","repeatedly","replace","replicate","require","reset!","reset-meta!","resolve","rest","restart-agent","resultset-seq","reverse","reversible?","rseq","rsubseq","run!","satisfies?","second","select-keys","send","send-off","send-via","seq","seq?","seque","sequence","sequential?","set!","set","set-agent-send-executor!","set-agent-send-off-executor!","set-error-handler!","set-error-mode!","set-validator!","set?","short","short-array","shorts","shuffle","shutdown-agents","slurp","some","some->","some->>","some-fn","some?","sort","sort-by","sorted-map","sorted-map-by","sorted-set","sorted-set-by","sorted?","special-symbol?","spit","split-at","split-with","str","string?","struct","struct-map","subs","subseq","subvec","supers","swap!","symbol","symbol?","sync","tagged-literal","tagged-literal?","take","take-last","take-nth","take-while","test","the-ns","thread-bound?","throw","time","to-array","to-array-2d","trampoline","transduce","transient","tree-seq","true?","try","type","unchecked-add","unchecked-add-int","unchecked-byte","unchecked-char","unchecked-dec","unchecked-dec-int","unchecked-divide-int","unchecked-double","unchecked-float","unchecked-inc","unchecked-inc-int","unchecked-int","unchecked-long","unchecked-multiply","unchecked-multiply-int","unchecked-negate","unchecked-negate-int","unchecked-remainder-int","unchecked-short","unchecked-subtract","unchecked-subtract-int","underive","unquote","unquote-splicing","unreduced","unsigned-bit-shift-right","update","update-in","update-proxy","use","val","vals","var","var-get","var-set","var?","vary-meta","vec","vector","vector-of","vector?","volatile!","volatile?","vreset!","vswap!","when","when-first","when-let","when-not","when-some","while","with-bindings","with-bindings*","with-in-str","with-loading-context","with-local-vars","with-meta","with-open","with-out-str","with-precision","with-redefs","with-redefs-fn","xml-seq","zero?","zipmap"]$/;"	v
s:words	cache-plug/vim-polyglot/syntax/raku.vim	/^    let s:words = join(s:temp, "\\\\|")$/;"	v
s:words	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:words = join(s:temp, "\\\\|")$/;"	v
s:words_space	cache-plug/vim-polyglot/syntax/raku.vim	/^    let s:words_space = join(s:words_list, " ")$/;"	v
s:words_space	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:words_space = join(s:alpha_metaops, " ")$/;"	v
s:words_space	cache-plug/vim-polyglot/syntax/raku.vim	/^let s:words_space = join(s:types, " ")$/;"	v
s:workspace	cache-plug/vim-polyglot/autoload/fsharp.vim	/^let s:workspace = []$/;"	v
s:worktree_for_dir	cache-plug/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:wsh_cpo_save	cache-plug/vim-polyglot/syntax/wsh.vim	/^let s:wsh_cpo_save = &cpo$/;"	v
s:xml_cpo_save	cache-plug/vim-polyglot/syntax/xml.vim	/^let s:xml_cpo_save = &cpo$/;"	v
s:yamlKey	cache-plug/vim-polyglot/syntax/ansible.vim	/^  let s:yamlKey = "yamlBlockMappingKey"$/;"	v
s:yamlKey	cache-plug/vim-polyglot/syntax/ansible.vim	/^  let s:yamlKey = g:ansible_yamlKeyName$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:yellow = [ '#ffff00', 11 ]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:yellow = [ '#e5cd52' , 221 ]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:yellow = '#eab700'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:yellow = '#f0c674'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:yellow = '#ffeead'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:yellow = '#e7c547'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:yellow = '#ffcc66'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:yellow = '#e6b673'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:yellow = '#E6B673'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:yellow = '#ffc44c'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:yellow = [ '#ffc66d', 222 ]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:yellow = [ '#ffb964', 215 ]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:yellow = '#ffcc00'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:yellow = '#ffcb6b'$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:yellow = [ '#e6db74', 229 ]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:yellow = [ '#e5c07b', 180 ]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:yellow    = ['#dbb32d', 3]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:yellow    = ['#dbb32d', 3]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:yellow    = ['#ad8900', 3]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:yellow    = ['#c49700', 3]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:yellow = [ '#d8af5f', 3 ]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:yellow = [ '#b58900', s:cuicolors.yellow[s:cuiindex] ]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:yellow = [ '#fbb829', 3 ]$/;"	v
s:yellow	cache-plug/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:yellow = [ '#cae682', 180 ]$/;"	v
s:yesmacro	cache-plug/vim-polyglot/ftplugin/julia.vim	/^  let s:yesmacro = s:nomacro . '\\%('. s:macro_regex . '\\)\\+'$/;"	v
s:z	cache-plug/vim-polyglot/indent/javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
save_cpo	cache-plug/delimitMate/plugin/delimitMate.vim	/^let save_cpo = &cpo$/;"	v
save_cursor	cache-plug/vim-polyglot/autoload/RstFold.vim	/^  let save_cursor = getcurpos()$/;"	v
save_fold_state	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:save_fold_state()$/;"	f
save_last_seen_change	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:save_last_seen_change(bufnr) abort$/;"	f
save_mark	cache-plug/vim-polyglot/autoload/RstFold.vim	/^  let save_mark = getpos("'[")$/;"	v
savehistory	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! s:savehistory(name) abort$/;"	f
scala#ConditionalConfirm	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#ConditionalConfirm(msg)$/;"	f
scala#CountBrackets	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#CountBrackets(line, openBracket, closedBracket)$/;"	f
scala#CountCurlies	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#CountCurlies(line)$/;"	f
scala#CountParens	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#CountParens(line)$/;"	f
scala#CurlyMatcher	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#CurlyMatcher()$/;"	f
scala#GetDirForFuzzyFinder	cache-plug/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetDirForFuzzyFinder(from, addon)$/;"	f
scala#GetLine	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#GetLine(lnum)$/;"	f
scala#GetLineAndColumnThatMatchesBracket	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#GetLineAndColumnThatMatchesCurly	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesCurly()$/;"	f
scala#GetLineAndColumnThatMatchesParen	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#GetLineAndColumnThatMatchesParen()$/;"	f
scala#GetLineThatMatchesBracket	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#GetLineThatMatchesCurly	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesCurly()$/;"	f
scala#GetLineThatMatchesParen	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#GetLineThatMatchesParen()$/;"	f
scala#GetMainDirForFuzzyFinder	cache-plug/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetMainDirForFuzzyFinder(from)$/;"	f
scala#GetPrevCodeLine	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#GetPrevCodeLine(lnum)$/;"	f
scala#GetRootDirForFuzzyFinder	cache-plug/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetRootDirForFuzzyFinder(from)$/;"	f
scala#GetTestDirForFuzzyFinder	cache-plug/vim-polyglot/ftplugin/scala.vim	/^    function! scala#GetTestDirForFuzzyFinder(from)$/;"	f
scala#InvertBracketType	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#InvertBracketType(openBracket, closedBracket)$/;"	f
scala#IsParentCase	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#IsParentCase()$/;"	f
scala#LineCompletesBrackets	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesBrackets(openBracket, closedBracket)$/;"	f
scala#LineCompletesDefValr	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesDefValr(lnum, line)$/;"	f
scala#LineCompletesIfElse	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesIfElse(lnum, line)$/;"	f
scala#LineCompletesXML	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#LineCompletesXML(lnum, line)$/;"	f
scala#LineEndsInIncomplete	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#LineEndsInIncomplete(line)$/;"	f
scala#LineIsAClosingXML	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#LineIsAClosingXML(line)$/;"	f
scala#LineIsCompleteIf	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#LineIsCompleteIf(line)$/;"	f
scala#MatchesIncompleteDefValr	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#MatchesIncompleteDefValr(line)$/;"	f
scala#NumberOfBraceGroups	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#NumberOfBraceGroups(line)$/;"	f
scala#SanitizeDirForFuzzyFinder	cache-plug/vim-polyglot/ftplugin/scala.vim	/^    function! scala#SanitizeDirForFuzzyFinder(dir)$/;"	f
scala#SpecificLineCompletesBrackets	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#SpecificLineCompletesBrackets(lnum, openBracket, closedBracket)$/;"	f
scala#Test	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#Test(lnum, line, openBracket, closedBracket)$/;"	f
scala#Testhelper	cache-plug/vim-polyglot/indent/scala.vim	/^function! scala#Testhelper(lnum, line, openBracket, closedBracket, iteration)$/;"	f
scan	cache-plug/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f
scan	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
scoreGapExtention	cache-plug/fzf/src/algo/algo.go	/^	scoreGapExtention = -1$/;"	c
scoreGapStart	cache-plug/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c
scoreMatch	cache-plug/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c
search	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:search(pattern) abort dict$/;"	f
searchRequest	cache-plug/fzf/src/terminal.go	/^type searchRequest struct {$/;"	t
search_history_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
searchsyn	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! s:searchsyn(pattern, syn, flags, mode) abort$/;"	f
section_delim_at	cache-plug/vim-polyglot/after/ftplugin/llvm.vim	/^function! s:section_delim_at(lnum) abort$/;"	f
sectionmovement	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^function! s:sectionmovement(pattern,flags,mode,count)$/;"	f
sed_delimiter	cache-plug/vim-polyglot/syntax/sed.vim	/^    let __sed_delimiter = escape(nr2char(__sed_i), __sed_metacharacters)$/;"	v
sed_i	cache-plug/vim-polyglot/syntax/sed.vim	/^    let __sed_i = __sed_i + 1$/;"	v
sed_i	cache-plug/vim-polyglot/syntax/sed.vim	/^let __sed_i = __sed_i + 1$/;"	v
sed_i	cache-plug/vim-polyglot/syntax/sed.vim	/^let __sed_i = char2nr(" ") " ASCII: 32, EBCDIC: 64$/;"	v
sed_last	cache-plug/vim-polyglot/syntax/sed.vim	/^    let __sed_last = 126$/;"	v
sed_last	cache-plug/vim-polyglot/syntax/sed.vim	/^    let __sed_last = 255$/;"	v
sed_metacharacters	cache-plug/vim-polyglot/syntax/sed.vim	/^let __sed_metacharacters = '$*.\\^[~'$/;"	v
selectItem	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) bool {$/;"	f
select_count	cache-plug/fzf/test/test_go.rb	/^          def select_count$/;"	f	class:Tmux.until
selectedItem	cache-plug/fzf/src/terminal.go	/^type selectedItem struct {$/;"	t
send_keys	cache-plug/fzf/test/test_go.rb	/^  def send_keys(*args)$/;"	f	class:Tmux
separator	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:separator()$/;"	f
set	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:set(name, value) "{{{$/;"	f
set	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:set(...) " {{{$/;"	f
setBg	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() {$/;"	f
set_fold_levels	cache-plug/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:set_fold_levels()$/;"	f
set_guicolors	cache-plug/vim-polyglot/syntax/dircolors.vim	/^function! s:set_guicolors() abort$/;"	f
set_mark_tick	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:set_mark_tick(...)$/;"	f
set_path_handler.err	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.err(buffer) abort$/;"	f
set_path_handler.out	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.out(buffer, path) abort$/;"	f
set_var	cache-plug/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	class:TestBase.TestShell
set_var	cache-plug/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	class:TestFish
setup	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:setup(...) "{{{$/;"	f
setup	cache-plug/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBase.TestGoFZF
setup	cache-plug/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBase.TestShell
setupTerminal	cache-plug/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) setupTerminal() {$/;"	f
setupTerminal	cache-plug/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) setupTerminal() error {$/;"	f
setup_path	cache-plug/vim-gitgutter/autoload/gitgutter.vim	/^function! s:setup_path(bufnr, continuation)$/;"	f
shell	cache-plug/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestBash
shell	cache-plug/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestFish
shell	cache-plug/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestZsh
shellesc	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellesc_cmd	cache-plug/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
shellescape	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
shellscript	cache-plug/fzf/plugin/fzf.vim	/^    let shellscript = s:fzf_tempname()$/;"	v
shift	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:shift(list) abort$/;"	f
shiftwidth	cache-plug/vim-polyglot/indent/pgsql.vim	/^    fun! s:shiftwidth()$/;"	f
shiftwidth	cache-plug/vim-polyglot/indent/rust.vim	/^    function! s:shiftwidth()$/;"	f
shortpath	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
shortpath	cache-plug/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
should_register	cache-plug/vim-polyglot/syntax/vue.vim	/^function! s:should_register(language, start_pattern)$/;"	f
show_documentation	plugin/coc.vim	/^function! s:show_documentation()$/;"	f
show_documentation	plugin/scala.vim	/^function! s:show_documentation()$/;"	f
show_errors	cache-plug/vim-polyglot/autoload/zig/fmt.vim	/^function! s:show_errors(errors) abort$/;"	f
show_toc	cache-plug/vim-polyglot/ftplugin/help.vim	/^  function! s:show_toc() abort$/;"	f
show_warnings	cache-plug/vim-polyglot/scripts/build	/^def show_warnings(all_filetypes, expected_filetypes)$/;"	f	class:rules_to_code.rule_to_code.detect_filetypes_str.detect_filetypes
sid2sfuncs	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
signature	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:signature(filePath, line, character, cont)$/;"	f
signatureData	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:signatureData(filePath, line, character, cont)$/;"	f
sizeSpec	cache-plug/fzf/src/options.go	/^type sizeSpec struct {$/;"	t
skip	cache-plug/lightline.vim/autoload/lightline.vim	/^  function! s:skip() abort " Vim 8.2.0257 (00f3b4e007), 8.2.0991 (0fe937fd86), 8.2.0996 (40a019f157)$/;"	f
skip	cache-plug/lightline.vim/autoload/lightline.vim	/^  function! s:skip() abort$/;"	f
skip_if_not	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:skip_if_not(current_lnum, ...)$/;"	f
slab	cache-plug/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v
slab16Size	cache-plug/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c
slab32Size	cache-plug/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c
sliceChunks	cache-plug/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f
smcup	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f
smt2#PrintSolverVersion	cache-plug/vim-polyglot/autoload/smt2.vim	/^function! smt2#PrintSolverVersion()$/;"	f
smt2#RunSolver	cache-plug/vim-polyglot/autoload/smt2.vim	/^function! smt2#RunSolver()$/;"	f
smt2#RunSolverAndShowResult	cache-plug/vim-polyglot/autoload/smt2.vim	/^function! smt2#RunSolverAndShowResult()$/;"	f
sort	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
sortCriteria	cache-plug/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v
sortSelected	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f
sort_buffers	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
sort_by	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
sort_packages	cache-plug/vim-polyglot/scripts/build	/^def sort_packages(packages)$/;"	f
space	cache-plug/delimitMate/Makefile	/^space    := $(empty) $(empty)$/;"	m
span	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
spawn	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
spinnerDuration	cache-plug/fzf/src/constants.go	/^	spinnerDuration   = 100 * time.Millisecond$/;"	c
split	cache-plug/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
split	cache-plug/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:split(str, delimiter)$/;"	f
split3	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
splitNth	cache-plug/fzf/src/options.go	/^func splitNth(str string) []Range {$/;"	f
split_by_displaywidth	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
split_leftright	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
split_posix_text	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
splittable	cache-plug/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
square_expansion	cache-plug/vim-polyglot/scripts/build	/^def square_expansion(s)$/;"	f	class:rules_to_code.rule_to_code
square_expansion	cache-plug/vim-polyglot/scripts/import_vim	/^def square_expansion(s)$/;"	f
stage	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:stage(hunk_diff)$/;"	f
start	cache-plug/coc.nvim/autoload/coc/client.vim	/^function! s:start() dict$/;"	f
startEventPoller	cache-plug/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f
start_col	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:start_col(lnum)$/;"	f
start_prompt	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! s:start_prompt()$/;"	f
start_prompt_vim	cache-plug/coc.nvim/autoload/coc/prompt.vim	/^function! s:start_prompt_vim() abort$/;"	f
start_syntax	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:start_syntax(lnum)$/;"	f
starts_with	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:starts_with(context, expr)$/;"	f
starts_with	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
stderr	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f
stderrInternal	cache-plug/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool) {$/;"	f
stderrInternal	cache-plug/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool) {$/;"	f
stdin	cache-plug/fzf/plugin/fzf.vim	/^    let stdin = has_key(a:dict, 'source') ? '' : '< \/dev\/tty'$/;"	v
stepmatch	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^function! s:stepmatch(receiver,target)$/;"	f
steps	cache-plug/vim-polyglot/ftplugin/cucumber.vim	/^function! s:steps(lnum)$/;"	f
strLines	cache-plug/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f
str_compose	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:str_compose(line, idx, text) abort$/;"	f
strchars	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
strip	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
strip	cache-plug/vim-polyglot/indent/bst.vim	/^function! s:strip(lnum)$/;"	f
stripComment	cache-plug/vim-polyglot/indent/haskell.vim	/^function! s:stripComment(line)$/;"	f
strip_namespace_and_macro_chars	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:strip_namespace_and_macro_chars(word)$/;"	f
strip_trailing_new_line	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:strip_trailing_new_line(line) abort$/;"	f
stripped	cache-plug/vim-polyglot/indent/cobol.vim	/^function! s:stripped(lnum)$/;"	f
strwidthpart	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart_reverse	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
style	cache-plug/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f
sub	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
subseparator	cache-plug/lightline.vim/autoload/lightline.vim	/^function! s:subseparator(components, subseparator, expanded) abort$/;"	f
subseparator	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:subseparator(...)$/;"	f
substitute_last	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
suite.active_inactive	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.active_inactive()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/autocmd.vim	/^function! s:suite.before_each()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.before_each()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/highlight.vim	/^function! s:suite.before_each()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/link.vim	/^function! s:suite.before_each()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.before_each()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/popup.vim	/^function! s:suite.before_each()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/quickfix.vim	/^function! s:suite.before_each()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.before_each()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.before_each()$/;"	f
suite.before_each	cache-plug/lightline.vim/test/toggle.vim	/^function! s:suite.before_each()$/;"	f
suite.component_raw	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.component_raw()$/;"	f
suite.component_type	cache-plug/lightline.vim/test/highlight.vim	/^function! s:suite.component_type()$/;"	f
suite.component_type	cache-plug/lightline.vim/test/link.vim	/^function! s:suite.component_type()$/;"	f
suite.custom	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom()$/;"	f
suite.custom_error	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_error()$/;"	f
suite.custom_left_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_left_nil()$/;"	f
suite.custom_mixed	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed()$/;"	f
suite.custom_mixed_2	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed_2()$/;"	f
suite.custom_number	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_number()$/;"	f
suite.custom_one	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_one()$/;"	f
suite.custom_right_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_right_nil()$/;"	f
suite.custom_string	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_string()$/;"	f
suite.custom_two	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_two()$/;"	f
suite.custom_type	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type()$/;"	f
suite.custom_type_error	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_error()$/;"	f
suite.custom_type_flatten	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_flatten()$/;"	f
suite.custom_type_left_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_left_nil()$/;"	f
suite.custom_type_mixed	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed()$/;"	f
suite.custom_type_mixed_2	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed_2()$/;"	f
suite.custom_type_notfound	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_notfound()$/;"	f
suite.custom_type_number	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_number()$/;"	f
suite.custom_type_one	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_one()$/;"	f
suite.custom_type_right_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_right_nil()$/;"	f
suite.custom_type_string	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_string()$/;"	f
suite.custom_type_two	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_two()$/;"	f
suite.custom_type_void_string	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string()$/;"	f
suite.custom_type_void_string_array	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array()$/;"	f
suite.custom_type_void_string_array_2	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_2()$/;"	f
suite.custom_type_void_string_array_3	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_3()$/;"	f
suite.custom_type_void_string_array_4	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_4()$/;"	f
suite.custom_void_string	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string()$/;"	f
suite.custom_void_string_array	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array()$/;"	f
suite.custom_void_string_array_2	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_2()$/;"	f
suite.custom_void_string_array_3	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_3()$/;"	f
suite.custom_void_string_array_4	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_4()$/;"	f
suite.default	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.default()$/;"	f
suite.default	cache-plug/lightline.vim/test/toggle.vim	/^function! s:suite.default()$/;"	f
suite.dictionary_function	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.dictionary_function()$/;"	f
suite.disable_enable	cache-plug/lightline.vim/test/toggle.vim	/^function! s:suite.disable_enable()$/;"	f
suite.disabled	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.disabled()$/;"	f
suite.doautoall	cache-plug/lightline.vim/test/autocmd.vim	/^function! s:suite.doautoall()$/;"	f
suite.duplicated_both_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil()$/;"	f
suite.duplicated_both_nil_left_most	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_left_most()$/;"	f
suite.duplicated_both_nil_right_most	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_right_most()$/;"	f
suite.duplicated_left_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_left_nil()$/;"	f
suite.duplicated_right_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_right_nil()$/;"	f
suite.duplicated_string	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_string()$/;"	f
suite.duplicated_type_both_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil()$/;"	f
suite.duplicated_type_both_nil_left_most	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_left_most()$/;"	f
suite.duplicated_type_both_nil_right_most	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_right_most()$/;"	f
suite.duplicated_type_left_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_left_nil()$/;"	f
suite.duplicated_type_right_nil	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_right_nil()$/;"	f
suite.enabled	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.enabled()$/;"	f
suite.error	cache-plug/lightline.vim/test/error.vim	/^function! s:suite.error()$/;"	f
suite.expand	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.expand()$/;"	f
suite.filename	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.filename()$/;"	f
suite.filename_modified	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.filename_modified()$/;"	f
suite.flatten	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.flatten()$/;"	f
suite.hi_clear	cache-plug/lightline.vim/test/link.vim	/^function! s:suite.hi_clear()$/;"	f
suite.highlight	cache-plug/lightline.vim/test/highlight.vim	/^function! s:suite.highlight()$/;"	f
suite.insert	cache-plug/lightline.vim/test/highlight.vim	/^function! s:suite.insert()$/;"	f
suite.insert	cache-plug/lightline.vim/test/link.vim	/^function! s:suite.insert()$/;"	f
suite.keep_original	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.keep_original()$/;"	f
suite.left_right	cache-plug/lightline.vim/test/highlight.vim	/^function! s:suite.left_right()$/;"	f
suite.left_right	cache-plug/lightline.vim/test/link.vim	/^function! s:suite.left_right()$/;"	f
suite.link	cache-plug/lightline.vim/test/link.vim	/^function! s:suite.link()$/;"	f
suite.many1	cache-plug/lightline.vim/test/uniq.vim	/^function! s:suite.many1()$/;"	f
suite.many2	cache-plug/lightline.vim/test/uniq.vim	/^function! s:suite.many2()$/;"	f
suite.many3	cache-plug/lightline.vim/test/uniq.vim	/^function! s:suite.many3()$/;"	f
suite.mode	cache-plug/lightline.vim/test/mode.vim	/^function! s:suite.mode()$/;"	f
suite.mode_map	cache-plug/lightline.vim/test/mode.vim	/^function! s:suite.mode_map()$/;"	f
suite.modified	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.modified()$/;"	f
suite.multiple	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.multiple()$/;"	f
suite.multiple_type	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.multiple_type()$/;"	f
suite.nil	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.nil()$/;"	f
suite.nil	cache-plug/lightline.vim/test/uniq.vim	/^function! s:suite.nil()$/;"	f
suite.no_components	cache-plug/lightline.vim/test/highlight.vim	/^function! s:suite.no_components()$/;"	f
suite.notfound	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.notfound()$/;"	f
suite.one	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.one()$/;"	f
suite.one	cache-plug/lightline.vim/test/uniq.vim	/^function! s:suite.one()$/;"	f
suite.one_empty	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.one_empty()$/;"	f
suite.onetab	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.onetab()$/;"	f
suite.quickfix_statusline	cache-plug/lightline.vim/test/quickfix.vim	/^function! s:suite.quickfix_statusline()$/;"	f
suite.raw_type	cache-plug/lightline.vim/test/expand.vim	/^function! s:suite.raw_type()$/;"	f
suite.replace	cache-plug/lightline.vim/test/highlight.vim	/^function! s:suite.replace()$/;"	f
suite.replace	cache-plug/lightline.vim/test/link.vim	/^function! s:suite.replace()$/;"	f
suite.subseparator	cache-plug/lightline.vim/test/highlight.vim	/^function! s:suite.subseparator()$/;"	f
suite.subseparator	cache-plug/lightline.vim/test/link.vim	/^function! s:suite.subseparator()$/;"	f
suite.subseparator_component	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component()$/;"	f
suite.subseparator_component_expand	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand()$/;"	f
suite.subseparator_component_expand_1	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_1()$/;"	f
suite.subseparator_component_expand_2	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_2()$/;"	f
suite.subseparator_component_expand_3	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_3()$/;"	f
suite.subseparator_component_function	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function()$/;"	f
suite.subseparator_component_function_1	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_1()$/;"	f
suite.subseparator_component_function_2	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_2()$/;"	f
suite.subseparator_component_function_3	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_3()$/;"	f
suite.subseparator_component_function_4	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_4()$/;"	f
suite.subseparator_component_function_5	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_5()$/;"	f
suite.subseparator_component_function_6	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_6()$/;"	f
suite.subseparator_component_function_7	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_7()$/;"	f
suite.subseparator_component_function_visible_condition_1	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_1()$/;"	f
suite.subseparator_component_function_visible_condition_2	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_2()$/;"	f
suite.subseparator_component_function_visible_condition_3	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_3()$/;"	f
suite.subseparator_component_function_visible_condition_4	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_4()$/;"	f
suite.subseparator_component_function_visible_condition_5	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_5()$/;"	f
suite.subseparator_component_function_visible_condition_6	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_6()$/;"	f
suite.subseparator_component_function_visible_condition_7	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_7()$/;"	f
suite.subseparator_component_not_found	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found()$/;"	f
suite.subseparator_component_not_found_1	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_1()$/;"	f
suite.subseparator_component_not_found_2	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_2()$/;"	f
suite.subseparator_component_visible_condition_1	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_1()$/;"	f
suite.subseparator_component_visible_condition_2	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_2()$/;"	f
suite.subseparator_component_visible_condition_3	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_3()$/;"	f
suite.subseparator_component_visible_condition_4	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_4()$/;"	f
suite.subseparator_component_visible_condition_5	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_5()$/;"	f
suite.subseparator_component_visible_condition_6	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_6()$/;"	f
suite.subseparator_component_visible_condition_7	cache-plug/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_7()$/;"	f
suite.tab_component	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component()$/;"	f
suite.tab_component_empty_left	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_left()$/;"	f
suite.tab_component_empty_middle	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_middle()$/;"	f
suite.tab_component_function	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_function()$/;"	f
suite.tabclose	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose()$/;"	f
suite.tabclose_last	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose_last()$/;"	f
suite.tabline	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.tabline()$/;"	f
suite.tabnew	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew()$/;"	f
suite.tabnew	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew()$/;"	f
suite.tabnew	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew()$/;"	f
suite.tabnew_20	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20()$/;"	f
suite.tabnew_20_tabfirst	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst()$/;"	f
suite.tabnew_20_tabfirst_tabnext	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst_tabnext()$/;"	f
suite.tabnew_20_tabnext_10	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabnext_10()$/;"	f
suite.tabnew_20_tabprevious	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious()$/;"	f
suite.tabnew_20_tabprevious_tabprevious	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious_tabprevious()$/;"	f
suite.tabnew_first	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew_first()$/;"	f
suite.tabnew_tabfirst	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabfirst()$/;"	f
suite.tabnew_tabnew	cache-plug/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
suite.tabnew_tabnew	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
suite.tabnew_tabnew_tabfirst	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabfirst()$/;"	f
suite.tabnew_tabnew_tabprevious	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabprevious()$/;"	f
suite.tabnext	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.tabnext()$/;"	f
suite.tabonly	cache-plug/lightline.vim/test/tabline.vim	/^function! s:suite.tabonly()$/;"	f
suite.tabs	cache-plug/lightline.vim/test/tabs.vim	/^function! s:suite.tabs()$/;"	f
suite.three	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.three()$/;"	f
suite.three	cache-plug/lightline.vim/test/uniq.vim	/^function! s:suite.three()$/;"	f
suite.three_duplicated	cache-plug/lightline.vim/test/uniq.vim	/^function! s:suite.three_duplicated()$/;"	f
suite.three_empty_all	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_all()$/;"	f
suite.three_empty_left	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left()$/;"	f
suite.three_empty_left_middle	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_middle()$/;"	f
suite.three_empty_left_right	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_right()$/;"	f
suite.three_empty_middle	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle()$/;"	f
suite.three_empty_middle_right	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle_right()$/;"	f
suite.three_empty_right	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_right()$/;"	f
suite.toggle	cache-plug/lightline.vim/test/toggle.vim	/^function! s:suite.toggle()$/;"	f
suite.two	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.two()$/;"	f
suite.two	cache-plug/lightline.vim/test/uniq.vim	/^function! s:suite.two()$/;"	f
suite.two_duplicated	cache-plug/lightline.vim/test/uniq.vim	/^function! s:suite.two_duplicated()$/;"	f
suite.two_empty_both	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_both()$/;"	f
suite.two_empty_left	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_left()$/;"	f
suite.two_empty_right	cache-plug/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_right()$/;"	f
suite.visual	cache-plug/lightline.vim/test/highlight.vim	/^function! s:suite.visual()$/;"	f
suite.visual	cache-plug/lightline.vim/test/link.vim	/^function! s:suite.visual()$/;"	f
suite.win_execute_setfiletype	cache-plug/lightline.vim/test/popup.vim	/^function! s:suite.win_execute_setfiletype()$/;"	f
summary	cache-plug/vim-gitgutter/test/runner.vim	/^let summary = [$/;"	v
sw	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:sw()$/;"	f
sw	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^  function! s:sw()$/;"	f
sw	cache-plug/vim-polyglot/indent/caddyfile.vim	/^	function! s:sw()$/;"	f
sw	cache-plug/vim-polyglot/indent/crystal.vim	/^  function! s:sw()$/;"	f
sw	cache-plug/vim-polyglot/indent/cython.vim	/^    function! s:sw()$/;"	f
sw	cache-plug/vim-polyglot/indent/ecrystal.vim	/^  function s:sw()$/;"	f
sw	cache-plug/vim-polyglot/indent/javascript.vim	/^  function s:sw()$/;"	f
sw	cache-plug/vim-polyglot/indent/python.vim	/^    function! s:sw()$/;"	f
switch_buffer	cache-plug/vim-buftabline/plugin/buftabline.vim	/^function! s:switch_buffer(bufnum, clicks, button, mod)$/;"	f
syn	cache-plug/vim-polyglot/indent/cucumber.vim	/^function! s:syn(lnum)$/;"	f
syn_contains	cache-plug/vim-polyglot/autoload/jsx_pretty/comment.vim	/^function! s:syn_contains(lnum, cnum, syn_name)$/;"	f
syn_id_name	cache-plug/vim-polyglot/indent/clojure.vim	/^	function! s:syn_id_name()$/;"	f
syn_id_name	cache-plug/vim-polyglot/indent/fennel.vim	/^	function! s:syn_id_name()$/;"	f
syn_name	cache-plug/vim-polyglot/autoload/jsx_pretty/comment.vim	/^function! s:syn_name(lnum, cnum)$/;"	f
synid	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! s:synid() abort$/;"	f
syntax_at	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:syntax_at(lnum, col)$/;"	f
syntax_context	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:syntax_context(lnum)$/;"	f
syntax_keyword	cache-plug/vim-polyglot/syntax/clojure.vim	/^function! s:syntax_keyword(dict)$/;"	f
syntax_name	cache-plug/vim-polyglot/autoload/elixir/indent.vim	/^function! s:syntax_name(line, col)$/;"	f
syntax_stack_at	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:syntax_stack_at(lnum, col)$/;"	f
system	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! s:system(cmd)$/;"	f
system	cache-plug/vim-polyglot/autoload/rust.vim	/^function! s:system(pwd, cmd)$/;"	f
system	cache-plug/vim-polyglot/autoload/vital/_crystal/Process.vim	/^function! s:system(str, ...) abort$/;"	f
system	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! s:system(cmd, ...) abort$/;"	f
t	plugin/bepo.vim	/^noremap t j$/;"	m
tab	cache-plug/lightline.vim/test/tabs.vim	/^function! s:tab(number, ...) abort$/;"	f
tads_minlines	cache-plug/vim-polyglot/syntax/tads.vim	/^  let tads_minlines = 15$/;"	v
tads_sync_dist	cache-plug/vim-polyglot/syntax/tads.vim	/^  let tads_sync_dist = 100$/;"	v
tags_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
take_while	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
tcount	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^    let tcount += 1$/;"	v
tcount	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^let tcount = 1$/;"	v
tcount	cache-plug/delimitMate/test/autoclose_quotes.vim	/^      let tcount += 1$/;"	v
tcount	cache-plug/delimitMate/test/autoclose_quotes.vim	/^    let tcount += 1$/;"	v
tcount	cache-plug/delimitMate/test/autoclose_quotes.vim	/^let tcount = 1$/;"	v
tcount	cache-plug/delimitMate/test/expand_cr.vim	/^  let tcount += 1$/;"	v
tcount	cache-plug/delimitMate/test/expand_cr.vim	/^let tcount = 1$/;"	v
tcount	cache-plug/delimitMate/test/expand_space.vim	/^  let tcount += 1$/;"	v
tcount	cache-plug/delimitMate/test/expand_space.vim	/^let tcount = 1$/;"	v
teardown	cache-plug/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestBase.TestGoFZF
teardown	cache-plug/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestBase.TestShell
template_sink	cache-plug/vim-polyglot/autoload/fzf_gitignore.vim	/^function! s:template_sink(templates) abort$/;"	f
tempname	cache-plug/fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	cache-plug/fzf/src/pattern.go	/^type term struct {$/;"	t
term	cache-plug/lightline.vim/autoload/lightline.vim	/^function! s:term(p) abort$/;"	f
termEqual	cache-plug/fzf/src/pattern.go	/^	termEqual$/;"	c
termExact	cache-plug/fzf/src/pattern.go	/^	termExact$/;"	c
termFuzzy	cache-plug/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c
termPrefix	cache-plug/fzf/src/pattern.go	/^	termPrefix$/;"	c
termSet	cache-plug/fzf/src/pattern.go	/^type termSet []term$/;"	t
termSuffix	cache-plug/fzf/src/pattern.go	/^	termSuffix$/;"	c
termType	cache-plug/fzf/src/pattern.go	/^type termType int$/;"	t
term_opts	cache-plug/fzf/plugin/fzf.vim	/^        let term_opts.curwin = 1$/;"	v
term_opts	cache-plug/fzf/plugin/fzf.vim	/^        let term_opts.hidden = 1$/;"	v
term_opts	cache-plug/fzf/plugin/fzf.vim	/^      let term_opts = {'exit_cb': function(fzf.on_exit), 'term_kill': 'term'}$/;"	v
terminate	cache-plug/fzf/src/reader.go	/^func (r *Reader) terminate() {$/;"	f
terminateTree	cache-plug/coc.nvim/bin/terminateProcess.sh	/^terminateTree() {$/;"	f
terraform#align	cache-plug/vim-polyglot/autoload/terraform.vim	/^function! terraform#align() abort$/;"	f
terraform#commands	cache-plug/vim-polyglot/autoload/terraform.vim	/^function! terraform#commands(ArgLead, CmdLine, CursorPos) abort$/;"	f
terraform#fmt	cache-plug/vim-polyglot/autoload/terraform.vim	/^function! terraform#fmt() abort$/;"	f
test	cache-plug/delimitMate/plugin/delimitMate.vim	/^function! s:test() "{{{$/;"	f
test_accept_non_empty	cache-plug/fzf/test/test_go.rb	/^  def test_accept_non_empty$/;"	f	class:TestBase.TestGoFZF
test_accept_non_empty_with_empty_list	cache-plug/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestBase.TestGoFZF
test_accept_non_empty_with_multi_selection	cache-plug/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestBase.TestGoFZF
test_alt_c	cache-plug/fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	class:TestBase.TestShell
test_alt_c_command	cache-plug/fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	class:TestBase.TestShell
test_backward_delete_char_eof	cache-plug/fzf/test/test_go.rb	/^  def test_backward_delete_char_eof$/;"	f	class:TestBase.TestGoFZF
test_backward_eof	cache-plug/fzf/test/test_go.rb	/^  def test_backward_eof$/;"	f	class:TestBase.TestGoFZF
test_bind	cache-plug/fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestBase.TestGoFZF
test_bind_print_query	cache-plug/fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestBase.TestGoFZF
test_bind_replace_query	cache-plug/fzf/test/test_go.rb	/^  def test_bind_replace_query$/;"	f	class:TestBase.TestGoFZF
test_cancel	cache-plug/fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestBase.TestGoFZF
test_change_prompt	cache-plug/fzf/test/test_go.rb	/^  def test_change_prompt$/;"	f	class:TestBase.TestGoFZF
test_change_top	cache-plug/fzf/test/test_go.rb	/^  def test_change_top$/;"	f	class:TestBase.TestGoFZF
test_clear_list_when_header_lines_changed_due_to_reload	cache-plug/fzf/test/test_go.rb	/^  def test_clear_list_when_header_lines_changed_due_to_reload$/;"	f	class:TestBase.TestGoFZF
test_clear_query	cache-plug/fzf/test/test_go.rb	/^  def test_clear_query$/;"	f	class:TestBase.TestGoFZF
test_clear_selection	cache-plug/fzf/test/test_go.rb	/^  def test_clear_selection$/;"	f	class:TestBase.TestGoFZF
test_complete_quoted_command	cache-plug/fzf/test/test_go.rb	/^  def test_complete_quoted_command$/;"	f	class:TestZsh
test_ctrl_r	cache-plug/fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	class:TestBase.TestShell
test_ctrl_r_abort	cache-plug/fzf/test/test_go.rb	/^  def test_ctrl_r_abort$/;"	f	class:TestBase.TestShell
test_ctrl_r_multiline	cache-plug/fzf/test/test_go.rb	/^  def test_ctrl_r_multiline$/;"	f	class:TestBase.TestShell
test_ctrl_t	cache-plug/fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	class:TestBase.TestShell
test_ctrl_t_unicode	cache-plug/fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	class:TestBase.TestShell
test_custom_completion	cache-plug/fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	class:CompletionTest
test_custom_completion_api	cache-plug/fzf/test/test_go.rb	/^  def test_custom_completion_api$/;"	f	class:CompletionTest
test_cycle	cache-plug/fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestBase.TestGoFZF
test_default_extended	cache-plug/fzf/test/test_go.rb	/^  def test_default_extended$/;"	f	class:TestBase.TestGoFZF
test_dir_completion	cache-plug/fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	class:CompletionTest
test_dynamic_completion_loader	cache-plug/fzf/test/test_go.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestBash
test_escaped_meta_characters	cache-plug/fzf/test/test_go.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestBase.TestGoFZF
test_exact	cache-plug/fzf/test/test_go.rb	/^  def test_exact$/;"	f	class:TestBase.TestGoFZF
test_execute	cache-plug/fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestBase.TestGoFZF
test_execute_multi	cache-plug/fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestBase.TestGoFZF
test_execute_plus_flag	cache-plug/fzf/test/test_go.rb	/^  def test_execute_plus_flag$/;"	f	class:TestBase.TestGoFZF
test_execute_shell	cache-plug/fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestBase.TestGoFZF
test_exit_0	cache-plug/fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestBase.TestGoFZF
test_exit_0_exit_code	cache-plug/fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestBase.TestGoFZF
test_exitstatus_empty	cache-plug/fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f	class:TestBase.TestGoFZF
test_expect	cache-plug/fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestBase.TestGoFZF
test_expect_print_query	cache-plug/fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestBase.TestGoFZF
test_expect_print_query_select_1	cache-plug/fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestBase.TestGoFZF
test_expect_printable_character_print_query	cache-plug/fzf/test/test_go.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestBase.TestGoFZF
test_file_completion	cache-plug/fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	class:CompletionTest
test_file_completion_root	cache-plug/fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	class:CompletionTest
test_file_completion_unicode	cache-plug/fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	class:CompletionTest
test_file_word	cache-plug/fzf/test/test_go.rb	/^  def test_file_word$/;"	f	class:TestBase.TestGoFZF
test_filter_exitstatus	cache-plug/fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestBase.TestGoFZF
test_fzf_default_command	cache-plug/fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestBase.TestGoFZF
test_fzf_default_command_failure	cache-plug/fzf/test/test_go.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestBase.TestGoFZF
test_header	cache-plug/fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestBase.TestGoFZF
test_header_and_header_lines	cache-plug/fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestBase.TestGoFZF
test_header_and_header_lines_reverse	cache-plug/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestBase.TestGoFZF
test_header_and_header_lines_reverse_list	cache-plug/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse_list$/;"	f	class:TestBase.TestGoFZF
test_header_lines	cache-plug/fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestBase.TestGoFZF
test_header_lines_overflow	cache-plug/fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestBase.TestGoFZF
test_header_lines_reverse	cache-plug/fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestBase.TestGoFZF
test_header_lines_reverse_list	cache-plug/fzf/test/test_go.rb	/^  def test_header_lines_reverse_list$/;"	f	class:TestBase.TestGoFZF
test_header_lines_with_nth	cache-plug/fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestBase.TestGoFZF
test_header_reverse	cache-plug/fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestBase.TestGoFZF
test_header_reverse_list	cache-plug/fzf/test/test_go.rb	/^  def test_header_reverse_list$/;"	f	class:TestBase.TestGoFZF
test_history	cache-plug/fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestBase.TestGoFZF
test_hscroll_off	cache-plug/fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f	class:TestBase.TestGoFZF
test_info_hidden	cache-plug/fzf/test/test_go.rb	/^  def test_info_hidden$/;"	f	class:TestBase.TestGoFZF
test_invalid_cache	cache-plug/fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestBase.TestGoFZF
test_invalid_cache_query_type	cache-plug/fzf/test/test_go.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestBase.TestGoFZF
test_invalid_option	cache-plug/fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestBase.TestGoFZF
test_inverse_only_search_should_not_sort_the_result	cache-plug/fzf/test/test_go.rb	/^  def test_inverse_only_search_should_not_sort_the_result$/;"	f	class:TestBase.TestGoFZF
test_jump	cache-plug/fzf/test/test_go.rb	/^  def test_jump$/;"	f	class:TestBase.TestGoFZF
test_jump_accept	cache-plug/fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f	class:TestBase.TestGoFZF
test_keep_right	cache-plug/fzf/test/test_go.rb	/^  def test_keep_right$/;"	f	class:TestBase.TestGoFZF
test_key_bindings	cache-plug/fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestBase.TestGoFZF
test_long_line	cache-plug/fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestBase.TestGoFZF
test_mappings	cache-plug/delimitMate/autoload/delimitMate.vim	/^function! s:test_mappings(list, is_matchpair) "{{{$/;"	f
test_margin	cache-plug/fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestBase.TestGoFZF
test_margin_reverse	cache-plug/fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestBase.TestGoFZF
test_margin_reverse_list	cache-plug/fzf/test/test_go.rb	/^  def test_margin_reverse_list$/;"	f	class:TestBase.TestGoFZF
test_marker	cache-plug/fzf/test/test_go.rb	/^  def test_marker$/;"	f	class:TestBase.TestGoFZF
test_multi_max	cache-plug/fzf/test/test_go.rb	/^  def test_multi_max$/;"	f	class:TestBase.TestGoFZF
test_multi_order	cache-plug/fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestBase.TestGoFZF
test_no_clear	cache-plug/fzf/test/test_go.rb	/^  def test_no_clear$/;"	f	class:TestBase.TestGoFZF
test_normalized_match	cache-plug/fzf/test/test_go.rb	/^  def test_normalized_match$/;"	f	class:TestBase.TestGoFZF
test_or_operator	cache-plug/fzf/test/test_go.rb	/^  def test_or_operator$/;"	f	class:TestBase.TestGoFZF
test_partial_caching	cache-plug/fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f	class:TestBase.TestGoFZF
test_phony	cache-plug/fzf/test/test_go.rb	/^  def test_phony$/;"	f	class:TestBase.TestGoFZF
test_pointer	cache-plug/fzf/test/test_go.rb	/^  def test_pointer$/;"	f	class:TestBase.TestGoFZF
test_pointer_with_jump	cache-plug/fzf/test/test_go.rb	/^  def test_pointer_with_jump$/;"	f	class:TestBase.TestGoFZF
test_preview	cache-plug/fzf/test/test_go.rb	/^  def test_preview$/;"	f	class:TestBase.TestGoFZF
test_preview_bindings_with_default_preview	cache-plug/fzf/test/test_go.rb	/^  def test_preview_bindings_with_default_preview$/;"	f	class:TestBase.TestGoFZF
test_preview_bindings_without_default_preview	cache-plug/fzf/test/test_go.rb	/^  def test_preview_bindings_without_default_preview$/;"	f	class:TestBase.TestGoFZF
test_preview_clear_screen	cache-plug/fzf/test/test_go.rb	/^  def test_preview_clear_screen$/;"	f	class:TestBase.TestGoFZF
test_preview_correct_tab_width_after_ansi_reset_code	cache-plug/fzf/test/test_go.rb	/^  def test_preview_correct_tab_width_after_ansi_reset_code$/;"	f	class:TestBase.TestGoFZF
test_preview_file	cache-plug/fzf/test/test_go.rb	/^  def test_preview_file$/;"	f	class:TestBase.TestGoFZF
test_preview_flags	cache-plug/fzf/test/test_go.rb	/^  def test_preview_flags$/;"	f	class:TestBase.TestGoFZF
test_preview_hidden	cache-plug/fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f	class:TestBase.TestGoFZF
test_preview_q_no_match	cache-plug/fzf/test/test_go.rb	/^  def test_preview_q_no_match$/;"	f	class:TestBase.TestGoFZF
test_preview_q_no_match_with_initial_query	cache-plug/fzf/test/test_go.rb	/^  def test_preview_q_no_match_with_initial_query$/;"	f	class:TestBase.TestGoFZF
test_preview_scroll_begin_and_offset	cache-plug/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_and_offset$/;"	f	class:TestBase.TestGoFZF
test_preview_scroll_begin_constant	cache-plug/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_constant$/;"	f	class:TestBase.TestGoFZF
test_preview_scroll_begin_expr	cache-plug/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_expr$/;"	f	class:TestBase.TestGoFZF
test_preview_size_0	cache-plug/fzf/test/test_go.rb	/^  def test_preview_size_0$/;"	f	class:TestBase.TestGoFZF
test_preview_update_on_select	cache-plug/fzf/test/test_go.rb	/^  def test_preview_update_on_select$/;"	f	class:TestBase.TestGoFZF
test_preview_window_follow	cache-plug/fzf/test/test_go.rb	/^  def test_preview_window_follow$/;"	f	class:TestBase.TestGoFZF
test_process_completion	cache-plug/fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	class:CompletionTest
test_query_unicode	cache-plug/fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestBase.TestGoFZF
test_read0	cache-plug/fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestBase.TestGoFZF
test_reload	cache-plug/fzf/test/test_go.rb	/^  def test_reload$/;"	f	class:TestBase.TestGoFZF
test_reload_even_when_theres_no_match	cache-plug/fzf/test/test_go.rb	/^  def test_reload_even_when_theres_no_match$/;"	f	class:TestBase.TestGoFZF
test_scroll	cache-plug/fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestBase.TestGoFZF
test_select_1	cache-plug/fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestBase.TestGoFZF
test_select_1_exit_0_fail	cache-plug/fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestBase.TestGoFZF
test_select_all_deselect_all_toggle_all	cache-plug/fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestBase.TestGoFZF
test_smart_case_for_each_term	cache-plug/fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestBase.TestGoFZF
test_strip_xterm_osc_sequence	cache-plug/fzf/test/test_go.rb	/^  def test_strip_xterm_osc_sequence$/;"	f	class:TestBase.TestGoFZF
test_sync	cache-plug/fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestBase.TestGoFZF
test_tabstop	cache-plug/fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestBase.TestGoFZF
test_tac	cache-plug/fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestBase.TestGoFZF
test_tac_nosort	cache-plug/fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestBase.TestGoFZF
test_tac_sort	cache-plug/fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestBase.TestGoFZF
test_tiebreak	cache-plug/fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestBase.TestGoFZF
test_tiebreak_begin_algo_v2	cache-plug/fzf/test/test_go.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestBase.TestGoFZF
test_tiebreak_end	cache-plug/fzf/test/test_go.rb	/^  def test_tiebreak_end$/;"	f	class:TestBase.TestGoFZF
test_tiebreak_index_begin	cache-plug/fzf/test/test_go.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestBase.TestGoFZF
test_tiebreak_length_with_nth	cache-plug/fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestBase.TestGoFZF
test_toggle_sort	cache-plug/fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestBase.TestGoFZF
test_unicode_case	cache-plug/fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestBase.TestGoFZF
test_unset_completion	cache-plug/fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	class:CompletionTest
test_vanilla	cache-plug/fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestBase.TestGoFZF
test_with_nth	cache-plug/fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestBase.TestGoFZF
test_with_nth_ansi	cache-plug/fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestBase.TestGoFZF
test_with_nth_basic	cache-plug/fzf/test/test_go.rb	/^  def test_with_nth_basic$/;"	f	class:TestBase.TestGoFZF
test_with_nth_no_ansi	cache-plug/fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestBase.TestGoFZF
testsnumber	cache-plug/delimitMate/test/autoclose_matchpairs.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^"'''))$/;"	v
testsnumber	cache-plug/delimitMate/test/autoclose_quotes.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^"'''))$/;"	v
testsnumber	cache-plug/delimitMate/test/expand_cr.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^=\\{80}$'''))$/;"	v
testsnumber	cache-plug/delimitMate/test/expand_space.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^=\\{80}$'''))$/;"	v
throw	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
timeout	cache-plug/coc.nvim/autoload/coc/util.vim	/^  let timeout = s:is_vim ? 10 : 0$/;"	v
tmux_enabled	cache-plug/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
toActions	cache-plug/fzf/src/terminal.go	/^func toActions(types ...actionType) []action {$/;"	f
toAnsiString	cache-plug/fzf/src/ansi.go	/^func toAnsiString(color tui.Color, offset int) string {$/;"	f
toend	cache-plug/vim-polyglot/ftplugin/cobol.vim	/^function! s:toend(direction)$/;"	f
toggleItem	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) bool {$/;"	f
topindent	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^function s:topindent(lnum)$/;"	f
transaction.format_head	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.format_head() abort dict "{{{2$/;"	f
transaction.from_lnum	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.from_lnum(lnum) abort dict "{{{2$/;"	f
transaction.new	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.new() abort dict$/;"	f
transaction.parse_body	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.parse_body(...) abort dict "{{{2$/;"	f
transaction.set_state	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:transaction.set_state(char) abort dict "{{{2$/;"	f
transformInput	cache-plug/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f
transform_patterns	cache-plug/vim-polyglot/scripts/build	/^def transform_patterns(heuristics)$/;"	f
transpile	cache-plug/vim-buftabline/plugin/buftabline.vim	/^	function s:transpile()$/;"	f
trigger_gitgutter	cache-plug/vim-gitgutter/test/test_gitgutter.vim	/^function s:trigger_gitgutter()$/;"	f
trim	cache-plug/coc.nvim/autoload/coc.vim	/^function! s:trim(str)$/;"	f
trim	cache-plug/vim-polyglot/autoload/jsx_pretty/indent.vim	/^function s:trim(line)$/;"	f
trim	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim(str) abort$/;"	f
trimLeft	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f
trimMessage	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) trimMessage(message string, maxWidth int) string {$/;"	f
trimQuery	cache-plug/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f
trimRight	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, int) {$/;"	f
trim_end	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
trim_start	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
truncate	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
truncateQuery	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f
truncate_skipping	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
trySkip	cache-plug/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f
try_curl	cache-plug/fzf/install	/^try_curl() {$/;"	f
try_wget	cache-plug/fzf/install	/^try_wget() {$/;"	f
ttyname	cache-plug/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f
ttyname	cache-plug/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f
tui	cache-plug/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	cache-plug/fzf/src/tui/light.go	/^package tui$/;"	p
tui	cache-plug/fzf/src/tui/light_unix.go	/^package tui$/;"	p
tui	cache-plug/fzf/src/tui/light_windows.go	/^package tui$/;"	p
tui	cache-plug/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	cache-plug/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	cache-plug/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	cache-plug/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	cache-plug/fzf/src/tui/tui_test.go	/^package tui$/;"	p
typeKeywordIncPattern	cache-plug/vim-polyglot/indent/plantuml.vim	/^function! s:typeKeywordIncPattern() abort$/;"	f
typescript_props	cache-plug/vim-polyglot/syntax/yats.vim	/^let typescript_props = 1$/;"	v
uc_minlines	cache-plug/vim-polyglot/syntax/uc.vim	/^  let uc_minlines = 10$/;"	v
unc_path	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:unc_path(bufnr)$/;"	f
undo	cache-plug/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:undo(hunk_diff)$/;"	f
unescape	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
unescape_pattern	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
unfnameescape	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! s:unfnameescape(str) abort$/;"	f
unformat_ocaml_type	cache-plug/vim-polyglot/ftplugin/ocaml.vim	/^    function s:unformat_ocaml_type(res)$/;"	f
uniq	cache-plug/lightline.vim/autoload/lightline.vim	/^  function! s:uniq(xs) abort$/;"	f
uniq	cache-plug/lightline.vim/test/uniq.vim	/^function! s:uniq(...)$/;"	f
uniq	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
uniq_by	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
unload	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:unload() abort dict$/;"	f
unmap	cache-plug/vim-polyglot/autoload/julia_blocks.vim	/^function! s:unmap(function)$/;"	f
unset_var	cache-plug/fzf/test/test_go.rb	/^  def unset_var(name)$/;"	f	class:TestBase.TestShell
unshift	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
until	cache-plug/fzf/test/test_go.rb	/^  def until(refresh = false)$/;"	f	class:Tmux
upconvert	cache-plug/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:upconvert(nr) abort$/;"	f
updatePromptOffset	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) updatePromptOffset() ([]rune, []rune) {$/;"	f
updateTerminalSize	cache-plug/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f
updateTerminalSize	cache-plug/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f
update_progress	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:update_progress(bufnr, width, ts) abort$/;"	f
update_tags	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
upsert_new_gitgutter_signs	cache-plug/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:upsert_new_gitgutter_signs(bufnr, modified_lines) abort$/;"	f
usage	cache-plug/fzf/src/options.go	/^const usage = `usage: fzf [options]$/;"	c
use_known_shell	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:use_known_shell() abort$/;"	f
use_mutt_sidebar	cache-plug/vim-polyglot/syntax/muttrc.vim	/^  let use_mutt_sidebar=0$/;"	v
use_raw_list	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	cache-plug/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
use_sh	cache-plug/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
useful_diff_colours	cache-plug/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:useful_diff_colours()$/;"	f
util	cache-plug/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/chars.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/chars_test.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/eventbox.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/slab.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/util.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/util_test.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/util_unix.go	/^package util$/;"	p
util	cache-plug/fzf/src/util/util_windows.go	/^package util$/;"	p
val	cache-plug/vim-polyglot/ftplugin/markdown.vim	/^        let val = matchstr(s:filetype, "[^=]*$")$/;"	v
validateSign	cache-plug/fzf/src/options.go	/^func validateSign(sign string, signOptName string) error {$/;"	f
validate_layout	cache-plug/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
variables	cache-plug/coc.nvim/autoload/coc/util.vim	/^function! s:variables(bufnr) abort$/;"	f
vera_comment_strings	cache-plug/vim-polyglot/syntax/vera.vim	/^let vera_comment_strings = 1$/;"	v
verify	cache-plug/vim-polyglot/scripts/build	/^def verify(packages, heuristics)$/;"	f
version	cache-plug/fzf/main.go	/^var version string = "0.24"$/;"	v
version	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! s:version() abort$/;"	f
version_requirement	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:version_requirement(val, min)$/;"	f
version_requirement	cache-plug/fzf/plugin/fzf.vim	/^function! s:version_requirement(val, min)$/;"	f
vim	cache-plug/vim-polyglot/ftplugin/terraform.vim	/^  augroup vim.terraform.fmt$/;"	a
vim	cache-plug/vim-polyglot/syntax/go.vim	/^augroup vim-go-hi$/;"	a
vimTAP	cache-plug/delimitMate/test/_setup.vim	/^let vimTAP = expand('<sfile>:p:h').'\/build\/VimTAP'$/;"	v
vim_version	cache-plug/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:vim_version()$/;"	f
vital#	cache-plug/vim-polyglot/autoload/vital/_crystal.vim	/^function! vital#{s:_plugin_name}#function(funcname) abort$/;"	f
vital#	cache-plug/vim-polyglot/autoload/vital/_crystal.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
vital#	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
vital_files	cache-plug/vim-polyglot/autoload/vital/crystal.vim	/^function! s:vital_files() abort$/;"	f
vmove	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f
vset	cache-plug/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f
w	plugin/bepo.vim	/^noremap w <C-w>$/;"	m
w<CR>	plugin/bepo.vim	/^noremap w<CR> :vsplit<CR>$/;"	m
w<SPACE>	plugin/bepo.vim	/^noremap w<SPACE> :split<CR>$/;"	m
wait	cache-plug/fzf/test/test_go.rb	/^def wait$/;"	f
warn	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
warn	cache-plug/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
warn	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! s:warn(...) abort$/;"	f
warning_message	cache-plug/vim-polyglot/autoload/ledger.vim	/^function! s:warning_message(msg) abort$/;"	f
wc	plugin/bepo.vim	/^noremap wc <C-w>h$/;"	m
wcswidth	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
wd	plugin/bepo.vim	/^noremap wd <C-w>c$/;"	m
whiteSuffix	cache-plug/fzf/src/terminal.go	/^var whiteSuffix *regexp.Regexp$/;"	v
widget_attributes	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let widget_attributes = {$/;"	v
widget_role	cache-plug/vim-polyglot/autoload/xml/aria.vim	/^let widget_role = [$/;"	v
widget_role	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^    let widget_role = ['alert', 'alertdialog', 'button', 'checkbox', 'combobox', 'dialog', 'gridcell', 'link', 'log', 'marquee', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'progressbar', 'radio', 'radiogroup', 'scrollbar', 'searchbox', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'tabpanel', 'textbox', 'timer', 'tooltip', 'treeitem', 'combobox', 'grid', 'listbox', 'menu', 'menubar', 'radiogroup', 'tablist', 'tree', 'treegrid']$/;"	v
win_execute	cache-plug/coc.nvim/autoload/coc/api.vim	/^  function! s:win_execute(win_id, cmd, ...) abort$/;"	f
win_gotoid_safe	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:win_gotoid_safe(winid)$/;"	f
win_setview	cache-plug/coc.nvim/autoload/coc/float.vim	/^function! s:win_setview(winid, topline, lnum) abort$/;"	f
windowPosition	cache-plug/fzf/src/options.go	/^type windowPosition int$/;"	t
windows_sink	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
winshell	cache-plug/vim-fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
winshell	cache-plug/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:winshell()$/;"	f
withIndex	cache-plug/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f
withPrefixLengths	cache-plug/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f
with_index	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
wo	plugin/bepo.vim	/^noremap wo <C-w>s$/;"	m
workspaceLoad	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:workspaceLoad(files, cont)$/;"	f
workspacePeek	cache-plug/vim-polyglot/autoload/fsharp.vim	/^function! s:workspacePeek(directory, depth, excludedDirs, cont)$/;"	f
wp	plugin/bepo.vim	/^noremap wp <C-w>o$/;"	m
wr	plugin/bepo.vim	/^noremap wr <C-w>l$/;"	m
wrap	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
wrap	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
wrapLine	cache-plug/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, max int, tabstop int) []wrappedLine {$/;"	f
wrap_a	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! s:wrap_a(back,forward) abort$/;"	f
wrap_around	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^function! s:wrap_around()$/;"	f
wrap_cmds	cache-plug/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
wrap_i	cache-plug/vim-polyglot/ftplugin/ruby.vim	/^function! s:wrap_i(back,forward) abort$/;"	f
wrap_inside	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^function! s:wrap_inside()$/;"	f
wrapped	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^  let wrapped['sink*'] = remove(wrapped, 'newsink')$/;"	v
wrappedLine	cache-plug/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	t
writeTemporaryFile	cache-plug/fzf/src/terminal.go	/^func writeTemporaryFile(data []string, printSep string) string {$/;"	f
write_buffer	cache-plug/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:write_buffer(bufnr, file)$/;"	f
write_to_preview_window	cache-plug/vim-polyglot/autoload/julia/doc.vim	/^function! s:write_to_preview_window(content, ftype, buffername)$/;"	f
write_triggered_update_tags	cache-plug/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
writelines	cache-plug/fzf/test/test_go.rb	/^  def writelines(path, lines)$/;"	f	class:TestBase
ws	plugin/bepo.vim	/^noremap ws <C-w>k$/;"	m
wt	plugin/bepo.vim	/^noremap wt <C-w>j$/;"	m
xml_attributes	cache-plug/vim-polyglot/autoload/xml/html5.vim	/^let xml_attributes = {'xml:lang': lang_tag, 'xml:space': ['preserve'], 'xml:base': [], 'xmlns': ['http:\/\/www.w3.org\/1999\/xhtml', 'http:\/\/www.w3.org\/1998\/Math\/MathML', 'http:\/\/www.w3.org\/2000\/svg', 'http:\/\/www.w3.org\/1999\/xlink']}$/;"	v
xterm_launcher	cache-plug/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
yank_to_register	cache-plug/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
yats#IsInMultilineComment	cache-plug/vim-polyglot/autoload/yats.vim	/^function yats#IsInMultilineComment(lnum, col)$/;"	f
yats#IsLineComment	cache-plug/vim-polyglot/autoload/yats.vim	/^function yats#IsLineComment(lnum, col)$/;"	f
z/	plugin/autohighlight.vim	/^nnoremap z\/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>$/;"	m
zig#config#Debug	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#Debug() abort$/;"	f
zig#config#FmtAutosave	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#FmtAutosave() abort$/;"	f
zig#config#FmtCommand	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#FmtCommand() abort$/;"	f
zig#config#FmtExperimental	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#FmtExperimental() abort$/;"	f
zig#config#FmtFailSilently	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#FmtFailSilently() abort$/;"	f
zig#config#ListAutoclose	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#ListAutoclose() abort$/;"	f
zig#config#ListHeight	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#ListHeight() abort$/;"	f
zig#config#ListType	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#ListType() abort$/;"	f
zig#config#ListTypeCommands	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#ListTypeCommands() abort$/;"	f
zig#config#SetFmtAutosave	cache-plug/vim-polyglot/autoload/zig/config.vim	/^function! zig#config#SetFmtAutosave(value) abort$/;"	f
zig#fmt#Format	cache-plug/vim-polyglot/autoload/zig/fmt.vim	/^function! zig#fmt#Format() abort$/;"	f
zig#fmt#ToggleFmtAutoSave	cache-plug/vim-polyglot/autoload/zig/fmt.vim	/^function! zig#fmt#ToggleFmtAutoSave() abort$/;"	f
zig#fmt#run	cache-plug/vim-polyglot/autoload/zig/fmt.vim	/^function! zig#fmt#run(bin_name, target)$/;"	f
zig#fmt#update_file	cache-plug/vim-polyglot/autoload/zig/fmt.vim	/^function! zig#fmt#update_file(target)$/;"	f
zig#list#Clean	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Clean(listtype) abort$/;"	f
zig#list#Close	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Close(listtype) abort$/;"	f
zig#list#Get	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Get(listtype) abort$/;"	f
zig#list#JumpToFirst	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#JumpToFirst(listtype) abort$/;"	f
zig#list#Parse	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Parse(listtype, items, title) abort$/;"	f
zig#list#ParseFormat	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#ParseFormat(listtype, errformat, items, title) abort$/;"	f
zig#list#Populate	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Populate(listtype, items, title) abort$/;"	f
zig#list#Type	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Type(for) abort$/;"	f
zig#list#Window	cache-plug/vim-polyglot/autoload/zig/list.vim	/^function! zig#list#Window(listtype, ...) abort$/;"	f
zig#util#EchoError	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoError(msg)$/;"	f
zig#util#EchoInfo	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoInfo(msg)$/;"	f
zig#util#EchoProgress	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoProgress(msg)$/;"	f
zig#util#EchoSuccess	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoSuccess(msg)$/;"	f
zig#util#EchoWarning	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#EchoWarning(msg)$/;"	f
zig#util#Exec	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Exec(cmd, ...) abort$/;"	f
zig#util#GetLines	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#GetLines()$/;"	f
zig#util#HasDebug	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#HasDebug(flag)$/;"	f
zig#util#IsMac	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#IsMac() abort$/;"	f
zig#util#IsUsingCygwinShell	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#IsUsingCygwinShell()$/;"	f
zig#util#IsWin	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#IsWin() abort$/;"	f
zig#util#Join	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Join(...) abort$/;"	f
zig#util#LineEnding	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#LineEnding() abort$/;"	f
zig#util#Offset	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Offset(line, col) abort$/;"	f
zig#util#OffsetCursor	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#OffsetCursor() abort$/;"	f
zig#util#PathListSep	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#PathListSep() abort$/;"	f
zig#util#PathSep	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#PathSep() abort$/;"	f
zig#util#ShellError	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#ShellError() abort$/;"	f
zig#util#Shellescape	cache-plug/vim-polyglot/autoload/zig/util.vim	/^fu! zig#util#Shellescape(arg)$/;"	f
zig#util#Shelljoin	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Shelljoin(arglist, ...) abort$/;"	f
zig#util#Shelllist	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Shelllist(arglist, ...) abort$/;"	f
zig#util#StripPathSep	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#StripPathSep(path) abort$/;"	f
zig#util#StripTrailingSlash	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#StripTrailingSlash(paths) abort$/;"	f
zig#util#System	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#System(str, ...) abort$/;"	f
zig#util#Windo	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#Windo(command) abort$/;"	f
zig#util#camelcase	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#camelcase(word) abort$/;"	f
zig#util#env	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#env(key) abort$/;"	f
zig#util#has_job	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#has_job(...) abort$/;"	f
zig#util#pascalcase	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#pascalcase(word) abort$/;"	f
zig#util#snakecase	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#snakecase(word) abort$/;"	f
zig#util#snippetcase	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#snippetcase(word) abort$/;"	f
zig#util#tempdir	cache-plug/vim-polyglot/autoload/zig/util.vim	/^function! zig#util#tempdir(prefix) abort$/;"	f
zip	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:zip(...) abort$/;"	f
zip_fill	cache-plug/vim-polyglot/autoload/vital/_crystal/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
zs	plugin/bepo.vim	/^noremap zs zj$/;"	m
zsh	cache-plug/fzf/test/test_go.rb	/^    def zsh$/;"	f	class:Shell
zt	plugin/bepo.vim	/^noremap zt zk$/;"	m
{{	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{ {{}}<left><left>$/;"	m
{{!	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{! {{!}}<left><left>$/;"	m
{{#	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{# {{#}}<cr>{{\/}}<up><left><left>$/;"	m
{{<	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{< {{<}}<left><left>$/;"	m
{{>	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{> {{>}}<left><left>$/;"	m
{{if	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{if {{#if }}<cr>{{\/if}}<up><left>$/;"	m
{{ife	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{ife {{#if }}<cr>{{else}}<cr>{{\/if}}<up><up><left>$/;"	m
{{{	cache-plug/vim-polyglot/ftplugin/handlebars.vim	/^  inoremap <buffer> {{{ {{{}}}<left><left><left>$/;"	m
«	plugin/bepo.vim	/^noremap « <$/;"	m
»	plugin/bepo.vim	/^noremap » >$/;"	m
É	plugin/bepo.vim	/^noremap É W$/;"	m
é	plugin/bepo.vim	/^noremap é w$/;"	m
